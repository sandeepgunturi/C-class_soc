//
// Generated by Bluespec Compiler (build 8d454e4)
//
// On Fri Oct  9 13:13:50 IST 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_ma_core_req                O     1 reg
// mv_core_resp                   O    65 reg
// RDY_mv_core_resp               O     1 const
// mav_fwd_req                    O    80 reg
// RDY_mav_fwd_req                O     1 reg
// RDY_ma_counter_interrupts      O     1 const
// RDY_ma_update_fflags           O     1 const
// RDY_ma_clint_msip              O     1 const
// RDY_ma_clint_mtip              O     1 const
// RDY_ma_set_meip                O     1 const
// RDY_ma_set_seip                O     1 const
// mv_csr_satp                    O    64
// RDY_mv_csr_satp                O     1 const
// mv_csr_mstatus                 O    64
// RDY_mv_csr_mstatus             O     1 const
// mv_csrs_to_decode              O   145
// RDY_mv_csrs_to_decode          O     1 const
// mav_upd_on_ret                 O    64
// RDY_mav_upd_on_ret             O     1 const
// mav_upd_on_trap                O    64
// RDY_mav_upd_on_trap            O     1 const
// mv_mpp                         O     2 reg
// mv_resume_wfi                  O     1
// RDY_mv_resume_wfi              O     1 const
// mv_spp                         O     1 reg
// mv_medeleg                     O    16
// RDY_mv_medeleg                 O     1 const
// mv_mideleg                     O    12 reg
// RDY_mv_mideleg                 O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// ma_core_req_req                I    80
// ma_csr_misa_m                  I    64
// ma_counter_interrupts_i        I    29
// ma_update_fflags_flags         I     5
// ma_clint_msip_intrpt           I     1 reg
// ma_clint_mtip_intrpt           I     1 reg
// ma_set_meip_ex_i               I     1 reg
// ma_set_seip_ex_i               I     1 reg
// ma_upd_privilege_prv           I     2
// mav_upd_on_ret_prv             I     2
// mav_upd_on_trap_c              I     6
// mav_upd_on_trap_pc             I    64
// mav_upd_on_trap_tval           I    64
// mav_upd_on_trap_prv            I     2
// EN_ma_core_req                 I     1
// EN_ma_counter_interrupts       I     1
// EN_ma_update_fflags            I     1
// EN_ma_clint_msip               I     1
// EN_ma_clint_mtip               I     1
// EN_ma_set_meip                 I     1
// EN_ma_set_seip                 I     1
// EN_mav_fwd_req                 I     1
// EN_mav_upd_on_ret              I     1
// EN_mav_upd_on_trap             I     1
//
// Combinational paths from inputs to outputs:
//   (ma_csr_misa_m,
//    ma_counter_interrupts_i,
//    ma_upd_privilege_prv,
//    EN_ma_counter_interrupts) -> mv_csrs_to_decode
//   (ma_csr_misa_m, mav_upd_on_ret_prv) -> mav_upd_on_ret
//   (ma_counter_interrupts_i, EN_ma_counter_interrupts) -> mv_resume_wfi
//   (mav_upd_on_trap_c, mav_upd_on_trap_prv) -> mav_upd_on_trap
//
//
// module : implementing read and write methods for group - 1 csrs and related side band 	         access
//
// Comments on the inlined module `wr_prv':
//   wire : stores the information on curent privilege level,		                updated by ma_upd_privilege, read in mv_csrs_to_decode, 		                ma_set_external_interrupt
//
// Comments on the inlined module `wr_csr_misa':
//   wire : to hold the current misa value from the other group MISA-s,u,n,c utilised
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mk_csr_grp1(CLK,
		   RST_N,

		   ma_core_req_req,
		   EN_ma_core_req,
		   RDY_ma_core_req,

		   mv_core_resp,
		   RDY_mv_core_resp,

		   EN_mav_fwd_req,
		   mav_fwd_req,
		   RDY_mav_fwd_req,

		   ma_csr_misa_m,

		   ma_counter_interrupts_i,
		   EN_ma_counter_interrupts,
		   RDY_ma_counter_interrupts,

		   ma_update_fflags_flags,
		   EN_ma_update_fflags,
		   RDY_ma_update_fflags,

		   ma_clint_msip_intrpt,
		   EN_ma_clint_msip,
		   RDY_ma_clint_msip,

		   ma_clint_mtip_intrpt,
		   EN_ma_clint_mtip,
		   RDY_ma_clint_mtip,

		   ma_set_meip_ex_i,
		   EN_ma_set_meip,
		   RDY_ma_set_meip,

		   ma_set_seip_ex_i,
		   EN_ma_set_seip,
		   RDY_ma_set_seip,

		   mv_csr_satp,
		   RDY_mv_csr_satp,

		   mv_csr_mstatus,
		   RDY_mv_csr_mstatus,

		   mv_csrs_to_decode,
		   RDY_mv_csrs_to_decode,

		   ma_upd_privilege_prv,

		   mav_upd_on_ret_prv,
		   EN_mav_upd_on_ret,
		   mav_upd_on_ret,
		   RDY_mav_upd_on_ret,

		   mav_upd_on_trap_c,
		   mav_upd_on_trap_pc,
		   mav_upd_on_trap_tval,
		   mav_upd_on_trap_prv,
		   EN_mav_upd_on_trap,
		   mav_upd_on_trap,
		   RDY_mav_upd_on_trap,

		   mv_mpp,

		   mv_resume_wfi,
		   RDY_mv_resume_wfi,

		   mv_spp,

		   mv_medeleg,
		   RDY_mv_medeleg,

		   mv_mideleg,
		   RDY_mv_mideleg);
  input  CLK;
  input  RST_N;

  // action method ma_core_req
  input  [79 : 0] ma_core_req_req;
  input  EN_ma_core_req;
  output RDY_ma_core_req;

  // value method mv_core_resp
  output [64 : 0] mv_core_resp;
  output RDY_mv_core_resp;

  // actionvalue method mav_fwd_req
  input  EN_mav_fwd_req;
  output [79 : 0] mav_fwd_req;
  output RDY_mav_fwd_req;

  // action method ma_csr_misa
  input  [63 : 0] ma_csr_misa_m;

  // action method ma_counter_interrupts
  input  [28 : 0] ma_counter_interrupts_i;
  input  EN_ma_counter_interrupts;
  output RDY_ma_counter_interrupts;

  // action method ma_update_fflags
  input  [4 : 0] ma_update_fflags_flags;
  input  EN_ma_update_fflags;
  output RDY_ma_update_fflags;

  // action method ma_clint_msip
  input  ma_clint_msip_intrpt;
  input  EN_ma_clint_msip;
  output RDY_ma_clint_msip;

  // action method ma_clint_mtip
  input  ma_clint_mtip_intrpt;
  input  EN_ma_clint_mtip;
  output RDY_ma_clint_mtip;

  // action method ma_set_meip
  input  ma_set_meip_ex_i;
  input  EN_ma_set_meip;
  output RDY_ma_set_meip;

  // action method ma_set_seip
  input  ma_set_seip_ex_i;
  input  EN_ma_set_seip;
  output RDY_ma_set_seip;

  // value method mv_csr_satp
  output [63 : 0] mv_csr_satp;
  output RDY_mv_csr_satp;

  // value method mv_csr_mstatus
  output [63 : 0] mv_csr_mstatus;
  output RDY_mv_csr_mstatus;

  // value method mv_csrs_to_decode
  output [144 : 0] mv_csrs_to_decode;
  output RDY_mv_csrs_to_decode;

  // action method ma_upd_privilege
  input  [1 : 0] ma_upd_privilege_prv;

  // actionvalue method mav_upd_on_ret
  input  [1 : 0] mav_upd_on_ret_prv;
  input  EN_mav_upd_on_ret;
  output [63 : 0] mav_upd_on_ret;
  output RDY_mav_upd_on_ret;

  // actionvalue method mav_upd_on_trap
  input  [5 : 0] mav_upd_on_trap_c;
  input  [63 : 0] mav_upd_on_trap_pc;
  input  [63 : 0] mav_upd_on_trap_tval;
  input  [1 : 0] mav_upd_on_trap_prv;
  input  EN_mav_upd_on_trap;
  output [63 : 0] mav_upd_on_trap;
  output RDY_mav_upd_on_trap;

  // value method mv_mpp
  output [1 : 0] mv_mpp;

  // value method mv_resume_wfi
  output mv_resume_wfi;
  output RDY_mv_resume_wfi;

  // value method mv_spp
  output mv_spp;

  // value method mv_medeleg
  output [15 : 0] mv_medeleg;
  output RDY_mv_medeleg;

  // value method mv_mideleg
  output [11 : 0] mv_mideleg;
  output RDY_mv_mideleg;

  // signals for module outputs
  wire [144 : 0] mv_csrs_to_decode;
  wire [79 : 0] mav_fwd_req;
  wire [64 : 0] mv_core_resp;
  wire [63 : 0] mav_upd_on_ret, mav_upd_on_trap, mv_csr_mstatus, mv_csr_satp;
  wire [15 : 0] mv_medeleg;
  wire [11 : 0] mv_mideleg;
  wire [1 : 0] mv_mpp;
  wire RDY_ma_clint_msip,
       RDY_ma_clint_mtip,
       RDY_ma_core_req,
       RDY_ma_counter_interrupts,
       RDY_ma_set_meip,
       RDY_ma_set_seip,
       RDY_ma_update_fflags,
       RDY_mav_fwd_req,
       RDY_mav_upd_on_ret,
       RDY_mav_upd_on_trap,
       RDY_mv_core_resp,
       RDY_mv_csr_mstatus,
       RDY_mv_csr_satp,
       RDY_mv_csrs_to_decode,
       RDY_mv_medeleg,
       RDY_mv_mideleg,
       RDY_mv_resume_wfi,
       mv_resume_wfi,
       mv_spp;

  // inlined wires
  reg [64 : 0] rg_resp_to_core_1_wget;
  reg [1 : 0] wr_prv_wget;
  wire [129 : 0] csr_op_arg_wget;

  // register rg_ext_seip
  // reg : Supervisor External Interrupt Pending register, written over by external     				 factors
  reg rg_ext_seip;
  wire rg_ext_seip_D_IN, rg_ext_seip_EN;

  // register rg_fflags
  reg [4 : 0] rg_fflags;
  wire [4 : 0] rg_fflags_D_IN;
  wire rg_fflags_EN;

  // register rg_frm
  reg [2 : 0] rg_frm;
  wire [2 : 0] rg_frm_D_IN;
  wire rg_frm_EN;

  // register rg_fs
  // reg : Floating Status, describes the status of floating point unit
  reg [1 : 0] rg_fs;
  wire [1 : 0] rg_fs_D_IN;
  wire rg_fs_EN;

  // register rg_mcause
  // reg : Machine Cause, holds the exception code for identifying last exception
  reg [4 : 0] rg_mcause;
  wire [4 : 0] rg_mcause_D_IN;
  wire rg_mcause_EN;

  // register rg_mcounterie
  reg rg_mcounterie;
  wire rg_mcounterie_D_IN, rg_mcounterie_EN;

  // register rg_medeleg_l10
  // reg : part of Machine Exception delegation register
  reg [9 : 0] rg_medeleg_l10;
  wire [9 : 0] rg_medeleg_l10_D_IN;
  wire rg_medeleg_l10_EN;

  // register rg_medeleg_m2
  // reg : part of Machine Exception delegation register
  reg [1 : 0] rg_medeleg_m2;
  wire [1 : 0] rg_medeleg_m2_D_IN;
  wire rg_medeleg_m2_EN;

  // register rg_medeleg_u1
  // reg : part of Machine Exception delegation register
  reg rg_medeleg_u1;
  wire rg_medeleg_u1_D_IN, rg_medeleg_u1_EN;

  // register rg_meie
  // reg : Machine External Interrupt Enable register
  reg rg_meie;
  wire rg_meie_D_IN, rg_meie_EN;

  // register rg_meip
  // reg : Machine External Interrupt Pending register
  reg rg_meip;
  wire rg_meip_D_IN, rg_meip_EN;

  // register rg_mepc
  // reg : Machine Exception Program Counter,can be used in holding the address of the 	  				 instruction interrupted upon Trap
  reg [62 : 0] rg_mepc;
  wire [62 : 0] rg_mepc_D_IN;
  wire rg_mepc_EN;

  // register rg_mideleg
  // reg : Machine Interrupt delegation register
  reg [11 : 0] rg_mideleg;
  wire [11 : 0] rg_mideleg_D_IN;
  wire rg_mideleg_EN;

  // register rg_mie
  // reg : Machine Interrupt Enable
  reg rg_mie;
  reg rg_mie_D_IN;
  wire rg_mie_EN;

  // register rg_minterrupt
  // reg : is set whenever the trap is caused by an interrupt, part of MCAUSE register
  reg rg_minterrupt;
  wire rg_minterrupt_D_IN, rg_minterrupt_EN;

  // register rg_mode
  // reg : Mode register encodes the trap-handling-pc-address whether Direct/Vectored
  reg [1 : 0] rg_mode;
  wire [1 : 0] rg_mode_D_IN;
  wire rg_mode_EN;

  // register rg_mpie
  // reg : Machine Previous Interrupt-Enable, holds previous interrupt-enable bit active     				 prior to the TRAP
  reg rg_mpie;
  reg rg_mpie_D_IN;
  wire rg_mpie_EN;

  // register rg_mpp
  // reg : Machine Previous Privilege, holds previous privilege mode prior to the TRAP
  reg [1 : 0] rg_mpp;
  reg [1 : 0] rg_mpp_D_IN;
  wire rg_mpp_EN;

  // register rg_mprv
  // reg : mprv modifie s the privilege level at which loads and stores execute,
  reg rg_mprv;
  wire rg_mprv_D_IN, rg_mprv_EN;

  // register rg_msie
  // reg : Machine Software Interrupt Enable register
  reg rg_msie;
  wire rg_msie_D_IN, rg_msie_EN;

  // register rg_msip
  // reg : Machine Software Interrupt Pending register
  reg rg_msip;
  wire rg_msip_D_IN, rg_msip_EN;

  // register rg_mtie
  // reg : Machine Timer Interrupt Enable register
  reg rg_mtie;
  wire rg_mtie_D_IN, rg_mtie_EN;

  // register rg_mtip
  // reg : Machine Timer Interrupt Pending register
  reg rg_mtip;
  wire rg_mtip_D_IN, rg_mtip_EN;

  // register rg_mtval
  // reg : Machine Trap VALue, may be written by faulting virtual address/first XLEN/ILEN 	  				 bitsof faulting instruction
  reg [63 : 0] rg_mtval;
  wire [63 : 0] rg_mtval_D_IN;
  wire rg_mtval_EN;

  // register rg_mtvec
  // reg : Machine Trap VECtor, holds the Base address for changing pc
  reg [61 : 0] rg_mtvec;
  wire [61 : 0] rg_mtvec_D_IN;
  wire rg_mtvec_EN;

  // register rg_mxr
  // reg : Make eXecutable Readable, modifies the privilege with which loads access              vitual memory
  reg rg_mxr;
  wire rg_mxr_D_IN, rg_mxr_EN;

  // register rg_resp_to_core
  // reg : register to hold the response of this group for a csr operation request
  reg [64 : 0] rg_resp_to_core;
  wire [64 : 0] rg_resp_to_core_D_IN;
  wire rg_resp_to_core_EN;

  // register rg_satp_asid
  // reg : Address Space Identifier in SATP register, used for facilitating address 	           translation fences.
  reg [8 : 0] rg_satp_asid;
  wire [8 : 0] rg_satp_asid_D_IN;
  wire rg_satp_asid_EN;

  // register rg_satp_mode
  // reg : the MODE field selects the S-mode address translation scheme
  reg [3 : 0] rg_satp_mode;
  wire [3 : 0] rg_satp_mode_D_IN;
  wire rg_satp_mode_EN;

  // register rg_satp_ppn
  // reg : holds Physical Page Number of the root page table, part of SATP register
  reg [43 : 0] rg_satp_ppn;
  wire [43 : 0] rg_satp_ppn_D_IN;
  wire rg_satp_ppn_EN;

  // register rg_scause
  // reg : Supervisor Cause, holds the exception code for identifying last exception in
  reg [4 : 0] rg_scause;
  wire [4 : 0] rg_scause_D_IN;
  wire rg_scause_EN;

  // register rg_seie
  // reg : Supervisor External Interrupt Enable register
  reg rg_seie;
  wire rg_seie_D_IN, rg_seie_EN;

  // register rg_sepc
  // reg : Supervisor Exception Program Counter, can be used in holding the address of the 	  				 instruction interrupted upon Trap
  reg [62 : 0] rg_sepc;
  wire [62 : 0] rg_sepc_D_IN;
  wire rg_sepc_EN;

  // register rg_sie
  // reg : Supervisor Interrupt Enable
  reg rg_sie;
  reg rg_sie_D_IN;
  wire rg_sie_EN;

  // register rg_sinterrupt
  // reg : is set whenever the trap is caused by an interrupt, part of SCAUSE register
  reg rg_sinterrupt;
  wire rg_sinterrupt_D_IN, rg_sinterrupt_EN;

  // register rg_smode
  // reg : Supervisor Mode register encodes the trap-handling-pc-address whether   	         Direct/Vectored
  reg [1 : 0] rg_smode;
  wire [1 : 0] rg_smode_D_IN;
  wire rg_smode_EN;

  // register rg_soft_seip
  // reg : Supervisor External Interrupt Pending register, may be written over by software   	 				 in M-mode
  reg rg_soft_seip;
  wire rg_soft_seip_D_IN, rg_soft_seip_EN;

  // register rg_spie
  // reg : Supervisor Previous Interrupt-Enable, holds previous interrupt-enable bit active    				 prior to the TRAP
  reg rg_spie;
  reg rg_spie_D_IN;
  wire rg_spie_EN;

  // register rg_spp
  // reg : Supervisor Previous Privilege, holds previous privilege mode prior to the TRAP
  reg rg_spp;
  reg rg_spp_D_IN;
  wire rg_spp_EN;

  // register rg_ssie
  // reg : Supervisor Software Interrupt Enable register
  reg rg_ssie;
  wire rg_ssie_D_IN, rg_ssie_EN;

  // register rg_ssip
  // reg : Supervisor Software Interrupt Pending register
  reg rg_ssip;
  wire rg_ssip_D_IN, rg_ssip_EN;

  // register rg_stie
  // reg : Supervisor Timer Interrupt Enable register
  reg rg_stie;
  wire rg_stie_D_IN, rg_stie_EN;

  // register rg_stip
  // reg : Supervisor Timer Interrupt Pending register
  reg rg_stip;
  wire rg_stip_D_IN, rg_stip_EN;

  // register rg_stval
  // reg : Supervisor Trap VALue, may be written by faulting virtual address/first 	   				 XLEN/ILEN bits of faulting instruction
  reg [63 : 0] rg_stval;
  wire [63 : 0] rg_stval_D_IN;
  wire rg_stval_EN;

  // register rg_stvec
  // reg : Supervisor Trap VECtor, holds the Base address for changing pc
  reg [61 : 0] rg_stvec;
  wire [61 : 0] rg_stvec_D_IN;
  wire rg_stvec_EN;

  // register rg_sum
  // reg : Supervisor User Memory, modifies privilege with which S-mode loads and     					stores access virtual memory
  reg rg_sum;
  wire rg_sum_D_IN, rg_sum_EN;

  // register rg_tsr
  // reg : Trap-SRET, if rg_tsr = 1, SRET instruction raises exception
  reg rg_tsr;
  wire rg_tsr_D_IN, rg_tsr_EN;

  // register rg_tvm
  // reg : Trap virtual Memory, bit for supporting interception of supervisor              virtual memory management operations
  reg rg_tvm;
  wire rg_tvm_D_IN, rg_tvm_EN;

  // register rg_tw
  // reg : Time-out Wait, bit for supporting interception by WFI instruction
  reg rg_tw;
  wire rg_tw_D_IN, rg_tw_EN;

  // ports of submodule ff_fwd_request
  wire [79 : 0] ff_fwd_request_D_IN, ff_fwd_request_D_OUT;
  wire ff_fwd_request_CLR,
       ff_fwd_request_DEQ,
       ff_fwd_request_EMPTY_N,
       ff_fwd_request_ENQ,
       ff_fwd_request_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rg_resp_to_core__dreg_update,
       CAN_FIRE_ma_clint_msip,
       CAN_FIRE_ma_clint_mtip,
       CAN_FIRE_ma_core_req,
       CAN_FIRE_ma_counter_interrupts,
       CAN_FIRE_ma_csr_misa,
       CAN_FIRE_ma_set_meip,
       CAN_FIRE_ma_set_seip,
       CAN_FIRE_ma_upd_privilege,
       CAN_FIRE_ma_update_fflags,
       CAN_FIRE_mav_fwd_req,
       CAN_FIRE_mav_upd_on_ret,
       CAN_FIRE_mav_upd_on_trap,
       WILL_FIRE_RL_rg_resp_to_core__dreg_update,
       WILL_FIRE_ma_clint_msip,
       WILL_FIRE_ma_clint_mtip,
       WILL_FIRE_ma_core_req,
       WILL_FIRE_ma_counter_interrupts,
       WILL_FIRE_ma_csr_misa,
       WILL_FIRE_ma_set_meip,
       WILL_FIRE_ma_set_seip,
       WILL_FIRE_ma_upd_privilege,
       WILL_FIRE_ma_update_fflags,
       WILL_FIRE_mav_fwd_req,
       WILL_FIRE_mav_upd_on_ret,
       WILL_FIRE_mav_upd_on_trap;

  // inputs to muxes for submodule ports
  reg [1 : 0] MUX_rg_fs_write_1__VAL_1;
  wire MUX_rg_fflags_write_1__SEL_1,
       MUX_rg_fs_write_1__SEL_1,
       MUX_rg_mcause_write_1__SEL_1,
       MUX_rg_mcause_write_1__SEL_2,
       MUX_rg_mepc_write_1__SEL_1,
       MUX_rg_mie_write_1__SEL_1,
       MUX_rg_mie_write_1__SEL_2,
       MUX_rg_mpp_write_1__SEL_1,
       MUX_rg_mtval_write_1__SEL_1,
       MUX_rg_scause_write_1__SEL_1,
       MUX_rg_scause_write_1__SEL_2,
       MUX_rg_sepc_write_1__SEL_1,
       MUX_rg_sie_write_1__SEL_1,
       MUX_rg_sie_write_1__SEL_3,
       MUX_rg_stval_write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] IF_ma_core_req_req_BITS_79_TO_68_EQ_0x1_THEN_0_ETC___d249,
	       v__h3984;
  reg [1 : 0] IF_wr_prv_wget__28_EQ_3_29_OR_wr_prv_wget__28__ETC___d432;
  wire [63 : 0] lv_mi_mask__h2319,
		lv_si_mask__h2320,
		readdata__h2506,
		readdata__h2516,
		readdata__h2571,
		readdata__h2581,
		rg_csr_mie__read__h2968,
		rg_csr_mip__read__h3174,
		rg_csr_sie__read__h3452,
		rg_csr_sip__read__h3536,
		x__h3797,
		x__h4018,
		x__h4211,
		x__h5305,
		x__h5567,
		x__h5828,
		x__h8223,
		x__h9582,
		x_data__h2791,
		x_data__h3275,
		x_data__h3302,
		x_data__h3328,
		x_data__h3379,
		x_data__h3583,
		x_data__h3610,
		x_data__h3636,
		x_data__h3687;
  wire [62 : 0] IF_mav_upd_on_ret_prv_EQ_1_43_THEN_IF_wr_csr_m_ETC___d452,
		r1__read__h2970,
		r1__read__h3176,
		r1__read__h3454,
		r1__read__h3538,
		result__h10433,
		result__h10521;
  wire [61 : 0] IF_rg_mode_14_EQ_1_64_AND_mav_upd_on_trap_c_BI_ETC___d467,
		IF_rg_smode_64_EQ_1_59_AND_mav_upd_on_trap_c_B_ETC___d463,
		r1__read__h2972,
		r1__read__h3178,
		r1__read__h3456,
		r1__read__h3540,
		y__h10887;
  wire [60 : 0] _0_CONCAT_NOT_IF_wr_counter_interrupts_whas__3__ETC___d480,
		r1__read__h2974,
		r1__read__h3180;
  wire [59 : 0] r1__read__h2976,
		r1__read__h3182,
		r1__read__h3458,
		r1__read__h3542;
  wire [58 : 0] r1__read__h2978,
		r1__read__h3184,
		r1__read__h3460,
		r1__read__h3544;
  wire [57 : 0] r1__read__h2980,
		r1__read__h3186,
		r1__read__h3462,
		r1__read__h3546;
  wire [56 : 0] _0_CONCAT_NOT_IF_wr_counter_interrupts_whas__3__ETC___d476,
		r1__read__h2982,
		r1__read__h3188;
  wire [55 : 0] r1__read__h2984,
		r1__read__h3190,
		r1__read__h3464,
		r1__read__h3548;
  wire [54 : 0] r1__read__h2986,
		r1__read__h3192,
		r1__read__h3466,
		r1__read__h3550;
  wire [53 : 0] r1__read__h2988, r1__read__h3194;
  wire [52 : 0] r1__read__h2990, r1__read__h3196;
  wire [51 : 0] r1__read__h2992, r1__read__h3198;
  wire [47 : 0] r1__read__h2994, r1__read__h3200;
  wire [28 : 0] x__h3215;
  wire [7 : 0] x__h2769;
  wire [4 : 0] x__h9994;
  wire IF_csr_op_res_whas__81_THEN_csr_op_res_wget__8_ETC___d378,
       NOT_ma_update_fflags_flags_OR_rg_fflags_25_EQ__ETC___d427,
       ma_core_req_req_BITS_79_TO_68_EQ_0x1_AND_NOT_r_ETC___d305,
       ma_core_req_req_BITS_79_TO_68_EQ_0x2_AND_NOT_r_ETC___d303,
       ma_core_req_req_BITS_79_TO_68_EQ_0x300_4_AND_I_ETC___d334,
       r__h2794,
       r__h3212,
       rg_seip__read__h3233;

  // action method ma_core_req
  assign RDY_ma_core_req = ff_fwd_request_FULL_N ;
  assign CAN_FIRE_ma_core_req = ff_fwd_request_FULL_N ;
  assign WILL_FIRE_ma_core_req = EN_ma_core_req ;

  // value method mv_core_resp
  assign mv_core_resp = rg_resp_to_core ;
  assign RDY_mv_core_resp = 1'd1 ;

  // actionvalue method mav_fwd_req
  assign mav_fwd_req = ff_fwd_request_D_OUT ;
  assign RDY_mav_fwd_req = ff_fwd_request_EMPTY_N ;
  assign CAN_FIRE_mav_fwd_req = ff_fwd_request_EMPTY_N ;
  assign WILL_FIRE_mav_fwd_req = EN_mav_fwd_req ;

  // action method ma_csr_misa
  assign CAN_FIRE_ma_csr_misa = 1'd1 ;
  assign WILL_FIRE_ma_csr_misa = 1'd1 ;

  // action method ma_counter_interrupts
  assign RDY_ma_counter_interrupts = 1'd1 ;
  assign CAN_FIRE_ma_counter_interrupts = 1'd1 ;
  assign WILL_FIRE_ma_counter_interrupts = EN_ma_counter_interrupts ;

  // action method ma_update_fflags
  assign RDY_ma_update_fflags = 1'd1 ;
  assign CAN_FIRE_ma_update_fflags = 1'd1 ;
  assign WILL_FIRE_ma_update_fflags = EN_ma_update_fflags ;

  // action method ma_clint_msip
  assign RDY_ma_clint_msip = 1'd1 ;
  assign CAN_FIRE_ma_clint_msip = 1'd1 ;
  assign WILL_FIRE_ma_clint_msip = EN_ma_clint_msip ;

  // action method ma_clint_mtip
  assign RDY_ma_clint_mtip = 1'd1 ;
  assign CAN_FIRE_ma_clint_mtip = 1'd1 ;
  assign WILL_FIRE_ma_clint_mtip = EN_ma_clint_mtip ;

  // action method ma_set_meip
  assign RDY_ma_set_meip = 1'd1 ;
  assign CAN_FIRE_ma_set_meip = 1'd1 ;
  assign WILL_FIRE_ma_set_meip = EN_ma_set_meip ;

  // action method ma_set_seip
  assign RDY_ma_set_seip = 1'd1 ;
  assign CAN_FIRE_ma_set_seip = 1'd1 ;
  assign WILL_FIRE_ma_set_seip = EN_ma_set_seip ;

  // value method mv_csr_satp
  assign mv_csr_satp = { rg_satp_mode, 7'd0, rg_satp_asid, rg_satp_ppn } ;
  assign RDY_mv_csr_satp = 1'd1 ;

  // value method mv_csr_mstatus
  assign mv_csr_mstatus =
	     { r__h2794,
	       40'd5120,
	       rg_tsr,
	       rg_tw,
	       rg_tvm,
	       rg_mxr,
	       rg_sum,
	       rg_mprv,
	       2'd0,
	       rg_fs,
	       rg_mpp,
	       2'd0,
	       rg_spp,
	       rg_mpie,
	       1'd0,
	       rg_spie,
	       1'd0,
	       rg_mie,
	       1'd0,
	       rg_sie,
	       1'd0 } ;
  assign RDY_mv_csr_mstatus = 1'd1 ;

  // value method mv_csrs_to_decode
  assign mv_csrs_to_decode =
	     { IF_wr_prv_wget__28_EQ_3_29_OR_wr_prv_wget__28__ETC___d432,
	       readdata__h2516[18:0],
	       readdata__h2506[18:0],
	       ma_csr_misa_m[25:0],
	       rg_frm,
	       x_data__h2791,
	       rg_mideleg } ;
  assign RDY_mv_csrs_to_decode = 1'b1 ;

  // action method ma_upd_privilege
  assign CAN_FIRE_ma_upd_privilege = 1'd1 ;
  assign WILL_FIRE_ma_upd_privilege = 1'd1 ;

  // actionvalue method mav_upd_on_ret
  assign mav_upd_on_ret =
	     { IF_mav_upd_on_ret_prv_EQ_1_43_THEN_IF_wr_csr_m_ETC___d452,
	       1'b0 } ;
  assign RDY_mav_upd_on_ret = 1'd1 ;
  assign CAN_FIRE_mav_upd_on_ret = 1'd1 ;
  assign WILL_FIRE_mav_upd_on_ret = EN_mav_upd_on_ret ;

  // actionvalue method mav_upd_on_trap
  assign mav_upd_on_trap =
	     { (mav_upd_on_trap_prv == 2'd1) ?
		 IF_rg_smode_64_EQ_1_59_AND_mav_upd_on_trap_c_B_ETC___d463 :
		 IF_rg_mode_14_EQ_1_64_AND_mav_upd_on_trap_c_BI_ETC___d467,
	       2'b0 } ;
  assign RDY_mav_upd_on_trap = 1'd1 ;
  assign CAN_FIRE_mav_upd_on_trap = 1'd1 ;
  assign WILL_FIRE_mav_upd_on_trap = EN_mav_upd_on_trap ;

  // value method mv_mpp
  assign mv_mpp = rg_mpp ;

  // value method mv_resume_wfi
  assign mv_resume_wfi =
	     { _0_CONCAT_NOT_IF_wr_counter_interrupts_whas__3__ETC___d480,
	       1'd0,
	       rg_ssip & rg_ssie } !=
	     63'd0 ;
  assign RDY_mv_resume_wfi = 1'd1 ;

  // value method mv_spp
  assign mv_spp = rg_spp ;

  // value method mv_medeleg
  assign mv_medeleg =
	     { rg_medeleg_u1, 1'd0, rg_medeleg_m2, 2'd0, rg_medeleg_l10 } ;
  assign RDY_mv_medeleg = 1'd1 ;

  // value method mv_mideleg
  assign mv_mideleg = rg_mideleg ;
  assign RDY_mv_mideleg = 1'd1 ;

  // submodule ff_fwd_request
  // fifo : fifo to forward the core - request to the next group on a miss in the                      current group
  FIFO2 #(.width(32'd80), .guarded(32'd1)) ff_fwd_request(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(ff_fwd_request_D_IN),
							  .ENQ(ff_fwd_request_ENQ),
							  .DEQ(ff_fwd_request_DEQ),
							  .CLR(ff_fwd_request_CLR),
							  .D_OUT(ff_fwd_request_D_OUT),
							  .FULL_N(ff_fwd_request_FULL_N),
							  .EMPTY_N(ff_fwd_request_EMPTY_N));

  // rule RL_rg_resp_to_core__dreg_update
  assign CAN_FIRE_RL_rg_resp_to_core__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_resp_to_core__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_rg_fflags_write_1__SEL_1 =
	     EN_ma_core_req &&
	     (ma_core_req_req[79:68] == 12'h001 ||
	      ma_core_req_req[79:68] == 12'h003) ;
  assign MUX_rg_fs_write_1__SEL_1 =
	     EN_ma_core_req &&
	     ma_core_req_req_BITS_79_TO_68_EQ_0x1_AND_NOT_r_ETC___d305 ;
  assign MUX_rg_mcause_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h342 ;
  assign MUX_rg_mcause_write_1__SEL_2 =
	     EN_mav_upd_on_trap && mav_upd_on_trap_prv != 2'd1 ;
  assign MUX_rg_mepc_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h341 ;
  assign MUX_rg_mie_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h300 ;
  assign MUX_rg_mie_write_1__SEL_2 =
	     EN_mav_upd_on_ret && mav_upd_on_ret_prv != 2'd1 ;
  assign MUX_rg_mpp_write_1__SEL_1 =
	     EN_ma_core_req &&
	     ma_core_req_req_BITS_79_TO_68_EQ_0x300_4_AND_I_ETC___d334 ;
  assign MUX_rg_mtval_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h343 ;
  assign MUX_rg_scause_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h142 ;
  assign MUX_rg_scause_write_1__SEL_2 =
	     EN_mav_upd_on_trap && mav_upd_on_trap_prv == 2'd1 ;
  assign MUX_rg_sepc_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h141 ;
  assign MUX_rg_sie_write_1__SEL_1 =
	     EN_mav_upd_on_ret && mav_upd_on_ret_prv == 2'd1 ;
  assign MUX_rg_sie_write_1__SEL_3 =
	     EN_ma_core_req &&
	     (ma_core_req_req[79:68] == 12'h300 ||
	      ma_core_req_req[79:68] == 12'h100) ;
  assign MUX_rg_stval_write_1__SEL_1 =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h143 ;
  always@(ma_core_req_req or v__h3984)
  begin
    case (ma_core_req_req[79:68])
      12'h001, 12'h002, 12'h003: MUX_rg_fs_write_1__VAL_1 = 2'b11;
      default: MUX_rg_fs_write_1__VAL_1 = v__h3984[14:13];
    endcase
  end

  // inlined wires
  always@(ma_core_req_req or
	  rg_fflags or
	  rg_frm or
	  x__h2769 or
	  x_data__h3379 or
	  readdata__h2571 or
	  x_data__h3583 or
	  x_data__h3610 or
	  x_data__h3636 or
	  rg_stval or
	  readdata__h2581 or
	  x_data__h3687 or
	  x_data__h2791 or
	  rg_medeleg_u1 or
	  rg_medeleg_m2 or
	  rg_medeleg_l10 or
	  rg_mideleg or
	  readdata__h2506 or
	  x_data__h3275 or
	  x_data__h3302 or x_data__h3328 or rg_mtval or readdata__h2516)
  begin
    case (ma_core_req_req[79:68])
      12'h001: rg_resp_to_core_1_wget = { 60'h800000000000000, rg_fflags };
      12'h002: rg_resp_to_core_1_wget = { 62'h2000000000000000, rg_frm };
      12'h003: rg_resp_to_core_1_wget = { 57'h100000000000000, x__h2769 };
      12'h100: rg_resp_to_core_1_wget = { 1'd1, x_data__h3379 };
      12'h104: rg_resp_to_core_1_wget = { 1'd1, readdata__h2571 };
      12'h105: rg_resp_to_core_1_wget = { 1'd1, x_data__h3583 };
      12'h141: rg_resp_to_core_1_wget = { 1'd1, x_data__h3610 };
      12'h142: rg_resp_to_core_1_wget = { 1'd1, x_data__h3636 };
      12'h143: rg_resp_to_core_1_wget = { 1'd1, rg_stval };
      12'h144: rg_resp_to_core_1_wget = { 1'd1, readdata__h2581 };
      12'h180: rg_resp_to_core_1_wget = { 1'd1, x_data__h3687 };
      12'h300: rg_resp_to_core_1_wget = { 1'd1, x_data__h2791 };
      12'h302:
	  rg_resp_to_core_1_wget =
	      { 49'h1000000000000,
		rg_medeleg_u1,
		1'd0,
		rg_medeleg_m2,
		2'd0,
		rg_medeleg_l10 };
      12'h303: rg_resp_to_core_1_wget = { 53'h10000000000000, rg_mideleg };
      12'h304: rg_resp_to_core_1_wget = { 1'd1, readdata__h2506 };
      12'h305: rg_resp_to_core_1_wget = { 1'd1, x_data__h3275 };
      12'h341: rg_resp_to_core_1_wget = { 1'd1, x_data__h3302 };
      12'h342: rg_resp_to_core_1_wget = { 1'd1, x_data__h3328 };
      12'h343: rg_resp_to_core_1_wget = { 1'd1, rg_mtval };
      12'h344: rg_resp_to_core_1_wget = { 1'd1, readdata__h2516 };
      default: rg_resp_to_core_1_wget = 65'd0;
    endcase
  end
  assign csr_op_arg_wget =
	     { ma_core_req_req[67:4],
	       IF_ma_core_req_req_BITS_79_TO_68_EQ_0x1_THEN_0_ETC___d249,
	       ma_core_req_req[3:2] } ;
  always@(ma_upd_privilege_prv)
  begin
    case (ma_upd_privilege_prv)
      2'd1, 2'd3: wr_prv_wget = ma_upd_privilege_prv;
      default: wr_prv_wget = 2'd0;
    endcase
  end

  // register rg_ext_seip
  assign rg_ext_seip_D_IN = ma_set_seip_ex_i ;
  assign rg_ext_seip_EN = EN_ma_set_seip ;

  // register rg_fflags
  assign rg_fflags_D_IN =
	     MUX_rg_fflags_write_1__SEL_1 ? v__h3984[4:0] : x__h9994 ;
  assign rg_fflags_EN =
	     EN_ma_core_req &&
	     (ma_core_req_req[79:68] == 12'h001 ||
	      ma_core_req_req[79:68] == 12'h003) ||
	     EN_ma_update_fflags &&
	     NOT_ma_update_fflags_flags_OR_rg_fflags_25_EQ__ETC___d427 ;

  // register rg_frm
  assign rg_frm_D_IN =
	     (ma_core_req_req[79:68] == 12'h002) ?
	       v__h3984[2:0] :
	       v__h3984[7:5] ;
  assign rg_frm_EN =
	     EN_ma_core_req &&
	     (ma_core_req_req[79:68] == 12'h002 ||
	      ma_core_req_req[79:68] == 12'h003) ;

  // register rg_fs
  assign rg_fs_D_IN =
	     MUX_rg_fs_write_1__SEL_1 ? MUX_rg_fs_write_1__VAL_1 : 2'b11 ;
  assign rg_fs_EN =
	     EN_ma_core_req &&
	     ma_core_req_req_BITS_79_TO_68_EQ_0x1_AND_NOT_r_ETC___d305 ||
	     EN_ma_update_fflags &&
	     NOT_ma_update_fflags_flags_OR_rg_fflags_25_EQ__ETC___d427 ;

  // register rg_mcause
  assign rg_mcause_D_IN =
	     MUX_rg_mcause_write_1__SEL_1 ?
	       v__h3984[4:0] :
	       mav_upd_on_trap_c[4:0] ;
  assign rg_mcause_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h342 ||
	     EN_mav_upd_on_trap && mav_upd_on_trap_prv != 2'd1 ;

  // register rg_mcounterie
  assign rg_mcounterie_D_IN = x__h5828[16] ;
  assign rg_mcounterie_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h304 ;

  // register rg_medeleg_l10
  assign rg_medeleg_l10_D_IN = v__h3984[9:0] ;
  assign rg_medeleg_l10_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h302 ;

  // register rg_medeleg_m2
  assign rg_medeleg_m2_D_IN = v__h3984[13:12] ;
  assign rg_medeleg_m2_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h302 ;

  // register rg_medeleg_u1
  assign rg_medeleg_u1_D_IN = v__h3984[15] ;
  assign rg_medeleg_u1_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h302 ;

  // register rg_meie
  assign rg_meie_D_IN = x__h5828[11] ;
  assign rg_meie_EN = EN_ma_core_req && ma_core_req_req[79:68] == 12'h304 ;

  // register rg_meip
  assign rg_meip_D_IN = ma_set_meip_ex_i ;
  assign rg_meip_EN = EN_ma_set_meip ;

  // register rg_mepc
  assign rg_mepc_D_IN =
	     MUX_rg_mepc_write_1__SEL_1 ?
	       v__h3984[63:1] :
	       mav_upd_on_trap_pc[63:1] ;
  assign rg_mepc_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h341 ||
	     EN_mav_upd_on_trap && mav_upd_on_trap_prv != 2'd1 ;

  // register rg_mideleg
  assign rg_mideleg_D_IN = v__h3984[11:0] ;
  assign rg_mideleg_EN = EN_ma_core_req && ma_core_req_req[79:68] == 12'h303 ;

  // register rg_mie
  always@(MUX_rg_mie_write_1__SEL_1 or
	  v__h3984 or
	  MUX_rg_mie_write_1__SEL_2 or
	  rg_mpie or MUX_rg_mcause_write_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_mie_write_1__SEL_1: rg_mie_D_IN = v__h3984[3];
      MUX_rg_mie_write_1__SEL_2: rg_mie_D_IN = rg_mpie;
      MUX_rg_mcause_write_1__SEL_2: rg_mie_D_IN = 1'd0;
      default: rg_mie_D_IN = 1'bx /* unspecified value */ ;
    endcase
  end
  assign rg_mie_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h300 ||
	     EN_mav_upd_on_ret && mav_upd_on_ret_prv != 2'd1 ||
	     EN_mav_upd_on_trap && mav_upd_on_trap_prv != 2'd1 ;

  // register rg_minterrupt
  assign rg_minterrupt_D_IN =
	     MUX_rg_mcause_write_1__SEL_1 ?
	       v__h3984[63] :
	       mav_upd_on_trap_c[5] ;
  assign rg_minterrupt_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h342 ||
	     EN_mav_upd_on_trap && mav_upd_on_trap_prv != 2'd1 ;

  // register rg_mode
  assign rg_mode_D_IN = v__h3984[1:0] ;
  assign rg_mode_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h305 &&
	     IF_csr_op_res_whas__81_THEN_csr_op_res_wget__8_ETC___d378 ;

  // register rg_mpie
  always@(MUX_rg_mie_write_1__SEL_1 or
	  v__h3984 or
	  MUX_rg_mie_write_1__SEL_2 or MUX_rg_mcause_write_1__SEL_2 or rg_mie)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_mie_write_1__SEL_1: rg_mpie_D_IN = v__h3984[7];
      MUX_rg_mie_write_1__SEL_2: rg_mpie_D_IN = 1'd1;
      MUX_rg_mcause_write_1__SEL_2: rg_mpie_D_IN = rg_mie;
      default: rg_mpie_D_IN = 1'bx /* unspecified value */ ;
    endcase
  end
  assign rg_mpie_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h300 ||
	     EN_mav_upd_on_ret && mav_upd_on_ret_prv != 2'd1 ||
	     EN_mav_upd_on_trap && mav_upd_on_trap_prv != 2'd1 ;

  // register rg_mpp
  always@(MUX_rg_mpp_write_1__SEL_1 or
	  v__h3984 or
	  MUX_rg_mie_write_1__SEL_2 or
	  MUX_rg_mcause_write_1__SEL_2 or
	  IF_wr_prv_wget__28_EQ_3_29_OR_wr_prv_wget__28__ETC___d432)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_mpp_write_1__SEL_1: rg_mpp_D_IN = v__h3984[12:11];
      MUX_rg_mie_write_1__SEL_2: rg_mpp_D_IN = 2'd0;
      MUX_rg_mcause_write_1__SEL_2:
	  rg_mpp_D_IN =
	      IF_wr_prv_wget__28_EQ_3_29_OR_wr_prv_wget__28__ETC___d432;
      default: rg_mpp_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign rg_mpp_EN =
	     EN_ma_core_req &&
	     ma_core_req_req_BITS_79_TO_68_EQ_0x300_4_AND_I_ETC___d334 ||
	     EN_mav_upd_on_ret && mav_upd_on_ret_prv != 2'd1 ||
	     EN_mav_upd_on_trap && mav_upd_on_trap_prv != 2'd1 ;

  // register rg_mprv
  assign rg_mprv_D_IN = v__h3984[17] ;
  assign rg_mprv_EN = MUX_rg_mie_write_1__SEL_1 ;

  // register rg_msie
  assign rg_msie_D_IN = x__h5828[3] ;
  assign rg_msie_EN = EN_ma_core_req && ma_core_req_req[79:68] == 12'h304 ;

  // register rg_msip
  assign rg_msip_D_IN = ma_clint_msip_intrpt ;
  assign rg_msip_EN = EN_ma_clint_msip ;

  // register rg_mtie
  assign rg_mtie_D_IN = x__h5828[7] ;
  assign rg_mtie_EN = EN_ma_core_req && ma_core_req_req[79:68] == 12'h304 ;

  // register rg_mtip
  assign rg_mtip_D_IN = ma_clint_mtip_intrpt ;
  assign rg_mtip_EN = EN_ma_clint_mtip ;

  // register rg_mtval
  assign rg_mtval_D_IN =
	     MUX_rg_mtval_write_1__SEL_1 ? v__h3984 : mav_upd_on_trap_tval ;
  assign rg_mtval_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h343 ||
	     EN_mav_upd_on_trap && mav_upd_on_trap_prv != 2'd1 ;

  // register rg_mtvec
  assign rg_mtvec_D_IN = { 32'd0, v__h3984[31:2] } ;
  assign rg_mtvec_EN = EN_ma_core_req && ma_core_req_req[79:68] == 12'h305 ;

  // register rg_mxr
  assign rg_mxr_D_IN = v__h3984[19] ;
  assign rg_mxr_EN = MUX_rg_sie_write_1__SEL_3 ;

  // register rg_resp_to_core
  assign rg_resp_to_core_D_IN =
	     EN_ma_core_req ? rg_resp_to_core_1_wget : 65'd0 ;
  assign rg_resp_to_core_EN = 1'd1 ;

  // register rg_satp_asid
  assign rg_satp_asid_D_IN = v__h3984[52:44] ;
  assign rg_satp_asid_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h180 &&
	     (v__h3984[63:60] == 4'd0 || v__h3984[63:60] == 4'd8) ;

  // register rg_satp_mode
  assign rg_satp_mode_D_IN = v__h3984[63:60] ;
  assign rg_satp_mode_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h180 &&
	     (v__h3984[63:60] == 4'd0 || v__h3984[63:60] == 4'd8) ;

  // register rg_satp_ppn
  assign rg_satp_ppn_D_IN = v__h3984[43:0] ;
  assign rg_satp_ppn_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h180 &&
	     (v__h3984[63:60] == 4'd0 || v__h3984[63:60] == 4'd8) ;

  // register rg_scause
  assign rg_scause_D_IN =
	     MUX_rg_scause_write_1__SEL_1 ?
	       v__h3984[4:0] :
	       mav_upd_on_trap_c[4:0] ;
  assign rg_scause_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h142 ||
	     EN_mav_upd_on_trap && mav_upd_on_trap_prv == 2'd1 ;

  // register rg_seie
  assign rg_seie_D_IN =
	     (ma_core_req_req[79:68] == 12'h304) ? x__h5828[9] : x__h8223[9] ;
  assign rg_seie_EN =
	     EN_ma_core_req &&
	     (ma_core_req_req[79:68] == 12'h304 ||
	      ma_core_req_req[79:68] == 12'h104) ;

  // register rg_sepc
  assign rg_sepc_D_IN =
	     MUX_rg_sepc_write_1__SEL_1 ?
	       v__h3984[63:1] :
	       mav_upd_on_trap_pc[63:1] ;
  assign rg_sepc_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h141 ||
	     EN_mav_upd_on_trap && mav_upd_on_trap_prv == 2'd1 ;

  // register rg_sie
  always@(MUX_rg_sie_write_1__SEL_1 or
	  rg_spie or
	  MUX_rg_scause_write_1__SEL_2 or
	  MUX_rg_sie_write_1__SEL_3 or v__h3984)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_sie_write_1__SEL_1: rg_sie_D_IN = rg_spie;
      MUX_rg_scause_write_1__SEL_2: rg_sie_D_IN = 1'd0;
      MUX_rg_sie_write_1__SEL_3: rg_sie_D_IN = v__h3984[1];
      default: rg_sie_D_IN = 1'bx /* unspecified value */ ;
    endcase
  end
  assign rg_sie_EN =
	     EN_mav_upd_on_ret && mav_upd_on_ret_prv == 2'd1 ||
	     EN_mav_upd_on_trap && mav_upd_on_trap_prv == 2'd1 ||
	     EN_ma_core_req &&
	     (ma_core_req_req[79:68] == 12'h300 ||
	      ma_core_req_req[79:68] == 12'h100) ;

  // register rg_sinterrupt
  assign rg_sinterrupt_D_IN =
	     MUX_rg_scause_write_1__SEL_1 ?
	       v__h3984[63] :
	       mav_upd_on_trap_c[5] ;
  assign rg_sinterrupt_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h142 ||
	     EN_mav_upd_on_trap && mav_upd_on_trap_prv == 2'd1 ;

  // register rg_smode
  assign rg_smode_D_IN = v__h3984[1:0] ;
  assign rg_smode_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h105 &&
	     IF_csr_op_res_whas__81_THEN_csr_op_res_wget__8_ETC___d378 ;

  // register rg_soft_seip
  assign rg_soft_seip_D_IN = x__h5828[9] ;
  assign rg_soft_seip_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h344 ;

  // register rg_spie
  always@(MUX_rg_sie_write_1__SEL_1 or
	  MUX_rg_scause_write_1__SEL_2 or
	  rg_sie or MUX_rg_sie_write_1__SEL_3 or v__h3984)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_sie_write_1__SEL_1: rg_spie_D_IN = 1'd1;
      MUX_rg_scause_write_1__SEL_2: rg_spie_D_IN = rg_sie;
      MUX_rg_sie_write_1__SEL_3: rg_spie_D_IN = v__h3984[5];
      default: rg_spie_D_IN = 1'bx /* unspecified value */ ;
    endcase
  end
  assign rg_spie_EN =
	     EN_mav_upd_on_ret && mav_upd_on_ret_prv == 2'd1 ||
	     EN_mav_upd_on_trap && mav_upd_on_trap_prv == 2'd1 ||
	     EN_ma_core_req &&
	     (ma_core_req_req[79:68] == 12'h300 ||
	      ma_core_req_req[79:68] == 12'h100) ;

  // register rg_spp
  always@(MUX_rg_sie_write_1__SEL_1 or
	  MUX_rg_scause_write_1__SEL_2 or
	  IF_wr_prv_wget__28_EQ_3_29_OR_wr_prv_wget__28__ETC___d432 or
	  MUX_rg_sie_write_1__SEL_3 or v__h3984)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_sie_write_1__SEL_1: rg_spp_D_IN = 1'd0;
      MUX_rg_scause_write_1__SEL_2:
	  rg_spp_D_IN =
	      IF_wr_prv_wget__28_EQ_3_29_OR_wr_prv_wget__28__ETC___d432[0];
      MUX_rg_sie_write_1__SEL_3: rg_spp_D_IN = v__h3984[8];
      default: rg_spp_D_IN = 1'bx /* unspecified value */ ;
    endcase
  end
  assign rg_spp_EN =
	     EN_mav_upd_on_ret && mav_upd_on_ret_prv == 2'd1 ||
	     EN_mav_upd_on_trap && mav_upd_on_trap_prv == 2'd1 ||
	     EN_ma_core_req &&
	     (ma_core_req_req[79:68] == 12'h300 ||
	      ma_core_req_req[79:68] == 12'h100) ;

  // register rg_ssie
  assign rg_ssie_D_IN =
	     (ma_core_req_req[79:68] == 12'h304) ? x__h5828[1] : x__h8223[1] ;
  assign rg_ssie_EN =
	     EN_ma_core_req &&
	     (ma_core_req_req[79:68] == 12'h304 ||
	      ma_core_req_req[79:68] == 12'h104) ;

  // register rg_ssip
  assign rg_ssip_D_IN =
	     (ma_core_req_req[79:68] == 12'h344) ? x__h5828[1] : x__h8223[1] ;
  assign rg_ssip_EN =
	     EN_ma_core_req &&
	     (ma_core_req_req[79:68] == 12'h344 ||
	      ma_core_req_req[79:68] == 12'h144) ;

  // register rg_stie
  assign rg_stie_D_IN =
	     (ma_core_req_req[79:68] == 12'h304) ? x__h5828[5] : x__h8223[5] ;
  assign rg_stie_EN =
	     EN_ma_core_req &&
	     (ma_core_req_req[79:68] == 12'h304 ||
	      ma_core_req_req[79:68] == 12'h104) ;

  // register rg_stip
  assign rg_stip_D_IN = x__h5828[5] ;
  assign rg_stip_EN = EN_ma_core_req && ma_core_req_req[79:68] == 12'h344 ;

  // register rg_stval
  assign rg_stval_D_IN =
	     MUX_rg_stval_write_1__SEL_1 ? v__h3984 : mav_upd_on_trap_tval ;
  assign rg_stval_EN =
	     EN_ma_core_req && ma_core_req_req[79:68] == 12'h143 ||
	     EN_mav_upd_on_trap && mav_upd_on_trap_prv == 2'd1 ;

  // register rg_stvec
  assign rg_stvec_D_IN = v__h3984[63:2] ;
  assign rg_stvec_EN = EN_ma_core_req && ma_core_req_req[79:68] == 12'h105 ;

  // register rg_sum
  assign rg_sum_D_IN = v__h3984[18] ;
  assign rg_sum_EN = MUX_rg_sie_write_1__SEL_3 ;

  // register rg_tsr
  assign rg_tsr_D_IN = v__h3984[22] ;
  assign rg_tsr_EN = MUX_rg_sie_write_1__SEL_3 ;

  // register rg_tvm
  assign rg_tvm_D_IN = v__h3984[20] ;
  assign rg_tvm_EN = MUX_rg_sie_write_1__SEL_3 ;

  // register rg_tw
  assign rg_tw_D_IN = v__h3984[21] ;
  assign rg_tw_EN = MUX_rg_sie_write_1__SEL_3 ;

  // submodule ff_fwd_request
  assign ff_fwd_request_D_IN = ma_core_req_req ;
  assign ff_fwd_request_ENQ =
	     EN_ma_core_req && ma_core_req_req[79:68] != 12'h001 &&
	     ma_core_req_req[79:68] != 12'h002 &&
	     ma_core_req_req[79:68] != 12'h003 &&
	     ma_core_req_req[79:68] != 12'h300 &&
	     ma_core_req_req[79:68] != 12'h302 &&
	     ma_core_req_req[79:68] != 12'h303 &&
	     ma_core_req_req[79:68] != 12'h304 &&
	     ma_core_req_req[79:68] != 12'h344 &&
	     ma_core_req_req[79:68] != 12'h305 &&
	     ma_core_req_req[79:68] != 12'h341 &&
	     ma_core_req_req[79:68] != 12'h342 &&
	     ma_core_req_req[79:68] != 12'h343 &&
	     ma_core_req_req[79:68] != 12'h100 &&
	     ma_core_req_req[79:68] != 12'h104 &&
	     ma_core_req_req[79:68] != 12'h144 &&
	     ma_core_req_req[79:68] != 12'h105 &&
	     ma_core_req_req[79:68] != 12'h141 &&
	     ma_core_req_req[79:68] != 12'h142 &&
	     ma_core_req_req[79:68] != 12'h143 &&
	     ma_core_req_req[79:68] != 12'h180 ;
  assign ff_fwd_request_DEQ = EN_mav_fwd_req ;
  assign ff_fwd_request_CLR = 1'b0 ;

  // remaining internal signals
  module_fn_csr_op instance_fn_csr_op_0(.fn_csr_op_writedata(csr_op_arg_wget[129:66]),
					.fn_csr_op_readdata(csr_op_arg_wget[65:2]),
					.fn_csr_op_op(csr_op_arg_wget[1:0]),
					.fn_csr_op(x__h9582));
  assign IF_csr_op_res_whas__81_THEN_csr_op_res_wget__8_ETC___d378 =
	     v__h3984[1:0] < 2'd2 ;
  assign IF_mav_upd_on_ret_prv_EQ_1_43_THEN_IF_wr_csr_m_ETC___d452 =
	     (mav_upd_on_ret_prv == 2'd1) ?
	       (ma_csr_misa_m[2] ? rg_sepc : result__h10433) :
	       (ma_csr_misa_m[2] ? rg_mepc : result__h10521) ;
  assign IF_rg_mode_14_EQ_1_64_AND_mav_upd_on_trap_c_BI_ETC___d467 =
	     (rg_mode == 2'd1 && mav_upd_on_trap_c[5]) ?
	       rg_mtvec + y__h10887 :
	       rg_mtvec ;
  assign IF_rg_smode_64_EQ_1_59_AND_mav_upd_on_trap_c_B_ETC___d463 =
	     (rg_smode == 2'd1 && mav_upd_on_trap_c[5]) ?
	       rg_stvec + y__h10887 :
	       rg_stvec ;
  assign NOT_ma_update_fflags_flags_OR_rg_fflags_25_EQ__ETC___d427 =
	     x__h9994 != rg_fflags ;
  assign _0_CONCAT_NOT_IF_wr_counter_interrupts_whas__3__ETC___d476 =
	     { 47'd0,
	       r__h3212 & rg_mcounterie,
	       4'd0,
	       rg_meip & rg_meie,
	       1'd0,
	       rg_seip__read__h3233 & rg_seie,
	       1'd0,
	       rg_mtip & rg_mtie } ;
  assign _0_CONCAT_NOT_IF_wr_counter_interrupts_whas__3__ETC___d480 =
	     { _0_CONCAT_NOT_IF_wr_counter_interrupts_whas__3__ETC___d476,
	       1'd0,
	       rg_stip & rg_stie,
	       1'd0,
	       rg_msip & rg_msie } ;
  assign lv_mi_mask__h2319 =
	     { 54'h3FFFFFFFFFFFFF,
	       ma_csr_misa_m[18],
	       ma_csr_misa_m[13],
	       2'b11,
	       ma_csr_misa_m[18],
	       ma_csr_misa_m[13],
	       2'b11,
	       ma_csr_misa_m[18],
	       ma_csr_misa_m[13] } ;
  assign lv_si_mask__h2320 =
	     { 54'h3FFFFFFFFFFFFC,
	       ma_csr_misa_m[18],
	       ma_csr_misa_m[13],
	       2'b0,
	       ma_csr_misa_m[18],
	       ma_csr_misa_m[13],
	       2'b0,
	       ma_csr_misa_m[18],
	       ma_csr_misa_m[13] } ;
  assign ma_core_req_req_BITS_79_TO_68_EQ_0x1_AND_NOT_r_ETC___d305 =
	     ma_core_req_req[79:68] == 12'h001 &&
	     rg_fflags != v__h3984[4:0] ||
	     ma_core_req_req[79:68] != 12'h001 &&
	     ma_core_req_req_BITS_79_TO_68_EQ_0x2_AND_NOT_r_ETC___d303 ;
  assign ma_core_req_req_BITS_79_TO_68_EQ_0x2_AND_NOT_r_ETC___d303 =
	     ma_core_req_req[79:68] == 12'h002 && rg_frm != v__h3984[2:0] ||
	     ma_core_req_req[79:68] == 12'h003 && x__h2769 != v__h3984[7:0] ||
	     ma_core_req_req[79:68] == 12'h300 ||
	     ma_core_req_req[79:68] == 12'h100 ;
  assign ma_core_req_req_BITS_79_TO_68_EQ_0x300_4_AND_I_ETC___d334 =
	     ma_core_req_req[79:68] == 12'h300 &&
	     (v__h3984[12:11] == 2'd3 ||
	      ma_csr_misa_m[18] && v__h3984[12:11] == 2'd1 ||
	      ma_csr_misa_m[20] && v__h3984[12:11] == 2'd0) ;
  assign r1__read__h2970 = { r1__read__h2972, rg_ssie } ;
  assign r1__read__h2972 = { r1__read__h2974, 1'b0 } ;
  assign r1__read__h2974 = { r1__read__h2976, rg_msie } ;
  assign r1__read__h2976 = { r1__read__h2978, 1'd0 } ;
  assign r1__read__h2978 = { r1__read__h2980, rg_stie } ;
  assign r1__read__h2980 = { r1__read__h2982, 1'b0 } ;
  assign r1__read__h2982 = { r1__read__h2984, rg_mtie } ;
  assign r1__read__h2984 = { r1__read__h2986, 1'd0 } ;
  assign r1__read__h2986 = { r1__read__h2988, rg_seie } ;
  assign r1__read__h2988 = { r1__read__h2990, 1'b0 } ;
  assign r1__read__h2990 = { r1__read__h2992, rg_meie } ;
  assign r1__read__h2992 = { r1__read__h2994, 4'd0 } ;
  assign r1__read__h2994 = { 47'd3, rg_mcounterie } ;
  assign r1__read__h3176 = { r1__read__h3178, rg_ssip } ;
  assign r1__read__h3178 = { r1__read__h3180, 1'b0 } ;
  assign r1__read__h3180 = { r1__read__h3182, rg_msip } ;
  assign r1__read__h3182 = { r1__read__h3184, 1'd0 } ;
  assign r1__read__h3184 = { r1__read__h3186, rg_stip } ;
  assign r1__read__h3186 = { r1__read__h3188, 1'd0 } ;
  assign r1__read__h3188 = { r1__read__h3190, rg_mtip } ;
  assign r1__read__h3190 = { r1__read__h3192, 1'd0 } ;
  assign r1__read__h3192 = { r1__read__h3194, rg_seip__read__h3233 } ;
  assign r1__read__h3194 = { r1__read__h3196, 1'b0 } ;
  assign r1__read__h3196 = { r1__read__h3198, rg_meip } ;
  assign r1__read__h3198 = { r1__read__h3200, 4'd0 } ;
  assign r1__read__h3200 = { 47'd0, r__h3212 } ;
  assign r1__read__h3454 = { r1__read__h3456, rg_ssie } ;
  assign r1__read__h3456 = { r1__read__h3458, 2'd0 } ;
  assign r1__read__h3458 = { r1__read__h3460, 1'd0 } ;
  assign r1__read__h3460 = { r1__read__h3462, rg_stie } ;
  assign r1__read__h3462 = { r1__read__h3464, 2'd0 } ;
  assign r1__read__h3464 = { r1__read__h3466, 1'd0 } ;
  assign r1__read__h3466 = { 54'd0, rg_seie } ;
  assign r1__read__h3538 = { r1__read__h3540, rg_ssip } ;
  assign r1__read__h3540 = { r1__read__h3542, 2'd0 } ;
  assign r1__read__h3542 = { r1__read__h3544, 1'd0 } ;
  assign r1__read__h3544 = { r1__read__h3546, rg_stip } ;
  assign r1__read__h3546 = { r1__read__h3548, 2'd0 } ;
  assign r1__read__h3548 = { r1__read__h3550, 1'd0 } ;
  assign r1__read__h3550 = { 54'd0, rg_seip__read__h3233 } ;
  assign r__h2794 = rg_fs == 2'b11 ;
  assign r__h3212 = x__h3215 != 29'd0 ;
  assign readdata__h2506 = rg_csr_mie__read__h2968 & lv_mi_mask__h2319 ;
  assign readdata__h2516 = rg_csr_mip__read__h3174 & lv_mi_mask__h2319 ;
  assign readdata__h2571 = rg_csr_sie__read__h3452 & lv_si_mask__h2320 ;
  assign readdata__h2581 = rg_csr_sip__read__h3536 & lv_si_mask__h2320 ;
  assign result__h10433 = { rg_sepc[62:1], 1'd0 } ;
  assign result__h10521 = { rg_mepc[62:1], 1'd0 } ;
  assign rg_csr_mie__read__h2968 = { r1__read__h2970, 1'd0 } ;
  assign rg_csr_mip__read__h3174 = { r1__read__h3176, 1'd0 } ;
  assign rg_csr_sie__read__h3452 = { r1__read__h3454, 1'd0 } ;
  assign rg_csr_sip__read__h3536 = { r1__read__h3538, 1'd0 } ;
  assign rg_seip__read__h3233 = rg_soft_seip | rg_ext_seip ;
  assign x__h2769 = { rg_frm, rg_fflags } ;
  assign x__h3215 =
	     EN_ma_counter_interrupts ? ma_counter_interrupts_i : 29'd0 ;
  assign x__h3797 = { 59'd0, rg_fflags } ;
  assign x__h4018 = { 61'd0, rg_frm } ;
  assign x__h4211 = { 56'd0, x__h2769 } ;
  assign x__h5305 =
	     { 48'd0,
	       rg_medeleg_u1,
	       1'd0,
	       rg_medeleg_m2,
	       2'd0,
	       rg_medeleg_l10 } ;
  assign x__h5567 = { 52'd0, rg_mideleg } ;
  assign x__h5828 = v__h3984 & lv_mi_mask__h2319 ;
  assign x__h8223 = v__h3984 & lv_si_mask__h2320 ;
  assign x__h9994 = ma_update_fflags_flags | rg_fflags ;
  assign x_data__h2791 = mv_csr_mstatus ;
  assign x_data__h3275 = { rg_mtvec, rg_mode } ;
  assign x_data__h3302 = { rg_mepc, 1'b0 } ;
  assign x_data__h3328 = { rg_minterrupt, 58'd0, rg_mcause } ;
  assign x_data__h3379 =
	     { r__h2794,
	       43'd8192,
	       rg_mxr,
	       rg_sum,
	       3'd0,
	       rg_fs,
	       4'd0,
	       rg_spp,
	       2'd0,
	       rg_spie,
	       3'd0,
	       rg_sie,
	       1'd0 } ;
  assign x_data__h3583 = { rg_stvec, rg_smode } ;
  assign x_data__h3610 = { rg_sepc, 1'b0 } ;
  assign x_data__h3636 = { rg_sinterrupt, 58'd0, rg_scause } ;
  assign x_data__h3687 = { rg_satp_mode, 7'd0, rg_satp_asid, rg_satp_ppn } ;
  assign y__h10887 = { 57'd0, mav_upd_on_trap_c[4:0] } ;
  always@(ma_core_req_req or
	  x_data__h3687 or
	  x__h3797 or
	  x__h4018 or
	  x__h4211 or
	  x_data__h3379 or
	  readdata__h2571 or
	  x_data__h3583 or
	  x_data__h3610 or
	  x_data__h3636 or
	  rg_stval or
	  readdata__h2581 or
	  x_data__h2791 or
	  x__h5305 or
	  x__h5567 or
	  readdata__h2506 or
	  x_data__h3275 or
	  x_data__h3302 or x_data__h3328 or rg_mtval or readdata__h2516)
  begin
    case (ma_core_req_req[79:68])
      12'h001:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x1_THEN_0_ETC___d249 =
	      x__h3797;
      12'h002:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x1_THEN_0_ETC___d249 =
	      x__h4018;
      12'h003:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x1_THEN_0_ETC___d249 =
	      x__h4211;
      12'h100:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x1_THEN_0_ETC___d249 =
	      x_data__h3379;
      12'h104:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x1_THEN_0_ETC___d249 =
	      readdata__h2571;
      12'h105:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x1_THEN_0_ETC___d249 =
	      x_data__h3583;
      12'h141:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x1_THEN_0_ETC___d249 =
	      x_data__h3610;
      12'h142:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x1_THEN_0_ETC___d249 =
	      x_data__h3636;
      12'h143:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x1_THEN_0_ETC___d249 =
	      rg_stval;
      12'h144:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x1_THEN_0_ETC___d249 =
	      readdata__h2581;
      12'h300:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x1_THEN_0_ETC___d249 =
	      x_data__h2791;
      12'h302:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x1_THEN_0_ETC___d249 =
	      x__h5305;
      12'h303:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x1_THEN_0_ETC___d249 =
	      x__h5567;
      12'h304:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x1_THEN_0_ETC___d249 =
	      readdata__h2506;
      12'h305:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x1_THEN_0_ETC___d249 =
	      x_data__h3275;
      12'h341:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x1_THEN_0_ETC___d249 =
	      x_data__h3302;
      12'h342:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x1_THEN_0_ETC___d249 =
	      x_data__h3328;
      12'h343:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x1_THEN_0_ETC___d249 =
	      rg_mtval;
      12'h344:
	  IF_ma_core_req_req_BITS_79_TO_68_EQ_0x1_THEN_0_ETC___d249 =
	      readdata__h2516;
      default: IF_ma_core_req_req_BITS_79_TO_68_EQ_0x1_THEN_0_ETC___d249 =
		   x_data__h3687;
    endcase
  end
  always@(ma_core_req_req or x__h9582)
  begin
    case (ma_core_req_req[79:68])
      12'h001,
      12'h002,
      12'h003,
      12'h100,
      12'h104,
      12'h105,
      12'h141,
      12'h142,
      12'h144,
      12'h300,
      12'h302,
      12'h303,
      12'h304,
      12'h305,
      12'h341,
      12'h342,
      12'h343,
      12'h344:
	  v__h3984 = x__h9582;
      default: v__h3984 = x__h9582;
    endcase
  end
  always@(wr_prv_wget)
  begin
    case (wr_prv_wget)
      2'd1, 2'd3:
	  IF_wr_prv_wget__28_EQ_3_29_OR_wr_prv_wget__28__ETC___d432 =
	      wr_prv_wget;
      default: IF_wr_prv_wget__28_EQ_3_29_OR_wr_prv_wget__28__ETC___d432 =
		   2'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_ext_seip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_fflags <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_frm <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_fs <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_mcause <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_mcounterie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_medeleg_l10 <= `BSV_ASSIGNMENT_DELAY 10'd0;
	rg_medeleg_m2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_medeleg_u1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_meie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_meip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_mepc <= `BSV_ASSIGNMENT_DELAY 63'd0;
	rg_mideleg <= `BSV_ASSIGNMENT_DELAY 12'd0;
	rg_mie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_minterrupt <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_mode <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_mpie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_mpp <= `BSV_ASSIGNMENT_DELAY 2'b0;
	rg_mprv <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_msie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_msip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_mtie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_mtip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_mtval <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mtvec <= `BSV_ASSIGNMENT_DELAY 62'd0;
	rg_mxr <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_resp_to_core <= `BSV_ASSIGNMENT_DELAY 65'd0;
	rg_satp_asid <= `BSV_ASSIGNMENT_DELAY 9'd0;
	rg_satp_mode <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_satp_ppn <= `BSV_ASSIGNMENT_DELAY 44'd0;
	rg_scause <= `BSV_ASSIGNMENT_DELAY 5'd0;
	rg_seie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_sepc <= `BSV_ASSIGNMENT_DELAY 63'd0;
	rg_sie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_sinterrupt <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_smode <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_soft_seip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_spie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_spp <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_ssie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_ssip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_stie <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_stip <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_stval <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_stvec <= `BSV_ASSIGNMENT_DELAY 62'd0;
	rg_sum <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_tsr <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_tvm <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_tw <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_ext_seip_EN)
	  rg_ext_seip <= `BSV_ASSIGNMENT_DELAY rg_ext_seip_D_IN;
	if (rg_fflags_EN) rg_fflags <= `BSV_ASSIGNMENT_DELAY rg_fflags_D_IN;
	if (rg_frm_EN) rg_frm <= `BSV_ASSIGNMENT_DELAY rg_frm_D_IN;
	if (rg_fs_EN) rg_fs <= `BSV_ASSIGNMENT_DELAY rg_fs_D_IN;
	if (rg_mcause_EN) rg_mcause <= `BSV_ASSIGNMENT_DELAY rg_mcause_D_IN;
	if (rg_mcounterie_EN)
	  rg_mcounterie <= `BSV_ASSIGNMENT_DELAY rg_mcounterie_D_IN;
	if (rg_medeleg_l10_EN)
	  rg_medeleg_l10 <= `BSV_ASSIGNMENT_DELAY rg_medeleg_l10_D_IN;
	if (rg_medeleg_m2_EN)
	  rg_medeleg_m2 <= `BSV_ASSIGNMENT_DELAY rg_medeleg_m2_D_IN;
	if (rg_medeleg_u1_EN)
	  rg_medeleg_u1 <= `BSV_ASSIGNMENT_DELAY rg_medeleg_u1_D_IN;
	if (rg_meie_EN) rg_meie <= `BSV_ASSIGNMENT_DELAY rg_meie_D_IN;
	if (rg_meip_EN) rg_meip <= `BSV_ASSIGNMENT_DELAY rg_meip_D_IN;
	if (rg_mepc_EN) rg_mepc <= `BSV_ASSIGNMENT_DELAY rg_mepc_D_IN;
	if (rg_mideleg_EN)
	  rg_mideleg <= `BSV_ASSIGNMENT_DELAY rg_mideleg_D_IN;
	if (rg_mie_EN) rg_mie <= `BSV_ASSIGNMENT_DELAY rg_mie_D_IN;
	if (rg_minterrupt_EN)
	  rg_minterrupt <= `BSV_ASSIGNMENT_DELAY rg_minterrupt_D_IN;
	if (rg_mode_EN) rg_mode <= `BSV_ASSIGNMENT_DELAY rg_mode_D_IN;
	if (rg_mpie_EN) rg_mpie <= `BSV_ASSIGNMENT_DELAY rg_mpie_D_IN;
	if (rg_mpp_EN) rg_mpp <= `BSV_ASSIGNMENT_DELAY rg_mpp_D_IN;
	if (rg_mprv_EN) rg_mprv <= `BSV_ASSIGNMENT_DELAY rg_mprv_D_IN;
	if (rg_msie_EN) rg_msie <= `BSV_ASSIGNMENT_DELAY rg_msie_D_IN;
	if (rg_msip_EN) rg_msip <= `BSV_ASSIGNMENT_DELAY rg_msip_D_IN;
	if (rg_mtie_EN) rg_mtie <= `BSV_ASSIGNMENT_DELAY rg_mtie_D_IN;
	if (rg_mtip_EN) rg_mtip <= `BSV_ASSIGNMENT_DELAY rg_mtip_D_IN;
	if (rg_mtval_EN) rg_mtval <= `BSV_ASSIGNMENT_DELAY rg_mtval_D_IN;
	if (rg_mtvec_EN) rg_mtvec <= `BSV_ASSIGNMENT_DELAY rg_mtvec_D_IN;
	if (rg_mxr_EN) rg_mxr <= `BSV_ASSIGNMENT_DELAY rg_mxr_D_IN;
	if (rg_resp_to_core_EN)
	  rg_resp_to_core <= `BSV_ASSIGNMENT_DELAY rg_resp_to_core_D_IN;
	if (rg_satp_asid_EN)
	  rg_satp_asid <= `BSV_ASSIGNMENT_DELAY rg_satp_asid_D_IN;
	if (rg_satp_mode_EN)
	  rg_satp_mode <= `BSV_ASSIGNMENT_DELAY rg_satp_mode_D_IN;
	if (rg_satp_ppn_EN)
	  rg_satp_ppn <= `BSV_ASSIGNMENT_DELAY rg_satp_ppn_D_IN;
	if (rg_scause_EN) rg_scause <= `BSV_ASSIGNMENT_DELAY rg_scause_D_IN;
	if (rg_seie_EN) rg_seie <= `BSV_ASSIGNMENT_DELAY rg_seie_D_IN;
	if (rg_sepc_EN) rg_sepc <= `BSV_ASSIGNMENT_DELAY rg_sepc_D_IN;
	if (rg_sie_EN) rg_sie <= `BSV_ASSIGNMENT_DELAY rg_sie_D_IN;
	if (rg_sinterrupt_EN)
	  rg_sinterrupt <= `BSV_ASSIGNMENT_DELAY rg_sinterrupt_D_IN;
	if (rg_smode_EN) rg_smode <= `BSV_ASSIGNMENT_DELAY rg_smode_D_IN;
	if (rg_soft_seip_EN)
	  rg_soft_seip <= `BSV_ASSIGNMENT_DELAY rg_soft_seip_D_IN;
	if (rg_spie_EN) rg_spie <= `BSV_ASSIGNMENT_DELAY rg_spie_D_IN;
	if (rg_spp_EN) rg_spp <= `BSV_ASSIGNMENT_DELAY rg_spp_D_IN;
	if (rg_ssie_EN) rg_ssie <= `BSV_ASSIGNMENT_DELAY rg_ssie_D_IN;
	if (rg_ssip_EN) rg_ssip <= `BSV_ASSIGNMENT_DELAY rg_ssip_D_IN;
	if (rg_stie_EN) rg_stie <= `BSV_ASSIGNMENT_DELAY rg_stie_D_IN;
	if (rg_stip_EN) rg_stip <= `BSV_ASSIGNMENT_DELAY rg_stip_D_IN;
	if (rg_stval_EN) rg_stval <= `BSV_ASSIGNMENT_DELAY rg_stval_D_IN;
	if (rg_stvec_EN) rg_stvec <= `BSV_ASSIGNMENT_DELAY rg_stvec_D_IN;
	if (rg_sum_EN) rg_sum <= `BSV_ASSIGNMENT_DELAY rg_sum_D_IN;
	if (rg_tsr_EN) rg_tsr <= `BSV_ASSIGNMENT_DELAY rg_tsr_D_IN;
	if (rg_tvm_EN) rg_tvm <= `BSV_ASSIGNMENT_DELAY rg_tvm_D_IN;
	if (rg_tw_EN) rg_tw <= `BSV_ASSIGNMENT_DELAY rg_tw_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_ext_seip = 1'h0;
    rg_fflags = 5'h0A;
    rg_frm = 3'h2;
    rg_fs = 2'h2;
    rg_mcause = 5'h0A;
    rg_mcounterie = 1'h0;
    rg_medeleg_l10 = 10'h2AA;
    rg_medeleg_m2 = 2'h2;
    rg_medeleg_u1 = 1'h0;
    rg_meie = 1'h0;
    rg_meip = 1'h0;
    rg_mepc = 63'h2AAAAAAAAAAAAAAA;
    rg_mideleg = 12'hAAA;
    rg_mie = 1'h0;
    rg_minterrupt = 1'h0;
    rg_mode = 2'h2;
    rg_mpie = 1'h0;
    rg_mpp = 2'h2;
    rg_mprv = 1'h0;
    rg_msie = 1'h0;
    rg_msip = 1'h0;
    rg_mtie = 1'h0;
    rg_mtip = 1'h0;
    rg_mtval = 64'hAAAAAAAAAAAAAAAA;
    rg_mtvec = 62'h2AAAAAAAAAAAAAAA;
    rg_mxr = 1'h0;
    rg_resp_to_core = 65'h0AAAAAAAAAAAAAAAA;
    rg_satp_asid = 9'h0AA;
    rg_satp_mode = 4'hA;
    rg_satp_ppn = 44'hAAAAAAAAAAA;
    rg_scause = 5'h0A;
    rg_seie = 1'h0;
    rg_sepc = 63'h2AAAAAAAAAAAAAAA;
    rg_sie = 1'h0;
    rg_sinterrupt = 1'h0;
    rg_smode = 2'h2;
    rg_soft_seip = 1'h0;
    rg_spie = 1'h0;
    rg_spp = 1'h0;
    rg_ssie = 1'h0;
    rg_ssip = 1'h0;
    rg_stie = 1'h0;
    rg_stip = 1'h0;
    rg_stval = 64'hAAAAAAAAAAAAAAAA;
    rg_stvec = 62'h2AAAAAAAAAAAAAAA;
    rg_sum = 1'h0;
    rg_tsr = 1'h0;
    rg_tvm = 1'h0;
    rg_tw = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mk_csr_grp1

