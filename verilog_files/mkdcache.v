//
// Generated by Bluespec Compiler (build 8d454e4)
//
// On Fri Oct  9 13:15:25 IST 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_put_core_req_put           O     1
// get_core_resp_get              O    72
// RDY_get_core_resp_get          O     1
// get_read_mem_req_get           O    44 reg
// RDY_get_read_mem_req_get       O     1 reg
// RDY_put_read_mem_resp_put      O     1
// mv_write_mem_req               O   556 reg
// RDY_mv_write_mem_req           O     1 reg
// RDY_ma_write_mem_req_deq       O     1 reg
// RDY_put_write_mem_resp_put     O     1
// RDY_ma_curr_priv               O     1 const
// get_ptw_resp_get               O    72
// RDY_get_ptw_resp_get           O     1
// RDY_put_pa_from_tlb_put        O     1
// get_hold_req_get               O   141
// RDY_get_hold_req_get           O     1
// mv_perf_counters               O    13
// RDY_mv_perf_counters           O     1 const
// RDY_ma_cache_enable            O     1 const
// mv_storebuffer_empty           O     1
// RDY_mv_storebuffer_empty       O     1 const
// RDY_ma_perform_store           O     1
// mv_cacheable_store             O     1
// RDY_mv_cacheable_store         O     1 const
// mv_cache_available             O     1
// RDY_mv_cache_available         O     1 const
// mv_commit_store_ready          O     1
// RDY_mv_commit_store_ready      O     1 const
// pmp_cfg_0                      I     8
// pmp_cfg_1                      I     8
// pmp_cfg_2                      I     8
// pmp_cfg_3                      I     8
// pmp_addr_0                     I    29
// pmp_addr_1                     I    29
// pmp_addr_2                     I    29
// pmp_addr_3                     I    29
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_core_req_put               I   141
// put_read_mem_resp_put          I    66
// put_write_mem_resp_put         I     1
// ma_curr_priv_c                 I     2
// put_pa_from_tlb_put            I    40
// ma_cache_enable_c              I     1
// ma_perform_store_currepoch     I     1
// EN_put_core_req_put            I     1
// EN_put_read_mem_resp_put       I     1
// EN_ma_write_mem_req_deq        I     1
// EN_put_write_mem_resp_put      I     1
// EN_ma_curr_priv                I     1
// EN_put_pa_from_tlb_put         I     1
// EN_ma_cache_enable             I     1
// EN_ma_perform_store            I     1
// EN_get_core_resp_get           I     1
// EN_get_read_mem_req_get        I     1
// EN_get_ptw_resp_get            I     1
// EN_get_hold_req_get            I     1
//
// Combinational paths from inputs to outputs:
//   (put_core_req_put,
//    put_read_mem_resp_put,
//    ma_curr_priv_c,
//    put_pa_from_tlb_put,
//    ma_cache_enable_c,
//    EN_put_core_req_put,
//    EN_put_read_mem_resp_put,
//    EN_ma_curr_priv,
//    EN_put_pa_from_tlb_put,
//    EN_ma_cache_enable,
//    EN_ma_perform_store,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> mv_perf_counters
//   (put_read_mem_resp_put,
//    ma_curr_priv_c,
//    put_pa_from_tlb_put,
//    ma_cache_enable_c,
//    EN_put_read_mem_resp_put,
//    EN_ma_curr_priv,
//    EN_put_pa_from_tlb_put,
//    EN_ma_cache_enable,
//    EN_ma_perform_store,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> RDY_get_core_resp_get
//   (put_read_mem_resp_put,
//    ma_curr_priv_c,
//    put_pa_from_tlb_put,
//    ma_cache_enable_c,
//    EN_put_read_mem_resp_put,
//    EN_ma_curr_priv,
//    EN_put_pa_from_tlb_put,
//    EN_ma_cache_enable,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> RDY_get_ptw_resp_get
//   (put_read_mem_resp_put,
//    ma_curr_priv_c,
//    put_pa_from_tlb_put,
//    ma_cache_enable_c,
//    EN_put_read_mem_resp_put,
//    EN_ma_curr_priv,
//    EN_put_pa_from_tlb_put,
//    EN_ma_cache_enable,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> RDY_get_hold_req_get
//   (put_read_mem_resp_put,
//    ma_curr_priv_c,
//    put_pa_from_tlb_put,
//    ma_cache_enable_c,
//    EN_put_read_mem_resp_put,
//    EN_ma_curr_priv,
//    EN_put_pa_from_tlb_put,
//    EN_ma_cache_enable,
//    EN_ma_perform_store,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> get_core_resp_get
//   (put_read_mem_resp_put,
//    ma_curr_priv_c,
//    put_pa_from_tlb_put,
//    ma_cache_enable_c,
//    EN_put_read_mem_resp_put,
//    EN_ma_curr_priv,
//    EN_put_pa_from_tlb_put,
//    EN_ma_cache_enable,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> get_ptw_resp_get
//   (put_read_mem_resp_put,
//    ma_curr_priv_c,
//    put_pa_from_tlb_put,
//    ma_cache_enable_c,
//    EN_put_read_mem_resp_put,
//    EN_ma_curr_priv,
//    EN_put_pa_from_tlb_put,
//    EN_ma_cache_enable,
//    pmp_cfg_0,
//    pmp_cfg_1,
//    pmp_cfg_2,
//    pmp_cfg_3,
//    pmp_addr_0,
//    pmp_addr_1,
//    pmp_addr_2,
//    pmp_addr_3) -> get_hold_req_get
//   EN_ma_cache_enable -> RDY_put_core_req_put
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkdcache(pmp_cfg_0,
		pmp_cfg_1,
		pmp_cfg_2,
		pmp_cfg_3,
		pmp_addr_0,
		pmp_addr_1,
		pmp_addr_2,
		pmp_addr_3,
		CLK,
		RST_N,

		put_core_req_put,
		EN_put_core_req_put,
		RDY_put_core_req_put,

		EN_get_core_resp_get,
		get_core_resp_get,
		RDY_get_core_resp_get,

		EN_get_read_mem_req_get,
		get_read_mem_req_get,
		RDY_get_read_mem_req_get,

		put_read_mem_resp_put,
		EN_put_read_mem_resp_put,
		RDY_put_read_mem_resp_put,

		mv_write_mem_req,
		RDY_mv_write_mem_req,

		EN_ma_write_mem_req_deq,
		RDY_ma_write_mem_req_deq,

		put_write_mem_resp_put,
		EN_put_write_mem_resp_put,
		RDY_put_write_mem_resp_put,

		ma_curr_priv_c,
		EN_ma_curr_priv,
		RDY_ma_curr_priv,

		EN_get_ptw_resp_get,
		get_ptw_resp_get,
		RDY_get_ptw_resp_get,

		put_pa_from_tlb_put,
		EN_put_pa_from_tlb_put,
		RDY_put_pa_from_tlb_put,

		EN_get_hold_req_get,
		get_hold_req_get,
		RDY_get_hold_req_get,

		mv_perf_counters,
		RDY_mv_perf_counters,

		ma_cache_enable_c,
		EN_ma_cache_enable,
		RDY_ma_cache_enable,

		mv_storebuffer_empty,
		RDY_mv_storebuffer_empty,

		ma_perform_store_currepoch,
		EN_ma_perform_store,
		RDY_ma_perform_store,

		mv_cacheable_store,
		RDY_mv_cacheable_store,

		mv_cache_available,
		RDY_mv_cache_available,

		mv_commit_store_ready,
		RDY_mv_commit_store_ready);
  parameter [31 : 0] id = 32'b0;
  input  [7 : 0] pmp_cfg_0;
  input  [7 : 0] pmp_cfg_1;
  input  [7 : 0] pmp_cfg_2;
  input  [7 : 0] pmp_cfg_3;
  input  [28 : 0] pmp_addr_0;
  input  [28 : 0] pmp_addr_1;
  input  [28 : 0] pmp_addr_2;
  input  [28 : 0] pmp_addr_3;
  input  CLK;
  input  RST_N;

  // action method put_core_req_put
  input  [140 : 0] put_core_req_put;
  input  EN_put_core_req_put;
  output RDY_put_core_req_put;

  // actionvalue method get_core_resp_get
  input  EN_get_core_resp_get;
  output [71 : 0] get_core_resp_get;
  output RDY_get_core_resp_get;

  // actionvalue method get_read_mem_req_get
  input  EN_get_read_mem_req_get;
  output [43 : 0] get_read_mem_req_get;
  output RDY_get_read_mem_req_get;

  // action method put_read_mem_resp_put
  input  [65 : 0] put_read_mem_resp_put;
  input  EN_put_read_mem_resp_put;
  output RDY_put_read_mem_resp_put;

  // value method mv_write_mem_req
  output [555 : 0] mv_write_mem_req;
  output RDY_mv_write_mem_req;

  // action method ma_write_mem_req_deq
  input  EN_ma_write_mem_req_deq;
  output RDY_ma_write_mem_req_deq;

  // action method put_write_mem_resp_put
  input  put_write_mem_resp_put;
  input  EN_put_write_mem_resp_put;
  output RDY_put_write_mem_resp_put;

  // action method ma_curr_priv
  input  [1 : 0] ma_curr_priv_c;
  input  EN_ma_curr_priv;
  output RDY_ma_curr_priv;

  // actionvalue method get_ptw_resp_get
  input  EN_get_ptw_resp_get;
  output [71 : 0] get_ptw_resp_get;
  output RDY_get_ptw_resp_get;

  // action method put_pa_from_tlb_put
  input  [39 : 0] put_pa_from_tlb_put;
  input  EN_put_pa_from_tlb_put;
  output RDY_put_pa_from_tlb_put;

  // actionvalue method get_hold_req_get
  input  EN_get_hold_req_get;
  output [140 : 0] get_hold_req_get;
  output RDY_get_hold_req_get;

  // value method mv_perf_counters
  output [12 : 0] mv_perf_counters;
  output RDY_mv_perf_counters;

  // action method ma_cache_enable
  input  ma_cache_enable_c;
  input  EN_ma_cache_enable;
  output RDY_ma_cache_enable;

  // value method mv_storebuffer_empty
  output mv_storebuffer_empty;
  output RDY_mv_storebuffer_empty;

  // action method ma_perform_store
  input  ma_perform_store_currepoch;
  input  EN_ma_perform_store;
  output RDY_ma_perform_store;

  // value method mv_cacheable_store
  output mv_cacheable_store;
  output RDY_mv_cacheable_store;

  // value method mv_cache_available
  output mv_cache_available;
  output RDY_mv_cache_available;

  // value method mv_commit_store_ready
  output mv_commit_store_ready;
  output RDY_mv_commit_store_ready;

  // signals for module outputs
  wire [555 : 0] mv_write_mem_req;
  wire [140 : 0] get_hold_req_get;
  wire [71 : 0] get_core_resp_get, get_ptw_resp_get;
  wire [43 : 0] get_read_mem_req_get;
  wire [12 : 0] mv_perf_counters;
  wire RDY_get_core_resp_get,
       RDY_get_hold_req_get,
       RDY_get_ptw_resp_get,
       RDY_get_read_mem_req_get,
       RDY_ma_cache_enable,
       RDY_ma_curr_priv,
       RDY_ma_perform_store,
       RDY_ma_write_mem_req_deq,
       RDY_mv_cache_available,
       RDY_mv_cacheable_store,
       RDY_mv_commit_store_ready,
       RDY_mv_perf_counters,
       RDY_mv_storebuffer_empty,
       RDY_mv_write_mem_req,
       RDY_put_core_req_put,
       RDY_put_pa_from_tlb_put,
       RDY_put_read_mem_resp_put,
       RDY_put_write_mem_resp_put,
       mv_cache_available,
       mv_cacheable_store,
       mv_commit_store_ready,
       mv_storebuffer_empty;

  // inlined wires
  wire [141 : 0] ff_hold_request_rv_port0__write_1,
		 ff_hold_request_rv_port1__read,
		 ff_hold_request_rv_port1__write_1,
		 ff_hold_request_rv_port2__read;
  wire [72 : 0] ff_core_response_rv_port0__write_1,
		ff_core_response_rv_port1__read,
		ff_core_response_rv_port1__write_1,
		ff_core_response_rv_port2__read,
		ff_ptw_response_rv_port1__read,
		ff_ptw_response_rv_port2__read;
  wire [71 : 0] wr_fb_response_wget,
		wr_nc_response_wget,
		wr_ram_response_wget;
  wire [66 : 0] ff_read_mem_response_rv_port0__write_1,
		ff_read_mem_response_rv_port1__read,
		ff_read_mem_response_rv_port1__write_1,
		ff_read_mem_response_rv_port2__read;
  wire [40 : 0] ff_from_tlb_rv_port0__write_1,
		ff_from_tlb_rv_port1__read,
		ff_from_tlb_rv_port1__write_1,
		ff_from_tlb_rv_port2__read;
  wire [1 : 0] ff_write_mem_response_rv_port0__write_1,
	       ff_write_mem_response_rv_port1__read,
	       ff_write_mem_response_rv_port1__write_1,
	       ff_write_mem_response_rv_port2__read,
	       wr_fb_state_wget,
	       wr_ram_state_wget;
  wire _mav_allocate_line_RL_rl_send_memory_request_EN_m_fillbuffer_wget,
       _wset_RL_rl_send_memory_request_EN_wr_total_io_reads_wget,
       ff_core_response_rv_EN_port0__write,
       ff_hold_request_rv_EN_port0__write,
       ff_ptw_response_rv_EN_port0__write,
       ff_read_mem_response_rv_EN_port1__write,
       rg_release_readphase_1_whas,
       wr_fault_whas,
       wr_ram_state_whas,
       wr_total_atomic_access_whas,
       wr_total_atomic_fb_hits_whas,
       wr_total_fb_releases_whas,
       wr_total_io_reads_whas,
       wr_total_read_access_whas,
       wr_total_read_fb_hits_whas,
       wr_total_write_access_whas,
       wr_total_write_fb_hits_whas;

  // register ff_core_response_rv
  reg [72 : 0] ff_core_response_rv;
  wire [72 : 0] ff_core_response_rv_D_IN;
  wire ff_core_response_rv_EN;

  // register ff_from_tlb_rv
  reg [40 : 0] ff_from_tlb_rv;
  wire [40 : 0] ff_from_tlb_rv_D_IN;
  wire ff_from_tlb_rv_EN;

  // register ff_hold_request_rv
  reg [141 : 0] ff_hold_request_rv;
  wire [141 : 0] ff_hold_request_rv_D_IN;
  wire ff_hold_request_rv_EN;

  // register ff_ptw_response_rv
  reg [72 : 0] ff_ptw_response_rv;
  wire [72 : 0] ff_ptw_response_rv_D_IN;
  wire ff_ptw_response_rv_EN;

  // register ff_read_mem_response_rv
  reg [66 : 0] ff_read_mem_response_rv;
  wire [66 : 0] ff_read_mem_response_rv_D_IN;
  wire ff_read_mem_response_rv_EN;

  // register ff_write_mem_response_rv
  reg [1 : 0] ff_write_mem_response_rv;
  wire [1 : 0] ff_write_mem_response_rv_D_IN;
  wire ff_write_mem_response_rv_EN;

  // register replacement_v_count_0
  reg [1 : 0] replacement_v_count_0;
  wire [1 : 0] replacement_v_count_0_D_IN;
  wire replacement_v_count_0_EN;

  // register replacement_v_count_1
  reg [1 : 0] replacement_v_count_1;
  wire [1 : 0] replacement_v_count_1_D_IN;
  wire replacement_v_count_1_EN;

  // register replacement_v_count_10
  reg [1 : 0] replacement_v_count_10;
  wire [1 : 0] replacement_v_count_10_D_IN;
  wire replacement_v_count_10_EN;

  // register replacement_v_count_11
  reg [1 : 0] replacement_v_count_11;
  wire [1 : 0] replacement_v_count_11_D_IN;
  wire replacement_v_count_11_EN;

  // register replacement_v_count_12
  reg [1 : 0] replacement_v_count_12;
  wire [1 : 0] replacement_v_count_12_D_IN;
  wire replacement_v_count_12_EN;

  // register replacement_v_count_13
  reg [1 : 0] replacement_v_count_13;
  wire [1 : 0] replacement_v_count_13_D_IN;
  wire replacement_v_count_13_EN;

  // register replacement_v_count_14
  reg [1 : 0] replacement_v_count_14;
  wire [1 : 0] replacement_v_count_14_D_IN;
  wire replacement_v_count_14_EN;

  // register replacement_v_count_15
  reg [1 : 0] replacement_v_count_15;
  wire [1 : 0] replacement_v_count_15_D_IN;
  wire replacement_v_count_15_EN;

  // register replacement_v_count_16
  reg [1 : 0] replacement_v_count_16;
  wire [1 : 0] replacement_v_count_16_D_IN;
  wire replacement_v_count_16_EN;

  // register replacement_v_count_17
  reg [1 : 0] replacement_v_count_17;
  wire [1 : 0] replacement_v_count_17_D_IN;
  wire replacement_v_count_17_EN;

  // register replacement_v_count_18
  reg [1 : 0] replacement_v_count_18;
  wire [1 : 0] replacement_v_count_18_D_IN;
  wire replacement_v_count_18_EN;

  // register replacement_v_count_19
  reg [1 : 0] replacement_v_count_19;
  wire [1 : 0] replacement_v_count_19_D_IN;
  wire replacement_v_count_19_EN;

  // register replacement_v_count_2
  reg [1 : 0] replacement_v_count_2;
  wire [1 : 0] replacement_v_count_2_D_IN;
  wire replacement_v_count_2_EN;

  // register replacement_v_count_20
  reg [1 : 0] replacement_v_count_20;
  wire [1 : 0] replacement_v_count_20_D_IN;
  wire replacement_v_count_20_EN;

  // register replacement_v_count_21
  reg [1 : 0] replacement_v_count_21;
  wire [1 : 0] replacement_v_count_21_D_IN;
  wire replacement_v_count_21_EN;

  // register replacement_v_count_22
  reg [1 : 0] replacement_v_count_22;
  wire [1 : 0] replacement_v_count_22_D_IN;
  wire replacement_v_count_22_EN;

  // register replacement_v_count_23
  reg [1 : 0] replacement_v_count_23;
  wire [1 : 0] replacement_v_count_23_D_IN;
  wire replacement_v_count_23_EN;

  // register replacement_v_count_24
  reg [1 : 0] replacement_v_count_24;
  wire [1 : 0] replacement_v_count_24_D_IN;
  wire replacement_v_count_24_EN;

  // register replacement_v_count_25
  reg [1 : 0] replacement_v_count_25;
  wire [1 : 0] replacement_v_count_25_D_IN;
  wire replacement_v_count_25_EN;

  // register replacement_v_count_26
  reg [1 : 0] replacement_v_count_26;
  wire [1 : 0] replacement_v_count_26_D_IN;
  wire replacement_v_count_26_EN;

  // register replacement_v_count_27
  reg [1 : 0] replacement_v_count_27;
  wire [1 : 0] replacement_v_count_27_D_IN;
  wire replacement_v_count_27_EN;

  // register replacement_v_count_28
  reg [1 : 0] replacement_v_count_28;
  wire [1 : 0] replacement_v_count_28_D_IN;
  wire replacement_v_count_28_EN;

  // register replacement_v_count_29
  reg [1 : 0] replacement_v_count_29;
  wire [1 : 0] replacement_v_count_29_D_IN;
  wire replacement_v_count_29_EN;

  // register replacement_v_count_3
  reg [1 : 0] replacement_v_count_3;
  wire [1 : 0] replacement_v_count_3_D_IN;
  wire replacement_v_count_3_EN;

  // register replacement_v_count_30
  reg [1 : 0] replacement_v_count_30;
  wire [1 : 0] replacement_v_count_30_D_IN;
  wire replacement_v_count_30_EN;

  // register replacement_v_count_31
  reg [1 : 0] replacement_v_count_31;
  wire [1 : 0] replacement_v_count_31_D_IN;
  wire replacement_v_count_31_EN;

  // register replacement_v_count_32
  reg [1 : 0] replacement_v_count_32;
  wire [1 : 0] replacement_v_count_32_D_IN;
  wire replacement_v_count_32_EN;

  // register replacement_v_count_33
  reg [1 : 0] replacement_v_count_33;
  wire [1 : 0] replacement_v_count_33_D_IN;
  wire replacement_v_count_33_EN;

  // register replacement_v_count_34
  reg [1 : 0] replacement_v_count_34;
  wire [1 : 0] replacement_v_count_34_D_IN;
  wire replacement_v_count_34_EN;

  // register replacement_v_count_35
  reg [1 : 0] replacement_v_count_35;
  wire [1 : 0] replacement_v_count_35_D_IN;
  wire replacement_v_count_35_EN;

  // register replacement_v_count_36
  reg [1 : 0] replacement_v_count_36;
  wire [1 : 0] replacement_v_count_36_D_IN;
  wire replacement_v_count_36_EN;

  // register replacement_v_count_37
  reg [1 : 0] replacement_v_count_37;
  wire [1 : 0] replacement_v_count_37_D_IN;
  wire replacement_v_count_37_EN;

  // register replacement_v_count_38
  reg [1 : 0] replacement_v_count_38;
  wire [1 : 0] replacement_v_count_38_D_IN;
  wire replacement_v_count_38_EN;

  // register replacement_v_count_39
  reg [1 : 0] replacement_v_count_39;
  wire [1 : 0] replacement_v_count_39_D_IN;
  wire replacement_v_count_39_EN;

  // register replacement_v_count_4
  reg [1 : 0] replacement_v_count_4;
  wire [1 : 0] replacement_v_count_4_D_IN;
  wire replacement_v_count_4_EN;

  // register replacement_v_count_40
  reg [1 : 0] replacement_v_count_40;
  wire [1 : 0] replacement_v_count_40_D_IN;
  wire replacement_v_count_40_EN;

  // register replacement_v_count_41
  reg [1 : 0] replacement_v_count_41;
  wire [1 : 0] replacement_v_count_41_D_IN;
  wire replacement_v_count_41_EN;

  // register replacement_v_count_42
  reg [1 : 0] replacement_v_count_42;
  wire [1 : 0] replacement_v_count_42_D_IN;
  wire replacement_v_count_42_EN;

  // register replacement_v_count_43
  reg [1 : 0] replacement_v_count_43;
  wire [1 : 0] replacement_v_count_43_D_IN;
  wire replacement_v_count_43_EN;

  // register replacement_v_count_44
  reg [1 : 0] replacement_v_count_44;
  wire [1 : 0] replacement_v_count_44_D_IN;
  wire replacement_v_count_44_EN;

  // register replacement_v_count_45
  reg [1 : 0] replacement_v_count_45;
  wire [1 : 0] replacement_v_count_45_D_IN;
  wire replacement_v_count_45_EN;

  // register replacement_v_count_46
  reg [1 : 0] replacement_v_count_46;
  wire [1 : 0] replacement_v_count_46_D_IN;
  wire replacement_v_count_46_EN;

  // register replacement_v_count_47
  reg [1 : 0] replacement_v_count_47;
  wire [1 : 0] replacement_v_count_47_D_IN;
  wire replacement_v_count_47_EN;

  // register replacement_v_count_48
  reg [1 : 0] replacement_v_count_48;
  wire [1 : 0] replacement_v_count_48_D_IN;
  wire replacement_v_count_48_EN;

  // register replacement_v_count_49
  reg [1 : 0] replacement_v_count_49;
  wire [1 : 0] replacement_v_count_49_D_IN;
  wire replacement_v_count_49_EN;

  // register replacement_v_count_5
  reg [1 : 0] replacement_v_count_5;
  wire [1 : 0] replacement_v_count_5_D_IN;
  wire replacement_v_count_5_EN;

  // register replacement_v_count_50
  reg [1 : 0] replacement_v_count_50;
  wire [1 : 0] replacement_v_count_50_D_IN;
  wire replacement_v_count_50_EN;

  // register replacement_v_count_51
  reg [1 : 0] replacement_v_count_51;
  wire [1 : 0] replacement_v_count_51_D_IN;
  wire replacement_v_count_51_EN;

  // register replacement_v_count_52
  reg [1 : 0] replacement_v_count_52;
  wire [1 : 0] replacement_v_count_52_D_IN;
  wire replacement_v_count_52_EN;

  // register replacement_v_count_53
  reg [1 : 0] replacement_v_count_53;
  wire [1 : 0] replacement_v_count_53_D_IN;
  wire replacement_v_count_53_EN;

  // register replacement_v_count_54
  reg [1 : 0] replacement_v_count_54;
  wire [1 : 0] replacement_v_count_54_D_IN;
  wire replacement_v_count_54_EN;

  // register replacement_v_count_55
  reg [1 : 0] replacement_v_count_55;
  wire [1 : 0] replacement_v_count_55_D_IN;
  wire replacement_v_count_55_EN;

  // register replacement_v_count_56
  reg [1 : 0] replacement_v_count_56;
  wire [1 : 0] replacement_v_count_56_D_IN;
  wire replacement_v_count_56_EN;

  // register replacement_v_count_57
  reg [1 : 0] replacement_v_count_57;
  wire [1 : 0] replacement_v_count_57_D_IN;
  wire replacement_v_count_57_EN;

  // register replacement_v_count_58
  reg [1 : 0] replacement_v_count_58;
  wire [1 : 0] replacement_v_count_58_D_IN;
  wire replacement_v_count_58_EN;

  // register replacement_v_count_59
  reg [1 : 0] replacement_v_count_59;
  wire [1 : 0] replacement_v_count_59_D_IN;
  wire replacement_v_count_59_EN;

  // register replacement_v_count_6
  reg [1 : 0] replacement_v_count_6;
  wire [1 : 0] replacement_v_count_6_D_IN;
  wire replacement_v_count_6_EN;

  // register replacement_v_count_60
  reg [1 : 0] replacement_v_count_60;
  wire [1 : 0] replacement_v_count_60_D_IN;
  wire replacement_v_count_60_EN;

  // register replacement_v_count_61
  reg [1 : 0] replacement_v_count_61;
  wire [1 : 0] replacement_v_count_61_D_IN;
  wire replacement_v_count_61_EN;

  // register replacement_v_count_62
  reg [1 : 0] replacement_v_count_62;
  wire [1 : 0] replacement_v_count_62_D_IN;
  wire replacement_v_count_62_EN;

  // register replacement_v_count_63
  reg [1 : 0] replacement_v_count_63;
  wire [1 : 0] replacement_v_count_63_D_IN;
  wire replacement_v_count_63_EN;

  // register replacement_v_count_7
  reg [1 : 0] replacement_v_count_7;
  wire [1 : 0] replacement_v_count_7_D_IN;
  wire replacement_v_count_7_EN;

  // register replacement_v_count_8
  reg [1 : 0] replacement_v_count_8;
  wire [1 : 0] replacement_v_count_8_D_IN;
  wire replacement_v_count_8_EN;

  // register replacement_v_count_9
  reg [1 : 0] replacement_v_count_9;
  wire [1 : 0] replacement_v_count_9_D_IN;
  wire replacement_v_count_9_EN;

  // register rg_fence_pending
  reg rg_fence_pending;
  wire rg_fence_pending_D_IN, rg_fence_pending_EN;

  // register rg_fence_set
  reg [5 : 0] rg_fence_set;
  wire [5 : 0] rg_fence_set_D_IN;
  wire rg_fence_set_EN;

  // register rg_fence_stall
  reg rg_fence_stall;
  wire rg_fence_stall_D_IN, rg_fence_stall_EN;

  // register rg_fence_way
  reg [1 : 0] rg_fence_way;
  wire [1 : 0] rg_fence_way_D_IN;
  wire rg_fence_way_EN;

  // register rg_globaldirty
  reg rg_globaldirty;
  wire rg_globaldirty_D_IN, rg_globaldirty_EN;

  // register rg_handling_miss
  reg rg_handling_miss;
  wire rg_handling_miss_D_IN, rg_handling_miss_EN;

  // register rg_performing_replay
  reg rg_performing_replay;
  wire rg_performing_replay_D_IN, rg_performing_replay_EN;

  // register rg_polling_mode
  reg rg_polling_mode;
  wire rg_polling_mode_D_IN, rg_polling_mode_EN;

  // register rg_recent_req
  reg [5 : 0] rg_recent_req;
  wire [5 : 0] rg_recent_req_D_IN;
  wire rg_recent_req_EN;

  // register rg_release_readphase
  reg rg_release_readphase;
  wire rg_release_readphase_D_IN, rg_release_readphase_EN;

  // register rg_wEpoch
  reg rg_wEpoch;
  wire rg_wEpoch_D_IN, rg_wEpoch_EN;

  // register v_reg_dirty_0
  reg [3 : 0] v_reg_dirty_0;
  reg [3 : 0] v_reg_dirty_0_D_IN;
  wire v_reg_dirty_0_EN;

  // register v_reg_dirty_1
  reg [3 : 0] v_reg_dirty_1;
  reg [3 : 0] v_reg_dirty_1_D_IN;
  wire v_reg_dirty_1_EN;

  // register v_reg_dirty_10
  reg [3 : 0] v_reg_dirty_10;
  reg [3 : 0] v_reg_dirty_10_D_IN;
  wire v_reg_dirty_10_EN;

  // register v_reg_dirty_11
  reg [3 : 0] v_reg_dirty_11;
  reg [3 : 0] v_reg_dirty_11_D_IN;
  wire v_reg_dirty_11_EN;

  // register v_reg_dirty_12
  reg [3 : 0] v_reg_dirty_12;
  reg [3 : 0] v_reg_dirty_12_D_IN;
  wire v_reg_dirty_12_EN;

  // register v_reg_dirty_13
  reg [3 : 0] v_reg_dirty_13;
  reg [3 : 0] v_reg_dirty_13_D_IN;
  wire v_reg_dirty_13_EN;

  // register v_reg_dirty_14
  reg [3 : 0] v_reg_dirty_14;
  reg [3 : 0] v_reg_dirty_14_D_IN;
  wire v_reg_dirty_14_EN;

  // register v_reg_dirty_15
  reg [3 : 0] v_reg_dirty_15;
  reg [3 : 0] v_reg_dirty_15_D_IN;
  wire v_reg_dirty_15_EN;

  // register v_reg_dirty_16
  reg [3 : 0] v_reg_dirty_16;
  reg [3 : 0] v_reg_dirty_16_D_IN;
  wire v_reg_dirty_16_EN;

  // register v_reg_dirty_17
  reg [3 : 0] v_reg_dirty_17;
  reg [3 : 0] v_reg_dirty_17_D_IN;
  wire v_reg_dirty_17_EN;

  // register v_reg_dirty_18
  reg [3 : 0] v_reg_dirty_18;
  reg [3 : 0] v_reg_dirty_18_D_IN;
  wire v_reg_dirty_18_EN;

  // register v_reg_dirty_19
  reg [3 : 0] v_reg_dirty_19;
  reg [3 : 0] v_reg_dirty_19_D_IN;
  wire v_reg_dirty_19_EN;

  // register v_reg_dirty_2
  reg [3 : 0] v_reg_dirty_2;
  reg [3 : 0] v_reg_dirty_2_D_IN;
  wire v_reg_dirty_2_EN;

  // register v_reg_dirty_20
  reg [3 : 0] v_reg_dirty_20;
  reg [3 : 0] v_reg_dirty_20_D_IN;
  wire v_reg_dirty_20_EN;

  // register v_reg_dirty_21
  reg [3 : 0] v_reg_dirty_21;
  reg [3 : 0] v_reg_dirty_21_D_IN;
  wire v_reg_dirty_21_EN;

  // register v_reg_dirty_22
  reg [3 : 0] v_reg_dirty_22;
  reg [3 : 0] v_reg_dirty_22_D_IN;
  wire v_reg_dirty_22_EN;

  // register v_reg_dirty_23
  reg [3 : 0] v_reg_dirty_23;
  reg [3 : 0] v_reg_dirty_23_D_IN;
  wire v_reg_dirty_23_EN;

  // register v_reg_dirty_24
  reg [3 : 0] v_reg_dirty_24;
  reg [3 : 0] v_reg_dirty_24_D_IN;
  wire v_reg_dirty_24_EN;

  // register v_reg_dirty_25
  reg [3 : 0] v_reg_dirty_25;
  reg [3 : 0] v_reg_dirty_25_D_IN;
  wire v_reg_dirty_25_EN;

  // register v_reg_dirty_26
  reg [3 : 0] v_reg_dirty_26;
  reg [3 : 0] v_reg_dirty_26_D_IN;
  wire v_reg_dirty_26_EN;

  // register v_reg_dirty_27
  reg [3 : 0] v_reg_dirty_27;
  reg [3 : 0] v_reg_dirty_27_D_IN;
  wire v_reg_dirty_27_EN;

  // register v_reg_dirty_28
  reg [3 : 0] v_reg_dirty_28;
  reg [3 : 0] v_reg_dirty_28_D_IN;
  wire v_reg_dirty_28_EN;

  // register v_reg_dirty_29
  reg [3 : 0] v_reg_dirty_29;
  reg [3 : 0] v_reg_dirty_29_D_IN;
  wire v_reg_dirty_29_EN;

  // register v_reg_dirty_3
  reg [3 : 0] v_reg_dirty_3;
  reg [3 : 0] v_reg_dirty_3_D_IN;
  wire v_reg_dirty_3_EN;

  // register v_reg_dirty_30
  reg [3 : 0] v_reg_dirty_30;
  reg [3 : 0] v_reg_dirty_30_D_IN;
  wire v_reg_dirty_30_EN;

  // register v_reg_dirty_31
  reg [3 : 0] v_reg_dirty_31;
  reg [3 : 0] v_reg_dirty_31_D_IN;
  wire v_reg_dirty_31_EN;

  // register v_reg_dirty_32
  reg [3 : 0] v_reg_dirty_32;
  reg [3 : 0] v_reg_dirty_32_D_IN;
  wire v_reg_dirty_32_EN;

  // register v_reg_dirty_33
  reg [3 : 0] v_reg_dirty_33;
  reg [3 : 0] v_reg_dirty_33_D_IN;
  wire v_reg_dirty_33_EN;

  // register v_reg_dirty_34
  reg [3 : 0] v_reg_dirty_34;
  reg [3 : 0] v_reg_dirty_34_D_IN;
  wire v_reg_dirty_34_EN;

  // register v_reg_dirty_35
  reg [3 : 0] v_reg_dirty_35;
  reg [3 : 0] v_reg_dirty_35_D_IN;
  wire v_reg_dirty_35_EN;

  // register v_reg_dirty_36
  reg [3 : 0] v_reg_dirty_36;
  reg [3 : 0] v_reg_dirty_36_D_IN;
  wire v_reg_dirty_36_EN;

  // register v_reg_dirty_37
  reg [3 : 0] v_reg_dirty_37;
  reg [3 : 0] v_reg_dirty_37_D_IN;
  wire v_reg_dirty_37_EN;

  // register v_reg_dirty_38
  reg [3 : 0] v_reg_dirty_38;
  reg [3 : 0] v_reg_dirty_38_D_IN;
  wire v_reg_dirty_38_EN;

  // register v_reg_dirty_39
  reg [3 : 0] v_reg_dirty_39;
  reg [3 : 0] v_reg_dirty_39_D_IN;
  wire v_reg_dirty_39_EN;

  // register v_reg_dirty_4
  reg [3 : 0] v_reg_dirty_4;
  reg [3 : 0] v_reg_dirty_4_D_IN;
  wire v_reg_dirty_4_EN;

  // register v_reg_dirty_40
  reg [3 : 0] v_reg_dirty_40;
  reg [3 : 0] v_reg_dirty_40_D_IN;
  wire v_reg_dirty_40_EN;

  // register v_reg_dirty_41
  reg [3 : 0] v_reg_dirty_41;
  reg [3 : 0] v_reg_dirty_41_D_IN;
  wire v_reg_dirty_41_EN;

  // register v_reg_dirty_42
  reg [3 : 0] v_reg_dirty_42;
  reg [3 : 0] v_reg_dirty_42_D_IN;
  wire v_reg_dirty_42_EN;

  // register v_reg_dirty_43
  reg [3 : 0] v_reg_dirty_43;
  reg [3 : 0] v_reg_dirty_43_D_IN;
  wire v_reg_dirty_43_EN;

  // register v_reg_dirty_44
  reg [3 : 0] v_reg_dirty_44;
  reg [3 : 0] v_reg_dirty_44_D_IN;
  wire v_reg_dirty_44_EN;

  // register v_reg_dirty_45
  reg [3 : 0] v_reg_dirty_45;
  reg [3 : 0] v_reg_dirty_45_D_IN;
  wire v_reg_dirty_45_EN;

  // register v_reg_dirty_46
  reg [3 : 0] v_reg_dirty_46;
  reg [3 : 0] v_reg_dirty_46_D_IN;
  wire v_reg_dirty_46_EN;

  // register v_reg_dirty_47
  reg [3 : 0] v_reg_dirty_47;
  reg [3 : 0] v_reg_dirty_47_D_IN;
  wire v_reg_dirty_47_EN;

  // register v_reg_dirty_48
  reg [3 : 0] v_reg_dirty_48;
  reg [3 : 0] v_reg_dirty_48_D_IN;
  wire v_reg_dirty_48_EN;

  // register v_reg_dirty_49
  reg [3 : 0] v_reg_dirty_49;
  reg [3 : 0] v_reg_dirty_49_D_IN;
  wire v_reg_dirty_49_EN;

  // register v_reg_dirty_5
  reg [3 : 0] v_reg_dirty_5;
  reg [3 : 0] v_reg_dirty_5_D_IN;
  wire v_reg_dirty_5_EN;

  // register v_reg_dirty_50
  reg [3 : 0] v_reg_dirty_50;
  reg [3 : 0] v_reg_dirty_50_D_IN;
  wire v_reg_dirty_50_EN;

  // register v_reg_dirty_51
  reg [3 : 0] v_reg_dirty_51;
  reg [3 : 0] v_reg_dirty_51_D_IN;
  wire v_reg_dirty_51_EN;

  // register v_reg_dirty_52
  reg [3 : 0] v_reg_dirty_52;
  reg [3 : 0] v_reg_dirty_52_D_IN;
  wire v_reg_dirty_52_EN;

  // register v_reg_dirty_53
  reg [3 : 0] v_reg_dirty_53;
  reg [3 : 0] v_reg_dirty_53_D_IN;
  wire v_reg_dirty_53_EN;

  // register v_reg_dirty_54
  reg [3 : 0] v_reg_dirty_54;
  reg [3 : 0] v_reg_dirty_54_D_IN;
  wire v_reg_dirty_54_EN;

  // register v_reg_dirty_55
  reg [3 : 0] v_reg_dirty_55;
  reg [3 : 0] v_reg_dirty_55_D_IN;
  wire v_reg_dirty_55_EN;

  // register v_reg_dirty_56
  reg [3 : 0] v_reg_dirty_56;
  reg [3 : 0] v_reg_dirty_56_D_IN;
  wire v_reg_dirty_56_EN;

  // register v_reg_dirty_57
  reg [3 : 0] v_reg_dirty_57;
  reg [3 : 0] v_reg_dirty_57_D_IN;
  wire v_reg_dirty_57_EN;

  // register v_reg_dirty_58
  reg [3 : 0] v_reg_dirty_58;
  reg [3 : 0] v_reg_dirty_58_D_IN;
  wire v_reg_dirty_58_EN;

  // register v_reg_dirty_59
  reg [3 : 0] v_reg_dirty_59;
  reg [3 : 0] v_reg_dirty_59_D_IN;
  wire v_reg_dirty_59_EN;

  // register v_reg_dirty_6
  reg [3 : 0] v_reg_dirty_6;
  reg [3 : 0] v_reg_dirty_6_D_IN;
  wire v_reg_dirty_6_EN;

  // register v_reg_dirty_60
  reg [3 : 0] v_reg_dirty_60;
  reg [3 : 0] v_reg_dirty_60_D_IN;
  wire v_reg_dirty_60_EN;

  // register v_reg_dirty_61
  reg [3 : 0] v_reg_dirty_61;
  reg [3 : 0] v_reg_dirty_61_D_IN;
  wire v_reg_dirty_61_EN;

  // register v_reg_dirty_62
  reg [3 : 0] v_reg_dirty_62;
  reg [3 : 0] v_reg_dirty_62_D_IN;
  wire v_reg_dirty_62_EN;

  // register v_reg_dirty_63
  reg [3 : 0] v_reg_dirty_63;
  reg [3 : 0] v_reg_dirty_63_D_IN;
  wire v_reg_dirty_63_EN;

  // register v_reg_dirty_7
  reg [3 : 0] v_reg_dirty_7;
  reg [3 : 0] v_reg_dirty_7_D_IN;
  wire v_reg_dirty_7_EN;

  // register v_reg_dirty_8
  reg [3 : 0] v_reg_dirty_8;
  reg [3 : 0] v_reg_dirty_8_D_IN;
  wire v_reg_dirty_8_EN;

  // register v_reg_dirty_9
  reg [3 : 0] v_reg_dirty_9;
  reg [3 : 0] v_reg_dirty_9_D_IN;
  wire v_reg_dirty_9_EN;

  // register v_reg_valid_0
  reg [3 : 0] v_reg_valid_0;
  reg [3 : 0] v_reg_valid_0_D_IN;
  wire v_reg_valid_0_EN;

  // register v_reg_valid_1
  reg [3 : 0] v_reg_valid_1;
  reg [3 : 0] v_reg_valid_1_D_IN;
  wire v_reg_valid_1_EN;

  // register v_reg_valid_10
  reg [3 : 0] v_reg_valid_10;
  reg [3 : 0] v_reg_valid_10_D_IN;
  wire v_reg_valid_10_EN;

  // register v_reg_valid_11
  reg [3 : 0] v_reg_valid_11;
  reg [3 : 0] v_reg_valid_11_D_IN;
  wire v_reg_valid_11_EN;

  // register v_reg_valid_12
  reg [3 : 0] v_reg_valid_12;
  reg [3 : 0] v_reg_valid_12_D_IN;
  wire v_reg_valid_12_EN;

  // register v_reg_valid_13
  reg [3 : 0] v_reg_valid_13;
  reg [3 : 0] v_reg_valid_13_D_IN;
  wire v_reg_valid_13_EN;

  // register v_reg_valid_14
  reg [3 : 0] v_reg_valid_14;
  reg [3 : 0] v_reg_valid_14_D_IN;
  wire v_reg_valid_14_EN;

  // register v_reg_valid_15
  reg [3 : 0] v_reg_valid_15;
  reg [3 : 0] v_reg_valid_15_D_IN;
  wire v_reg_valid_15_EN;

  // register v_reg_valid_16
  reg [3 : 0] v_reg_valid_16;
  reg [3 : 0] v_reg_valid_16_D_IN;
  wire v_reg_valid_16_EN;

  // register v_reg_valid_17
  reg [3 : 0] v_reg_valid_17;
  reg [3 : 0] v_reg_valid_17_D_IN;
  wire v_reg_valid_17_EN;

  // register v_reg_valid_18
  reg [3 : 0] v_reg_valid_18;
  reg [3 : 0] v_reg_valid_18_D_IN;
  wire v_reg_valid_18_EN;

  // register v_reg_valid_19
  reg [3 : 0] v_reg_valid_19;
  reg [3 : 0] v_reg_valid_19_D_IN;
  wire v_reg_valid_19_EN;

  // register v_reg_valid_2
  reg [3 : 0] v_reg_valid_2;
  reg [3 : 0] v_reg_valid_2_D_IN;
  wire v_reg_valid_2_EN;

  // register v_reg_valid_20
  reg [3 : 0] v_reg_valid_20;
  reg [3 : 0] v_reg_valid_20_D_IN;
  wire v_reg_valid_20_EN;

  // register v_reg_valid_21
  reg [3 : 0] v_reg_valid_21;
  reg [3 : 0] v_reg_valid_21_D_IN;
  wire v_reg_valid_21_EN;

  // register v_reg_valid_22
  reg [3 : 0] v_reg_valid_22;
  reg [3 : 0] v_reg_valid_22_D_IN;
  wire v_reg_valid_22_EN;

  // register v_reg_valid_23
  reg [3 : 0] v_reg_valid_23;
  reg [3 : 0] v_reg_valid_23_D_IN;
  wire v_reg_valid_23_EN;

  // register v_reg_valid_24
  reg [3 : 0] v_reg_valid_24;
  reg [3 : 0] v_reg_valid_24_D_IN;
  wire v_reg_valid_24_EN;

  // register v_reg_valid_25
  reg [3 : 0] v_reg_valid_25;
  reg [3 : 0] v_reg_valid_25_D_IN;
  wire v_reg_valid_25_EN;

  // register v_reg_valid_26
  reg [3 : 0] v_reg_valid_26;
  reg [3 : 0] v_reg_valid_26_D_IN;
  wire v_reg_valid_26_EN;

  // register v_reg_valid_27
  reg [3 : 0] v_reg_valid_27;
  reg [3 : 0] v_reg_valid_27_D_IN;
  wire v_reg_valid_27_EN;

  // register v_reg_valid_28
  reg [3 : 0] v_reg_valid_28;
  reg [3 : 0] v_reg_valid_28_D_IN;
  wire v_reg_valid_28_EN;

  // register v_reg_valid_29
  reg [3 : 0] v_reg_valid_29;
  reg [3 : 0] v_reg_valid_29_D_IN;
  wire v_reg_valid_29_EN;

  // register v_reg_valid_3
  reg [3 : 0] v_reg_valid_3;
  reg [3 : 0] v_reg_valid_3_D_IN;
  wire v_reg_valid_3_EN;

  // register v_reg_valid_30
  reg [3 : 0] v_reg_valid_30;
  reg [3 : 0] v_reg_valid_30_D_IN;
  wire v_reg_valid_30_EN;

  // register v_reg_valid_31
  reg [3 : 0] v_reg_valid_31;
  reg [3 : 0] v_reg_valid_31_D_IN;
  wire v_reg_valid_31_EN;

  // register v_reg_valid_32
  reg [3 : 0] v_reg_valid_32;
  reg [3 : 0] v_reg_valid_32_D_IN;
  wire v_reg_valid_32_EN;

  // register v_reg_valid_33
  reg [3 : 0] v_reg_valid_33;
  reg [3 : 0] v_reg_valid_33_D_IN;
  wire v_reg_valid_33_EN;

  // register v_reg_valid_34
  reg [3 : 0] v_reg_valid_34;
  reg [3 : 0] v_reg_valid_34_D_IN;
  wire v_reg_valid_34_EN;

  // register v_reg_valid_35
  reg [3 : 0] v_reg_valid_35;
  reg [3 : 0] v_reg_valid_35_D_IN;
  wire v_reg_valid_35_EN;

  // register v_reg_valid_36
  reg [3 : 0] v_reg_valid_36;
  reg [3 : 0] v_reg_valid_36_D_IN;
  wire v_reg_valid_36_EN;

  // register v_reg_valid_37
  reg [3 : 0] v_reg_valid_37;
  reg [3 : 0] v_reg_valid_37_D_IN;
  wire v_reg_valid_37_EN;

  // register v_reg_valid_38
  reg [3 : 0] v_reg_valid_38;
  reg [3 : 0] v_reg_valid_38_D_IN;
  wire v_reg_valid_38_EN;

  // register v_reg_valid_39
  reg [3 : 0] v_reg_valid_39;
  reg [3 : 0] v_reg_valid_39_D_IN;
  wire v_reg_valid_39_EN;

  // register v_reg_valid_4
  reg [3 : 0] v_reg_valid_4;
  reg [3 : 0] v_reg_valid_4_D_IN;
  wire v_reg_valid_4_EN;

  // register v_reg_valid_40
  reg [3 : 0] v_reg_valid_40;
  reg [3 : 0] v_reg_valid_40_D_IN;
  wire v_reg_valid_40_EN;

  // register v_reg_valid_41
  reg [3 : 0] v_reg_valid_41;
  reg [3 : 0] v_reg_valid_41_D_IN;
  wire v_reg_valid_41_EN;

  // register v_reg_valid_42
  reg [3 : 0] v_reg_valid_42;
  reg [3 : 0] v_reg_valid_42_D_IN;
  wire v_reg_valid_42_EN;

  // register v_reg_valid_43
  reg [3 : 0] v_reg_valid_43;
  reg [3 : 0] v_reg_valid_43_D_IN;
  wire v_reg_valid_43_EN;

  // register v_reg_valid_44
  reg [3 : 0] v_reg_valid_44;
  reg [3 : 0] v_reg_valid_44_D_IN;
  wire v_reg_valid_44_EN;

  // register v_reg_valid_45
  reg [3 : 0] v_reg_valid_45;
  reg [3 : 0] v_reg_valid_45_D_IN;
  wire v_reg_valid_45_EN;

  // register v_reg_valid_46
  reg [3 : 0] v_reg_valid_46;
  reg [3 : 0] v_reg_valid_46_D_IN;
  wire v_reg_valid_46_EN;

  // register v_reg_valid_47
  reg [3 : 0] v_reg_valid_47;
  reg [3 : 0] v_reg_valid_47_D_IN;
  wire v_reg_valid_47_EN;

  // register v_reg_valid_48
  reg [3 : 0] v_reg_valid_48;
  reg [3 : 0] v_reg_valid_48_D_IN;
  wire v_reg_valid_48_EN;

  // register v_reg_valid_49
  reg [3 : 0] v_reg_valid_49;
  reg [3 : 0] v_reg_valid_49_D_IN;
  wire v_reg_valid_49_EN;

  // register v_reg_valid_5
  reg [3 : 0] v_reg_valid_5;
  reg [3 : 0] v_reg_valid_5_D_IN;
  wire v_reg_valid_5_EN;

  // register v_reg_valid_50
  reg [3 : 0] v_reg_valid_50;
  reg [3 : 0] v_reg_valid_50_D_IN;
  wire v_reg_valid_50_EN;

  // register v_reg_valid_51
  reg [3 : 0] v_reg_valid_51;
  reg [3 : 0] v_reg_valid_51_D_IN;
  wire v_reg_valid_51_EN;

  // register v_reg_valid_52
  reg [3 : 0] v_reg_valid_52;
  reg [3 : 0] v_reg_valid_52_D_IN;
  wire v_reg_valid_52_EN;

  // register v_reg_valid_53
  reg [3 : 0] v_reg_valid_53;
  reg [3 : 0] v_reg_valid_53_D_IN;
  wire v_reg_valid_53_EN;

  // register v_reg_valid_54
  reg [3 : 0] v_reg_valid_54;
  reg [3 : 0] v_reg_valid_54_D_IN;
  wire v_reg_valid_54_EN;

  // register v_reg_valid_55
  reg [3 : 0] v_reg_valid_55;
  reg [3 : 0] v_reg_valid_55_D_IN;
  wire v_reg_valid_55_EN;

  // register v_reg_valid_56
  reg [3 : 0] v_reg_valid_56;
  reg [3 : 0] v_reg_valid_56_D_IN;
  wire v_reg_valid_56_EN;

  // register v_reg_valid_57
  reg [3 : 0] v_reg_valid_57;
  reg [3 : 0] v_reg_valid_57_D_IN;
  wire v_reg_valid_57_EN;

  // register v_reg_valid_58
  reg [3 : 0] v_reg_valid_58;
  reg [3 : 0] v_reg_valid_58_D_IN;
  wire v_reg_valid_58_EN;

  // register v_reg_valid_59
  reg [3 : 0] v_reg_valid_59;
  reg [3 : 0] v_reg_valid_59_D_IN;
  wire v_reg_valid_59_EN;

  // register v_reg_valid_6
  reg [3 : 0] v_reg_valid_6;
  reg [3 : 0] v_reg_valid_6_D_IN;
  wire v_reg_valid_6_EN;

  // register v_reg_valid_60
  reg [3 : 0] v_reg_valid_60;
  reg [3 : 0] v_reg_valid_60_D_IN;
  wire v_reg_valid_60_EN;

  // register v_reg_valid_61
  reg [3 : 0] v_reg_valid_61;
  reg [3 : 0] v_reg_valid_61_D_IN;
  wire v_reg_valid_61_EN;

  // register v_reg_valid_62
  reg [3 : 0] v_reg_valid_62;
  reg [3 : 0] v_reg_valid_62_D_IN;
  wire v_reg_valid_62_EN;

  // register v_reg_valid_63
  reg [3 : 0] v_reg_valid_63;
  reg [3 : 0] v_reg_valid_63_D_IN;
  wire v_reg_valid_63_EN;

  // register v_reg_valid_7
  reg [3 : 0] v_reg_valid_7;
  reg [3 : 0] v_reg_valid_7_D_IN;
  wire v_reg_valid_7_EN;

  // register v_reg_valid_8
  reg [3 : 0] v_reg_valid_8;
  reg [3 : 0] v_reg_valid_8_D_IN;
  wire v_reg_valid_8_EN;

  // register v_reg_valid_9
  reg [3 : 0] v_reg_valid_9;
  reg [3 : 0] v_reg_valid_9_D_IN;
  wire v_reg_valid_9_EN;

  // ports of submodule ff_core_request
  wire [140 : 0] ff_core_request_D_IN, ff_core_request_D_OUT;
  wire ff_core_request_CLR,
       ff_core_request_DEQ,
       ff_core_request_EMPTY_N,
       ff_core_request_ENQ,
       ff_core_request_FULL_N;

  // ports of submodule ff_pending_req
  wire [6 : 0] ff_pending_req_D_IN, ff_pending_req_D_OUT;
  wire ff_pending_req_CLR,
       ff_pending_req_DEQ,
       ff_pending_req_EMPTY_N,
       ff_pending_req_ENQ,
       ff_pending_req_FULL_N;

  // ports of submodule ff_read_mem_request
  wire [43 : 0] ff_read_mem_request_D_IN, ff_read_mem_request_D_OUT;
  wire ff_read_mem_request_CLR,
       ff_read_mem_request_DEQ,
       ff_read_mem_request_EMPTY_N,
       ff_read_mem_request_ENQ,
       ff_read_mem_request_FULL_N;

  // ports of submodule ff_write_mem_request
  reg [555 : 0] ff_write_mem_request_D_IN;
  wire [555 : 0] ff_write_mem_request_D_OUT;
  wire ff_write_mem_request_CLR,
       ff_write_mem_request_DEQ,
       ff_write_mem_request_EMPTY_N,
       ff_write_mem_request_ENQ,
       ff_write_mem_request_FULL_N;

  // ports of submodule m_data
  reg [5 : 0] m_data_ma_request_index;
  reg [3 : 0] m_data_mv_read_response_wayselect;
  reg [2 : 0] m_data_mv_read_response_blocknum;
  reg [1 : 0] m_data_ma_request_way;
  wire [575 : 0] m_data_mv_read_response;
  wire [511 : 0] m_data_ma_request_dataline;
  wire [7 : 0] m_data_ma_request_banks;
  wire m_data_EN_ma_request, m_data_ma_request_read_write;

  // ports of submodule m_fillbuffer
  wire [545 : 0] m_fillbuffer_mv_release_info;
  wire [511 : 0] m_fillbuffer_mav_allocate_line_dataline;
  wire [74 : 0] m_fillbuffer_mav_polling_response;
  wire [65 : 0] m_fillbuffer_ma_fill_from_memory_mem_resp;
  wire [63 : 0] m_fillbuffer_ma_from_storebuffer_dataword,
		m_fillbuffer_ma_from_storebuffer_mask;
  wire [31 : 0] m_fillbuffer_ma_from_storebuffer_address,
		m_fillbuffer_mav_allocate_line_address,
		m_fillbuffer_mav_polling_response_address;
  wire [2 : 0] m_fillbuffer_ma_fill_from_memory_fbindex,
	       m_fillbuffer_ma_fill_from_memory_init_bank,
	       m_fillbuffer_ma_from_storebuffer_fbindex,
	       m_fillbuffer_mav_allocate_line,
	       m_fillbuffer_mav_polling_response_fbindex;
  wire m_fillbuffer_EN_ma_fill_from_memory,
       m_fillbuffer_EN_ma_from_storebuffer,
       m_fillbuffer_EN_ma_perform_release,
       m_fillbuffer_EN_mav_allocate_line,
       m_fillbuffer_EN_mav_polling_response,
       m_fillbuffer_mav_allocate_line_dirty,
       m_fillbuffer_mav_allocate_line_from_ram,
       m_fillbuffer_mav_polling_response_fill,
       m_fillbuffer_mv_fbempty,
       m_fillbuffer_mv_fbfull,
       m_fillbuffer_mv_fbhead_valid;

  // ports of submodule m_storebuffer
  wire [167 : 0] m_storebuffer_mav_store_to_commit;
  wire [127 : 0] m_storebuffer_mav_check_sb_hit;
  wire [63 : 0] m_storebuffer_ma_allocate_entry_data,
		m_storebuffer_ma_allocate_entry_read_data;
  wire [31 : 0] m_storebuffer_ma_allocate_entry_address,
		m_storebuffer_mav_check_sb_hit_phyaddr;
  wire [4 : 0] m_storebuffer_ma_allocate_entry_atomic_op;
  wire [2 : 0] m_storebuffer_ma_allocate_entry_fbindex;
  wire [1 : 0] m_storebuffer_ma_allocate_entry_size;
  wire m_storebuffer_EN_ma_allocate_entry,
       m_storebuffer_EN_mav_check_sb_hit,
       m_storebuffer_EN_mav_store_to_commit,
       m_storebuffer_RDY_ma_allocate_entry,
       m_storebuffer_RDY_mav_store_to_commit,
       m_storebuffer_ma_allocate_entry_atomic,
       m_storebuffer_ma_allocate_entry_epochs,
       m_storebuffer_ma_allocate_entry_io,
       m_storebuffer_mv_cacheable_store,
       m_storebuffer_mv_sb_busy,
       m_storebuffer_mv_sb_empty,
       m_storebuffer_mv_sb_full;

  // ports of submodule m_tag
  reg [31 : 0] m_tag_mv_read_response_address_in;
  reg [5 : 0] m_tag_ma_request_index;
  reg [1 : 0] m_tag_ma_request_way, m_tag_mv_read_response_wayselect;
  wire [35 : 0] m_tag_mv_read_response;
  wire [31 : 0] m_tag_ma_request_address;
  wire m_tag_EN_ma_request, m_tag_ma_request_read_write;

  // rule scheduling signals
  wire CAN_FIRE_RL_rg_release_readphase__dreg_update,
       CAN_FIRE_RL_rl_capture_io_response,
       CAN_FIRE_RL_rl_deq_write_resp,
       CAN_FIRE_RL_rl_deq_write_response,
       CAN_FIRE_RL_rl_fence_operation,
       CAN_FIRE_RL_rl_fill_from_memory,
       CAN_FIRE_RL_rl_fillbuffer_check,
       CAN_FIRE_RL_rl_perform_replay,
       CAN_FIRE_RL_rl_ram_check,
       CAN_FIRE_RL_rl_release_from_fillbuffer,
       CAN_FIRE_RL_rl_response_to_core,
       CAN_FIRE_RL_rl_send_memory_request,
       CAN_FIRE___me_check_4,
       CAN_FIRE_get_core_resp_get,
       CAN_FIRE_get_hold_req_get,
       CAN_FIRE_get_ptw_resp_get,
       CAN_FIRE_get_read_mem_req_get,
       CAN_FIRE_ma_cache_enable,
       CAN_FIRE_ma_curr_priv,
       CAN_FIRE_ma_perform_store,
       CAN_FIRE_ma_write_mem_req_deq,
       CAN_FIRE_put_core_req_put,
       CAN_FIRE_put_pa_from_tlb_put,
       CAN_FIRE_put_read_mem_resp_put,
       CAN_FIRE_put_write_mem_resp_put,
       WILL_FIRE_RL_rg_release_readphase__dreg_update,
       WILL_FIRE_RL_rl_capture_io_response,
       WILL_FIRE_RL_rl_deq_write_resp,
       WILL_FIRE_RL_rl_deq_write_response,
       WILL_FIRE_RL_rl_fence_operation,
       WILL_FIRE_RL_rl_fill_from_memory,
       WILL_FIRE_RL_rl_fillbuffer_check,
       WILL_FIRE_RL_rl_perform_replay,
       WILL_FIRE_RL_rl_ram_check,
       WILL_FIRE_RL_rl_release_from_fillbuffer,
       WILL_FIRE_RL_rl_response_to_core,
       WILL_FIRE_RL_rl_send_memory_request,
       WILL_FIRE___me_check_4,
       WILL_FIRE_get_core_resp_get,
       WILL_FIRE_get_hold_req_get,
       WILL_FIRE_get_ptw_resp_get,
       WILL_FIRE_get_read_mem_req_get,
       WILL_FIRE_ma_cache_enable,
       WILL_FIRE_ma_curr_priv,
       WILL_FIRE_ma_perform_store,
       WILL_FIRE_ma_write_mem_req_deq,
       WILL_FIRE_put_core_req_put,
       WILL_FIRE_put_pa_from_tlb_put,
       WILL_FIRE_put_read_mem_resp_put,
       WILL_FIRE_put_write_mem_resp_put;

  // inputs to muxes for submodule ports
  wire [555 : 0] MUX_ff_write_mem_request_enq_1__VAL_1,
		 MUX_ff_write_mem_request_enq_1__VAL_2,
		 MUX_ff_write_mem_request_enq_1__VAL_3;
  wire [72 : 0] MUX_ff_core_response_rv_port0__write_1__VAL_1,
		MUX_ff_core_response_rv_port0__write_1__VAL_2;
  wire [3 : 0] MUX_m_data_mv_read_response_2__VAL_2,
	       MUX_v_reg_dirty_0_write_1__VAL_1,
	       MUX_v_reg_dirty_0_write_1__VAL_2,
	       MUX_v_reg_valid_0_write_1__VAL_1,
	       MUX_v_reg_valid_0_write_1__VAL_2;
  wire [1 : 0] MUX_replacement_v_count_1_write_1__VAL_2;
  wire MUX_ff_core_response_rv_port0__write_1__SEL_1,
       MUX_ff_write_mem_request_enq_1__SEL_1,
       MUX_ff_write_mem_request_enq_1__SEL_2,
       MUX_ff_write_mem_request_enq_1__SEL_3,
       MUX_m_data_ma_request_1__SEL_1,
       MUX_m_data_ma_request_1__SEL_2,
       MUX_m_data_ma_request_1__VAL_2,
       MUX_m_fillbuffer_mav_allocate_line_1__SEL_1,
       MUX_m_fillbuffer_mav_allocate_line_1__SEL_2,
       MUX_m_fillbuffer_mav_allocate_line_4__VAL_1,
       MUX_rg_globaldirty_write_1__SEL_2,
       MUX_rg_performing_replay_write_1__SEL_1,
       MUX_v_reg_dirty_0_write_1__SEL_1,
       MUX_v_reg_dirty_0_write_1__SEL_2,
       MUX_v_reg_dirty_1_write_1__SEL_1,
       MUX_v_reg_dirty_1_write_1__SEL_2,
       MUX_v_reg_dirty_10_write_1__SEL_1,
       MUX_v_reg_dirty_10_write_1__SEL_2,
       MUX_v_reg_dirty_11_write_1__SEL_1,
       MUX_v_reg_dirty_11_write_1__SEL_2,
       MUX_v_reg_dirty_12_write_1__SEL_1,
       MUX_v_reg_dirty_12_write_1__SEL_2,
       MUX_v_reg_dirty_13_write_1__SEL_1,
       MUX_v_reg_dirty_13_write_1__SEL_2,
       MUX_v_reg_dirty_14_write_1__SEL_1,
       MUX_v_reg_dirty_14_write_1__SEL_2,
       MUX_v_reg_dirty_15_write_1__SEL_1,
       MUX_v_reg_dirty_15_write_1__SEL_2,
       MUX_v_reg_dirty_16_write_1__SEL_1,
       MUX_v_reg_dirty_16_write_1__SEL_2,
       MUX_v_reg_dirty_17_write_1__SEL_1,
       MUX_v_reg_dirty_17_write_1__SEL_2,
       MUX_v_reg_dirty_18_write_1__SEL_1,
       MUX_v_reg_dirty_18_write_1__SEL_2,
       MUX_v_reg_dirty_19_write_1__SEL_1,
       MUX_v_reg_dirty_19_write_1__SEL_2,
       MUX_v_reg_dirty_2_write_1__SEL_1,
       MUX_v_reg_dirty_2_write_1__SEL_2,
       MUX_v_reg_dirty_20_write_1__SEL_1,
       MUX_v_reg_dirty_20_write_1__SEL_2,
       MUX_v_reg_dirty_21_write_1__SEL_1,
       MUX_v_reg_dirty_21_write_1__SEL_2,
       MUX_v_reg_dirty_22_write_1__SEL_1,
       MUX_v_reg_dirty_22_write_1__SEL_2,
       MUX_v_reg_dirty_23_write_1__SEL_1,
       MUX_v_reg_dirty_23_write_1__SEL_2,
       MUX_v_reg_dirty_24_write_1__SEL_1,
       MUX_v_reg_dirty_24_write_1__SEL_2,
       MUX_v_reg_dirty_25_write_1__SEL_1,
       MUX_v_reg_dirty_25_write_1__SEL_2,
       MUX_v_reg_dirty_26_write_1__SEL_1,
       MUX_v_reg_dirty_26_write_1__SEL_2,
       MUX_v_reg_dirty_27_write_1__SEL_1,
       MUX_v_reg_dirty_27_write_1__SEL_2,
       MUX_v_reg_dirty_28_write_1__SEL_1,
       MUX_v_reg_dirty_28_write_1__SEL_2,
       MUX_v_reg_dirty_29_write_1__SEL_1,
       MUX_v_reg_dirty_29_write_1__SEL_2,
       MUX_v_reg_dirty_3_write_1__SEL_1,
       MUX_v_reg_dirty_3_write_1__SEL_2,
       MUX_v_reg_dirty_30_write_1__SEL_1,
       MUX_v_reg_dirty_30_write_1__SEL_2,
       MUX_v_reg_dirty_31_write_1__SEL_1,
       MUX_v_reg_dirty_31_write_1__SEL_2,
       MUX_v_reg_dirty_32_write_1__SEL_1,
       MUX_v_reg_dirty_32_write_1__SEL_2,
       MUX_v_reg_dirty_33_write_1__SEL_1,
       MUX_v_reg_dirty_33_write_1__SEL_2,
       MUX_v_reg_dirty_34_write_1__SEL_1,
       MUX_v_reg_dirty_34_write_1__SEL_2,
       MUX_v_reg_dirty_35_write_1__SEL_1,
       MUX_v_reg_dirty_35_write_1__SEL_2,
       MUX_v_reg_dirty_36_write_1__SEL_1,
       MUX_v_reg_dirty_36_write_1__SEL_2,
       MUX_v_reg_dirty_37_write_1__SEL_1,
       MUX_v_reg_dirty_37_write_1__SEL_2,
       MUX_v_reg_dirty_38_write_1__SEL_1,
       MUX_v_reg_dirty_38_write_1__SEL_2,
       MUX_v_reg_dirty_39_write_1__SEL_1,
       MUX_v_reg_dirty_39_write_1__SEL_2,
       MUX_v_reg_dirty_4_write_1__SEL_1,
       MUX_v_reg_dirty_4_write_1__SEL_2,
       MUX_v_reg_dirty_40_write_1__SEL_1,
       MUX_v_reg_dirty_40_write_1__SEL_2,
       MUX_v_reg_dirty_41_write_1__SEL_1,
       MUX_v_reg_dirty_41_write_1__SEL_2,
       MUX_v_reg_dirty_42_write_1__SEL_1,
       MUX_v_reg_dirty_42_write_1__SEL_2,
       MUX_v_reg_dirty_43_write_1__SEL_1,
       MUX_v_reg_dirty_43_write_1__SEL_2,
       MUX_v_reg_dirty_44_write_1__SEL_1,
       MUX_v_reg_dirty_44_write_1__SEL_2,
       MUX_v_reg_dirty_45_write_1__SEL_1,
       MUX_v_reg_dirty_45_write_1__SEL_2,
       MUX_v_reg_dirty_46_write_1__SEL_1,
       MUX_v_reg_dirty_46_write_1__SEL_2,
       MUX_v_reg_dirty_47_write_1__SEL_1,
       MUX_v_reg_dirty_47_write_1__SEL_2,
       MUX_v_reg_dirty_48_write_1__SEL_1,
       MUX_v_reg_dirty_48_write_1__SEL_2,
       MUX_v_reg_dirty_49_write_1__SEL_1,
       MUX_v_reg_dirty_49_write_1__SEL_2,
       MUX_v_reg_dirty_5_write_1__SEL_1,
       MUX_v_reg_dirty_5_write_1__SEL_2,
       MUX_v_reg_dirty_50_write_1__SEL_1,
       MUX_v_reg_dirty_50_write_1__SEL_2,
       MUX_v_reg_dirty_51_write_1__SEL_1,
       MUX_v_reg_dirty_51_write_1__SEL_2,
       MUX_v_reg_dirty_52_write_1__SEL_1,
       MUX_v_reg_dirty_52_write_1__SEL_2,
       MUX_v_reg_dirty_53_write_1__SEL_1,
       MUX_v_reg_dirty_53_write_1__SEL_2,
       MUX_v_reg_dirty_54_write_1__SEL_1,
       MUX_v_reg_dirty_54_write_1__SEL_2,
       MUX_v_reg_dirty_55_write_1__SEL_1,
       MUX_v_reg_dirty_55_write_1__SEL_2,
       MUX_v_reg_dirty_56_write_1__SEL_1,
       MUX_v_reg_dirty_56_write_1__SEL_2,
       MUX_v_reg_dirty_57_write_1__SEL_1,
       MUX_v_reg_dirty_57_write_1__SEL_2,
       MUX_v_reg_dirty_58_write_1__SEL_1,
       MUX_v_reg_dirty_58_write_1__SEL_2,
       MUX_v_reg_dirty_59_write_1__SEL_1,
       MUX_v_reg_dirty_59_write_1__SEL_2,
       MUX_v_reg_dirty_6_write_1__SEL_1,
       MUX_v_reg_dirty_6_write_1__SEL_2,
       MUX_v_reg_dirty_60_write_1__SEL_1,
       MUX_v_reg_dirty_60_write_1__SEL_2,
       MUX_v_reg_dirty_61_write_1__SEL_1,
       MUX_v_reg_dirty_61_write_1__SEL_2,
       MUX_v_reg_dirty_62_write_1__SEL_1,
       MUX_v_reg_dirty_62_write_1__SEL_2,
       MUX_v_reg_dirty_63_write_1__SEL_1,
       MUX_v_reg_dirty_63_write_1__SEL_2,
       MUX_v_reg_dirty_7_write_1__SEL_1,
       MUX_v_reg_dirty_7_write_1__SEL_2,
       MUX_v_reg_dirty_8_write_1__SEL_1,
       MUX_v_reg_dirty_8_write_1__SEL_2,
       MUX_v_reg_dirty_9_write_1__SEL_1,
       MUX_v_reg_dirty_9_write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d1886;
  reg TASK_testplusargs___d1887;
  reg TASK_testplusargs___d1888;
  reg [63 : 0] v__h119768;
  reg TASK_testplusargs___d1904;
  reg TASK_testplusargs___d1905;
  reg TASK_testplusargs___d1906;
  reg [63 : 0] v__h119954;
  reg TASK_testplusargs___d1975;
  reg TASK_testplusargs___d1976;
  reg TASK_testplusargs___d1977;
  reg [63 : 0] v__h121131;
  reg TASK_testplusargs___d1994;
  reg TASK_testplusargs___d1995;
  reg TASK_testplusargs___d1996;
  reg [63 : 0] v__h121360;
  reg TASK_testplusargs___d2010;
  reg TASK_testplusargs___d2011;
  reg TASK_testplusargs___d2012;
  reg [63 : 0] v__h121509;
  reg TASK_testplusargs___d2019;
  reg TASK_testplusargs___d2020;
  reg TASK_testplusargs___d2021;
  reg [63 : 0] v__h122724;
  reg TASK_testplusargs___d238;
  reg TASK_testplusargs___d239;
  reg TASK_testplusargs___d240;
  reg [63 : 0] v__h31877;
  reg TASK_testplusargs___d254;
  reg TASK_testplusargs___d255;
  reg TASK_testplusargs___d256;
  reg [63 : 0] v__h32134;
  reg TASK_testplusargs___d263;
  reg TASK_testplusargs___d264;
  reg TASK_testplusargs___d265;
  reg [63 : 0] v__h32306;
  reg TASK_testplusargs___d330;
  reg TASK_testplusargs___d331;
  reg TASK_testplusargs___d332;
  reg [63 : 0] v__h34489;
  reg TASK_testplusargs___d344;
  reg TASK_testplusargs___d345;
  reg TASK_testplusargs___d346;
  reg [63 : 0] v__h34680;
  reg TASK_testplusargs___d356;
  reg TASK_testplusargs___d357;
  reg TASK_testplusargs___d358;
  reg [63 : 0] v__h34824;
  reg TASK_testplusargs___d394;
  reg TASK_testplusargs___d395;
  reg TASK_testplusargs___d396;
  reg [63 : 0] v__h35887;
  reg TASK_testplusargs___d407;
  reg TASK_testplusargs___d408;
  reg TASK_testplusargs___d409;
  reg [63 : 0] v__h35720;
  reg TASK_testplusargs___d423;
  reg TASK_testplusargs___d424;
  reg TASK_testplusargs___d425;
  reg [63 : 0] v__h36101;
  reg TASK_testplusargs___d433;
  reg TASK_testplusargs___d434;
  reg TASK_testplusargs___d435;
  reg [63 : 0] v__h36276;
  reg TASK_testplusargs___d444;
  reg TASK_testplusargs___d445;
  reg TASK_testplusargs___d446;
  reg [63 : 0] v__h36391;
  reg TASK_testplusargs___d1466;
  reg TASK_testplusargs___d1467;
  reg TASK_testplusargs___d1468;
  reg [63 : 0] v__h102670;
  reg TASK_testplusargs___d1434;
  reg TASK_testplusargs___d1435;
  reg TASK_testplusargs___d1436;
  reg [63 : 0] v__h101894;
  reg TASK_testplusargs___d1443;
  reg TASK_testplusargs___d1444;
  reg TASK_testplusargs___d1445;
  reg [63 : 0] v__h102122;
  reg TASK_testplusargs___d1450;
  reg TASK_testplusargs___d1451;
  reg TASK_testplusargs___d1452;
  reg [63 : 0] v__h102394;
  reg TASK_testplusargs___d1488;
  reg TASK_testplusargs___d1489;
  reg TASK_testplusargs___d1490;
  reg [63 : 0] v__h103002;
  reg TASK_testplusargs___d26;
  reg TASK_testplusargs___d27;
  reg TASK_testplusargs___d28;
  reg [63 : 0] v__h16658;
  reg TASK_testplusargs___d32;
  reg TASK_testplusargs___d33;
  reg TASK_testplusargs___d34;
  reg [63 : 0] v__h16824;
  reg TASK_testplusargs___d182;
  reg TASK_testplusargs___d183;
  reg TASK_testplusargs___d184;
  reg [63 : 0] v__h21208;
  reg TASK_testplusargs___d485;
  reg TASK_testplusargs___d486;
  reg TASK_testplusargs___d487;
  reg [63 : 0] v__h36672;
  reg TASK_testplusargs___d509;
  reg TASK_testplusargs___d510;
  reg TASK_testplusargs___d511;
  reg [63 : 0] v__h37106;
  reg TASK_testplusargs___d516;
  reg TASK_testplusargs___d517;
  reg TASK_testplusargs___d518;
  reg [63 : 0] v__h37343;
  reg TASK_testplusargs___d531;
  reg TASK_testplusargs___d532;
  reg TASK_testplusargs___d533;
  reg [63 : 0] v__h37805;
  reg TASK_testplusargs___d1364;
  reg TASK_testplusargs___d1365;
  reg TASK_testplusargs___d1366;
  reg [63 : 0] v__h101290;
  reg TASK_testplusargs___d1403;
  reg TASK_testplusargs___d1404;
  reg TASK_testplusargs___d1405;
  reg [63 : 0] v__h101613;
  reg TASK_testplusargs___d1499;
  reg TASK_testplusargs___d1500;
  reg TASK_testplusargs___d1501;
  reg [63 : 0] v__h103214;
  reg TASK_testplusargs___d1532;
  reg TASK_testplusargs___d1533;
  reg TASK_testplusargs___d1534;
  reg [63 : 0] v__h105956;
  reg TASK_testplusargs___d1642;
  reg TASK_testplusargs___d1643;
  reg TASK_testplusargs___d1644;
  reg [63 : 0] v__h107050;
  reg TASK_testplusargs___d1651;
  reg TASK_testplusargs___d1652;
  reg TASK_testplusargs___d1653;
  reg [63 : 0] v__h106674;
  reg TASK_testplusargs___d1801;
  reg TASK_testplusargs___d1802;
  reg TASK_testplusargs___d1803;
  reg [63 : 0] v__h113942;
  reg m_fillbuffer_mav_polling_response_67_BIT_1_89__ETC___d412;
  reg m_fillbuffer_mav_polling_response_67_BIT_0_90__ETC___d428;
  reg NOT_m_fillbuffer_mav_polling_response_67_BIT_0_ETC___d438;
  reg NOT_m_fillbuffer_mav_polling_response_67_BIT_1_ETC___d449;
  reg TASK_testplusargs_364_OR_TASK_testplusargs_365_ETC___d1391;
  reg TASK_testplusargs_364_OR_TASK_testplusargs_365_ETC___d1393;
  reg SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1647;
  reg rg_release_readphase_31_AND_TASK_testplusargs__ETC___d1656;
  reg NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1806;
  reg m_storebuffer_mav_store_to_commit_981_BIT_2_98_ETC___d1999;
  reg NOT_m_storebuffer_mav_store_to_commit_981_BIT__ETC___d2015;
  reg SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187;
  reg TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d246;
  reg TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d248;
  reg TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d251;
  reg TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d253;
  reg TASK_testplusargs_30_OR_TASK_testplusargs_31_A_ETC___d341;
  reg TASK_testplusargs_30_OR_TASK_testplusargs_31_A_ETC___d343;
  reg TASK_testplusargs_56_OR_TASK_testplusargs_57_A_ETC___d362;
  reg TASK_testplusargs_56_OR_TASK_testplusargs_57_A_ETC___d363;
  reg NOT_wr_cache_enable_wget__18_85_OR_ff_from_tlb_ETC___d399;
  reg wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d413;
  reg wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d430;
  reg wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d440;
  reg wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d450;
  reg wr_ram_state_whas__73_AND_wr_ram_state_wget__7_ETC___d514;
  reg wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d521;
  reg wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d536;
  reg NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1369;
  reg NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1408;
  reg wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d1439;
  reg NOT_wr_cache_enable_wget__18_85_OR_ff_from_tlb_ETC___d1448;
  reg wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d1455;
  reg TASK_testplusargs_466_OR_TASK_testplusargs_467_ETC___d1474;
  reg TASK_testplusargs_466_OR_TASK_testplusargs_467_ETC___d1476;
  reg TASK_testplusargs_466_OR_TASK_testplusargs_467_ETC___d1478;
  reg TASK_testplusargs_466_OR_TASK_testplusargs_467_ETC___d1480;
  reg TASK_testplusargs_488_OR_TASK_testplusargs_489_ETC___d1494;
  reg TASK_testplusargs_488_OR_TASK_testplusargs_489_ETC___d1495;
  reg TASK_testplusargs_488_OR_TASK_testplusargs_489_ETC___d1496;
  reg TASK_testplusargs_488_OR_TASK_testplusargs_489_ETC___d1497;
  reg TASK_testplusargs_886_OR_TASK_testplusargs_887_ETC___d1893;
  reg TASK_testplusargs_886_OR_TASK_testplusargs_887_ETC___d1895;
  reg TASK_testplusargs_886_OR_TASK_testplusargs_887_ETC___d1901;
  reg TASK_testplusargs_886_OR_TASK_testplusargs_887_ETC___d1903;
  reg TASK_testplusargs_975_OR_TASK_testplusargs_976_ETC___d1988;
  reg TASK_testplusargs_975_OR_TASK_testplusargs_976_ETC___d1990;
  reg NOT_m_storebuffer_mav_store_to_commit_981_BIT__ETC___d2024;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] x__h86370, y__h86257;
  reg [3 : 0] SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271,
	      bs__h16879,
	      bs__h18905,
	      bs__h94492,
	      dirty__h103315,
	      valid__h103314;
  reg [1 : 0] CASE_ma_curr_priv_c_1_ma_curr_priv_c_3_ma_curr_ETC__q1,
	      SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610;
  reg lv_sign__h37927;
  wire [511 : 0] x_data__h121620;
  wire [63 : 0] lv_response_word__h35009,
		lv_response_word__h38277,
		lv_response_word__h38281,
		response_word__h102810,
		response_word__h32519,
		x__h86254,
		x__h86256,
		x__h86269,
		x__h86271,
		y__h86255,
		y__h86270,
		y__h86272,
		y__h86371;
  wire [31 : 0] final_address__h16755,
		lv_evict_address__h106549,
		phyaddr__h101688,
		phyaddr__h31807;
  wire [7 : 0] x_burst_len__h101716;
  wire [6 : 0] _theResult____h21336, fn_pmp_lookup___d292;
  wire [5 : 0] IF_ff_core_request_first__1_BITS_74_TO_73_79_E_ETC___d299,
	       lv_cause__h31809,
	       lv_response_cause__h32541,
	       lv_response_cause__h38279,
	       set_index__h119470,
	       x__h102838,
	       x__h32545;
  wire [3 : 0] lv_hitmask__h32238,
	       wayselect__h106742,
	       x__h35039,
	       x__h95337,
	       y__h111085,
	       y__h95353;
  wire [2 : 0] burst_size__h101684,
	       x__h33662,
	       x__h34229,
	       x__h34241,
	       x__h34253,
	       x_burst_size__h121622,
	       y__h34230,
	       y__h34242,
	       y__h34254;
  wire [1 : 0] i__h94493,
	       pmp_access__h32057,
	       v__h103311,
	       x__h27336,
	       x__h36809,
	       x__h36821,
	       y__h36810,
	       y__h36822;
  wire IF_ff_core_request_first__1_BITS_71_TO_70_106__ETC___d1124,
       NOT_0_CONCAT_m_tag_mv_read_response_ff_from_tl_ETC___d329,
       NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812,
       NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223,
       NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1395,
       NOT_ff_core_request_first__1_BIT_76_2_20_AND_N_ETC___d236,
       NOT_ff_core_request_first__1_BIT_76_2_20_AND_w_ETC___d483,
       NOT_ff_core_request_notEmpty__506_507_AND_NOT__ETC___d1517,
       NOT_ff_hold_request_rv_port0__read__52_BIT_141_ETC___d462,
       NOT_m_fillbuffer_mv_release_info__94_BIT_1_633_ETC___d1811,
       NOT_wr_fb_state_whas__78_377_OR_NOT_wr_fb_stat_ETC___d1382,
       NOT_wr_nc_state_whas__68_371_OR_NOT_wr_nc_stat_ETC___d1376,
       NOT_wr_ram_state_whas__73_383_OR_NOT_wr_ram_st_ETC___d1388,
       SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d1632,
       SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d173,
       SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d106,
       SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1631,
       SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634,
       b__h36829,
       ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386,
       lv_response_epochs__h38280,
       m_fillbuffer_mv_fbfull__28_OR_rg_fence_stall_3_ETC___d1529,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1515,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1668,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1671,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1673,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1675,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1677,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1679,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1681,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1683,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1685,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1687,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1689,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1691,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1693,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1695,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1697,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1699,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1701,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1703,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1705,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1707,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1709,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1711,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1713,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1715,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1717,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1719,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1721,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1723,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1725,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1727,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1729,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1731,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1733,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1735,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1737,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1739,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1741,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1743,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1745,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1747,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1749,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1751,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1753,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1755,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1757,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1759,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1761,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1763,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1765,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1767,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1769,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1771,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1773,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1775,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1777,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1779,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1781,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1783,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1785,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1787,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1789,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1791,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1793,
       m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1795,
       m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992,
       wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d406,
       wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d417,
       wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d432,
       wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d443,
       wr_fault_whas__65_AND_wr_fault_wget__66_67_OR__ETC___d477,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1005,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1013,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1022,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1030,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1039,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1047,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1056,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1064,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1073,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1081,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1090,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1098,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1163,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1171,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1180,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1188,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1197,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1205,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1214,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d524,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d527,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d530,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d550,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d563,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d571,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d580,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d588,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d597,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d605,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d614,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d622,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d631,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d639,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d648,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d656,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d665,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d673,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d682,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d690,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d699,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d707,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d716,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d724,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d733,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d741,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d750,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d758,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d767,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d775,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d784,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d792,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d801,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d809,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d818,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d826,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d835,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d843,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d852,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d860,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d869,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d877,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d886,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d894,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d903,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d911,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d920,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d928,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d937,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d945,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d954,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d962,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d971,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d979,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d988,
       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d996,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1003,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1011,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1020,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1028,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1037,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1045,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1054,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1062,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1071,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1079,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1088,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1096,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1161,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1169,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1178,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1186,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1195,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1203,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1212,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d545,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d557,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d561,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d569,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d578,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d586,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d595,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d603,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d612,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d620,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d629,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d637,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d646,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d654,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d663,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d671,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d680,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d688,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d697,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d705,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d714,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d722,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d731,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d739,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d748,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d756,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d765,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d773,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d782,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d790,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d799,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d807,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d816,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d824,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d833,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d841,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d850,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d858,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d867,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d875,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d884,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d892,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d901,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d909,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d918,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d926,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d935,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d943,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d952,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d960,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d969,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d977,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d986,
       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d994,
       wr_ram_state_whas__73_AND_wr_ram_state_wget__7_ETC___d1419,
       x__read__h3823,
       x__read__h3893,
       x__read__h3963,
       x__read__h4033,
       x__read__h4103,
       y__h91493;

  // action method put_core_req_put
  assign RDY_put_core_req_put =
	     !ff_core_response_rv[72] && !rg_fence_stall &&
	     !m_fillbuffer_mv_fbfull &&
	     !rg_performing_replay &&
	     EN_ma_cache_enable &&
	     ff_core_request_FULL_N ;
  assign CAN_FIRE_put_core_req_put = RDY_put_core_req_put ;
  assign WILL_FIRE_put_core_req_put = EN_put_core_req_put ;

  // actionvalue method get_core_resp_get
  assign get_core_resp_get = ff_core_response_rv_port1__read[71:0] ;
  assign RDY_get_core_resp_get = ff_core_response_rv_port1__read[72] ;
  assign CAN_FIRE_get_core_resp_get = ff_core_response_rv_port1__read[72] ;
  assign WILL_FIRE_get_core_resp_get = EN_get_core_resp_get ;

  // actionvalue method get_read_mem_req_get
  assign get_read_mem_req_get = ff_read_mem_request_D_OUT ;
  assign RDY_get_read_mem_req_get = ff_read_mem_request_EMPTY_N ;
  assign CAN_FIRE_get_read_mem_req_get = ff_read_mem_request_EMPTY_N ;
  assign WILL_FIRE_get_read_mem_req_get = EN_get_read_mem_req_get ;

  // action method put_read_mem_resp_put
  assign RDY_put_read_mem_resp_put = !ff_read_mem_response_rv[66] ;
  assign CAN_FIRE_put_read_mem_resp_put = !ff_read_mem_response_rv[66] ;
  assign WILL_FIRE_put_read_mem_resp_put = EN_put_read_mem_resp_put ;

  // value method mv_write_mem_req
  assign mv_write_mem_req = ff_write_mem_request_D_OUT ;
  assign RDY_mv_write_mem_req = ff_write_mem_request_EMPTY_N ;

  // action method ma_write_mem_req_deq
  assign RDY_ma_write_mem_req_deq = ff_write_mem_request_EMPTY_N ;
  assign CAN_FIRE_ma_write_mem_req_deq = ff_write_mem_request_EMPTY_N ;
  assign WILL_FIRE_ma_write_mem_req_deq = EN_ma_write_mem_req_deq ;

  // action method put_write_mem_resp_put
  assign RDY_put_write_mem_resp_put = !ff_write_mem_response_rv[1] ;
  assign CAN_FIRE_put_write_mem_resp_put = !ff_write_mem_response_rv[1] ;
  assign WILL_FIRE_put_write_mem_resp_put = EN_put_write_mem_resp_put ;

  // action method ma_curr_priv
  assign RDY_ma_curr_priv = 1'd1 ;
  assign CAN_FIRE_ma_curr_priv = 1'd1 ;
  assign WILL_FIRE_ma_curr_priv = EN_ma_curr_priv ;

  // actionvalue method get_ptw_resp_get
  assign get_ptw_resp_get = ff_ptw_response_rv_port1__read[71:0] ;
  assign RDY_get_ptw_resp_get = ff_ptw_response_rv_port1__read[72] ;
  assign CAN_FIRE_get_ptw_resp_get = ff_ptw_response_rv_port1__read[72] ;
  assign WILL_FIRE_get_ptw_resp_get = EN_get_ptw_resp_get ;

  // action method put_pa_from_tlb_put
  assign RDY_put_pa_from_tlb_put = !ff_from_tlb_rv[40] ;
  assign CAN_FIRE_put_pa_from_tlb_put = !ff_from_tlb_rv[40] ;
  assign WILL_FIRE_put_pa_from_tlb_put = EN_put_pa_from_tlb_put ;

  // actionvalue method get_hold_req_get
  assign get_hold_req_get = ff_hold_request_rv_port1__read[140:0] ;
  assign RDY_get_hold_req_get = ff_hold_request_rv_port1__read[141] ;
  assign CAN_FIRE_get_hold_req_get = ff_hold_request_rv_port1__read[141] ;
  assign WILL_FIRE_get_hold_req_get = EN_get_hold_req_get ;

  // value method mv_perf_counters
  assign mv_perf_counters =
	     { wr_total_read_access_whas,
	       wr_total_write_access_whas,
	       wr_total_atomic_access_whas,
	       x__read__h3823,
	       x__read__h3893,
	       x__read__h3963,
	       x__read__h4033,
	       x__read__h4103,
	       wr_total_read_fb_hits_whas,
	       wr_total_write_fb_hits_whas,
	       wr_total_atomic_fb_hits_whas,
	       wr_total_fb_releases_whas,
	       MUX_ff_write_mem_request_enq_1__SEL_2 } ;
  assign RDY_mv_perf_counters = 1'd1 ;

  // action method ma_cache_enable
  assign RDY_ma_cache_enable = 1'd1 ;
  assign CAN_FIRE_ma_cache_enable = 1'd1 ;
  assign WILL_FIRE_ma_cache_enable = EN_ma_cache_enable ;

  // value method mv_storebuffer_empty
  assign mv_storebuffer_empty = m_storebuffer_mv_sb_empty ;
  assign RDY_mv_storebuffer_empty = 1'd1 ;

  // action method ma_perform_store
  assign RDY_ma_perform_store =
	     m_storebuffer_RDY_mav_store_to_commit &&
	     ff_write_mem_request_FULL_N ;
  assign CAN_FIRE_ma_perform_store =
	     m_storebuffer_RDY_mav_store_to_commit &&
	     ff_write_mem_request_FULL_N ;
  assign WILL_FIRE_ma_perform_store = EN_ma_perform_store ;

  // value method mv_cacheable_store
  assign mv_cacheable_store = m_storebuffer_mv_cacheable_store ;
  assign RDY_mv_cacheable_store = 1'd1 ;

  // value method mv_cache_available
  assign mv_cache_available =
	     !ff_core_response_rv[72] && ff_core_request_FULL_N &&
	     !rg_fence_stall &&
	     !m_fillbuffer_mv_fbfull &&
	     !rg_performing_replay &&
	     !m_storebuffer_mv_sb_full &&
	     !m_storebuffer_mv_sb_busy ;
  assign RDY_mv_cache_available = 1'd1 ;

  // value method mv_commit_store_ready
  assign mv_commit_store_ready =
	     ff_write_mem_request_FULL_N && !m_storebuffer_mv_sb_busy ;
  assign RDY_mv_commit_store_ready = 1'd1 ;

  // submodule ff_core_request
  FIFO2 #(.width(32'd141), .guarded(32'd1)) ff_core_request(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ff_core_request_D_IN),
							    .ENQ(ff_core_request_ENQ),
							    .DEQ(ff_core_request_DEQ),
							    .CLR(ff_core_request_CLR),
							    .D_OUT(ff_core_request_D_OUT),
							    .FULL_N(ff_core_request_FULL_N),
							    .EMPTY_N(ff_core_request_EMPTY_N));

  // submodule ff_pending_req
  FIFO2 #(.width(32'd7), .guarded(32'd0)) ff_pending_req(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ff_pending_req_D_IN),
							 .ENQ(ff_pending_req_ENQ),
							 .DEQ(ff_pending_req_DEQ),
							 .CLR(ff_pending_req_CLR),
							 .D_OUT(ff_pending_req_D_OUT),
							 .FULL_N(ff_pending_req_FULL_N),
							 .EMPTY_N(ff_pending_req_EMPTY_N));

  // submodule ff_read_mem_request
  FIFO2 #(.width(32'd44), .guarded(32'd1)) ff_read_mem_request(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(ff_read_mem_request_D_IN),
							       .ENQ(ff_read_mem_request_ENQ),
							       .DEQ(ff_read_mem_request_DEQ),
							       .CLR(ff_read_mem_request_CLR),
							       .D_OUT(ff_read_mem_request_D_OUT),
							       .FULL_N(ff_read_mem_request_FULL_N),
							       .EMPTY_N(ff_read_mem_request_EMPTY_N));

  // submodule ff_write_mem_request
  FIFO1 #(.width(32'd556), .guarded(32'd1)) ff_write_mem_request(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(ff_write_mem_request_D_IN),
								 .ENQ(ff_write_mem_request_ENQ),
								 .DEQ(ff_write_mem_request_DEQ),
								 .CLR(ff_write_mem_request_CLR),
								 .D_OUT(ff_write_mem_request_D_OUT),
								 .FULL_N(ff_write_mem_request_FULL_N),
								 .EMPTY_N(ff_write_mem_request_EMPTY_N));

  // submodule m_data
  mkdcache_data #(.id(id)) m_data(.CLK(CLK),
				  .RST_N(RST_N),
				  .ma_request_banks(m_data_ma_request_banks),
				  .ma_request_dataline(m_data_ma_request_dataline),
				  .ma_request_index(m_data_ma_request_index),
				  .ma_request_read_write(m_data_ma_request_read_write),
				  .ma_request_way(m_data_ma_request_way),
				  .mv_read_response_blocknum(m_data_mv_read_response_blocknum),
				  .mv_read_response_wayselect(m_data_mv_read_response_wayselect),
				  .EN_ma_request(m_data_EN_ma_request),
				  .RDY_ma_request(),
				  .mv_read_response(m_data_mv_read_response),
				  .RDY_mv_read_response());

  // submodule m_fillbuffer
  mkdcache_fb_v2 #(.id(id)) m_fillbuffer(.CLK(CLK),
					 .RST_N(RST_N),
					 .ma_fill_from_memory_fbindex(m_fillbuffer_ma_fill_from_memory_fbindex),
					 .ma_fill_from_memory_init_bank(m_fillbuffer_ma_fill_from_memory_init_bank),
					 .ma_fill_from_memory_mem_resp(m_fillbuffer_ma_fill_from_memory_mem_resp),
					 .ma_from_storebuffer_address(m_fillbuffer_ma_from_storebuffer_address),
					 .ma_from_storebuffer_dataword(m_fillbuffer_ma_from_storebuffer_dataword),
					 .ma_from_storebuffer_fbindex(m_fillbuffer_ma_from_storebuffer_fbindex),
					 .ma_from_storebuffer_mask(m_fillbuffer_ma_from_storebuffer_mask),
					 .mav_allocate_line_address(m_fillbuffer_mav_allocate_line_address),
					 .mav_allocate_line_dataline(m_fillbuffer_mav_allocate_line_dataline),
					 .mav_allocate_line_dirty(m_fillbuffer_mav_allocate_line_dirty),
					 .mav_allocate_line_from_ram(m_fillbuffer_mav_allocate_line_from_ram),
					 .mav_polling_response_address(m_fillbuffer_mav_polling_response_address),
					 .mav_polling_response_fbindex(m_fillbuffer_mav_polling_response_fbindex),
					 .mav_polling_response_fill(m_fillbuffer_mav_polling_response_fill),
					 .EN_mav_allocate_line(m_fillbuffer_EN_mav_allocate_line),
					 .EN_ma_fill_from_memory(m_fillbuffer_EN_ma_fill_from_memory),
					 .EN_ma_from_storebuffer(m_fillbuffer_EN_ma_from_storebuffer),
					 .EN_ma_perform_release(m_fillbuffer_EN_ma_perform_release),
					 .EN_mav_polling_response(m_fillbuffer_EN_mav_polling_response),
					 .mv_fbfull(m_fillbuffer_mv_fbfull),
					 .mv_fbempty(m_fillbuffer_mv_fbempty),
					 .mv_fbhead_valid(m_fillbuffer_mv_fbhead_valid),
					 .mav_allocate_line(m_fillbuffer_mav_allocate_line),
					 .RDY_mav_allocate_line(),
					 .RDY_ma_fill_from_memory(),
					 .RDY_ma_from_storebuffer(),
					 .mv_release_info(m_fillbuffer_mv_release_info),
					 .RDY_mv_release_info(),
					 .RDY_ma_perform_release(),
					 .mav_polling_response(m_fillbuffer_mav_polling_response),
					 .RDY_mav_polling_response());

  // submodule m_storebuffer
  mkstorebuffer #(.id(id)) m_storebuffer(.CLK(CLK),
					 .RST_N(RST_N),
					 .ma_allocate_entry_address(m_storebuffer_ma_allocate_entry_address),
					 .ma_allocate_entry_atomic(m_storebuffer_ma_allocate_entry_atomic),
					 .ma_allocate_entry_atomic_op(m_storebuffer_ma_allocate_entry_atomic_op),
					 .ma_allocate_entry_data(m_storebuffer_ma_allocate_entry_data),
					 .ma_allocate_entry_epochs(m_storebuffer_ma_allocate_entry_epochs),
					 .ma_allocate_entry_fbindex(m_storebuffer_ma_allocate_entry_fbindex),
					 .ma_allocate_entry_io(m_storebuffer_ma_allocate_entry_io),
					 .ma_allocate_entry_read_data(m_storebuffer_ma_allocate_entry_read_data),
					 .ma_allocate_entry_size(m_storebuffer_ma_allocate_entry_size),
					 .mav_check_sb_hit_phyaddr(m_storebuffer_mav_check_sb_hit_phyaddr),
					 .EN_mav_check_sb_hit(m_storebuffer_EN_mav_check_sb_hit),
					 .EN_ma_allocate_entry(m_storebuffer_EN_ma_allocate_entry),
					 .EN_mav_store_to_commit(m_storebuffer_EN_mav_store_to_commit),
					 .mav_check_sb_hit(m_storebuffer_mav_check_sb_hit),
					 .RDY_mav_check_sb_hit(),
					 .RDY_ma_allocate_entry(m_storebuffer_RDY_ma_allocate_entry),
					 .mav_store_to_commit(m_storebuffer_mav_store_to_commit),
					 .RDY_mav_store_to_commit(m_storebuffer_RDY_mav_store_to_commit),
					 .mv_sb_full(m_storebuffer_mv_sb_full),
					 .RDY_mv_sb_full(),
					 .mv_sb_empty(m_storebuffer_mv_sb_empty),
					 .RDY_mv_sb_empty(),
					 .mv_cacheable_store(m_storebuffer_mv_cacheable_store),
					 .RDY_mv_cacheable_store(),
					 .mv_sb_busy(m_storebuffer_mv_sb_busy),
					 .RDY_mv_sb_busy());

  // submodule m_tag
  mkdcache_tag #(.id(id)) m_tag(.CLK(CLK),
				.RST_N(RST_N),
				.ma_request_address(m_tag_ma_request_address),
				.ma_request_index(m_tag_ma_request_index),
				.ma_request_read_write(m_tag_ma_request_read_write),
				.ma_request_way(m_tag_ma_request_way),
				.mv_read_response_address_in(m_tag_mv_read_response_address_in),
				.mv_read_response_wayselect(m_tag_mv_read_response_wayselect),
				.EN_ma_request(m_tag_EN_ma_request),
				.RDY_ma_request(),
				.mv_read_response(m_tag_mv_read_response),
				.RDY_mv_read_response());

  // rule RL_rl_deq_write_resp
  assign CAN_FIRE_RL_rl_deq_write_resp =
	     ff_core_request_EMPTY_N && rg_fence_pending &&
	     ff_core_request_D_OUT[76] ;
  assign WILL_FIRE_RL_rl_deq_write_resp = CAN_FIRE_RL_rl_deq_write_resp ;

  // rule RL_rl_deq_write_response
  assign CAN_FIRE_RL_rl_deq_write_response =
	     ff_write_mem_response_rv_port1__read[1] ;
  assign WILL_FIRE_RL_rl_deq_write_response =
	     CAN_FIRE_RL_rl_deq_write_response ;

  // rule RL_rl_ram_check
  assign CAN_FIRE_RL_rl_ram_check =
	     ff_from_tlb_rv_port1__read[40] && ff_core_request_EMPTY_N &&
	     EN_ma_curr_priv &&
	     EN_ma_cache_enable &&
	     NOT_ff_core_request_first__1_BIT_76_2_20_AND_N_ETC___d236 ;
  assign WILL_FIRE_RL_rl_ram_check = CAN_FIRE_RL_rl_ram_check ;

  // rule RL_rl_fillbuffer_check
  assign CAN_FIRE_RL_rl_fillbuffer_check =
	     ff_from_tlb_rv_port1__read[40] && ff_core_request_EMPTY_N &&
	     EN_ma_cache_enable &&
	     !ff_core_request_D_OUT[76] &&
	     !m_fillbuffer_mv_fbfull &&
	     !m_storebuffer_mv_sb_busy ;
  assign WILL_FIRE_RL_rl_fillbuffer_check = CAN_FIRE_RL_rl_fillbuffer_check ;

  // rule RL_rl_fill_from_memory
  assign CAN_FIRE_RL_rl_fill_from_memory =
	     ff_read_mem_response_rv_port1__read[66] &&
	     ff_pending_req_EMPTY_N &&
	     !ff_pending_req_D_OUT[0] ;
  assign WILL_FIRE_RL_rl_fill_from_memory = CAN_FIRE_RL_rl_fill_from_memory ;

  // rule RL_rl_send_memory_request
  assign CAN_FIRE_RL_rl_send_memory_request =
	     ff_from_tlb_rv_port1__read[40] && ff_core_request_EMPTY_N &&
	     EN_ma_cache_enable &&
	     ff_read_mem_request_FULL_N &&
	     wr_ram_state_whas__73_AND_wr_ram_state_wget__7_ETC___d1419 &&
	     !wr_fault_whas &&
	     !rg_handling_miss &&
	     !ff_core_request_D_OUT[76] &&
	     ff_pending_req_FULL_N ;
  assign WILL_FIRE_RL_rl_send_memory_request =
	     CAN_FIRE_RL_rl_send_memory_request ;

  // rule RL_rl_capture_io_response
  assign CAN_FIRE_RL_rl_capture_io_response =
	     ff_read_mem_response_rv_port1__read[66] &&
	     ff_core_request_EMPTY_N &&
	     ff_pending_req_EMPTY_N &&
	     ff_pending_req_D_OUT[0] ;
  assign WILL_FIRE_RL_rl_capture_io_response =
	     CAN_FIRE_RL_rl_capture_io_response ;

  // rule RL_rl_fence_operation
  assign CAN_FIRE_RL_rl_fence_operation =
	     ff_core_request_EMPTY_N && ff_write_mem_request_FULL_N &&
	     !ff_core_response_rv[72] &&
	     ff_core_request_D_OUT[76] &&
	     rg_fence_stall &&
	     m_fillbuffer_mv_fbempty &&
	     m_storebuffer_mv_sb_empty &&
	     !rg_fence_pending &&
	     !rg_performing_replay ;
  assign WILL_FIRE_RL_rl_fence_operation =
	     CAN_FIRE_RL_rl_fence_operation && !EN_ma_perform_store ;

  // rule RL_rl_response_to_core
  assign CAN_FIRE_RL_rl_response_to_core =
	     ff_from_tlb_rv_port1__read[40] && ff_core_request_EMPTY_N &&
	     NOT_ff_hold_request_rv_port0__read__52_BIT_141_ETC___d462 &&
	     NOT_ff_core_request_first__1_BIT_76_2_20_AND_w_ETC___d483 ;
  assign WILL_FIRE_RL_rl_response_to_core = CAN_FIRE_RL_rl_response_to_core ;

  // rule RL_rl_perform_replay
  assign CAN_FIRE_RL_rl_perform_replay = rg_performing_replay ;
  assign WILL_FIRE_RL_rl_perform_replay = rg_performing_replay ;

  // rule RL_rl_release_from_fillbuffer
  assign CAN_FIRE_RL_rl_release_from_fillbuffer =
	     ff_write_mem_request_FULL_N &&
	     m_fillbuffer_mv_fbfull__28_OR_rg_fence_stall_3_ETC___d1529 &&
	     !rg_performing_replay ;
  assign WILL_FIRE_RL_rl_release_from_fillbuffer =
	     CAN_FIRE_RL_rl_release_from_fillbuffer && !EN_ma_perform_store &&
	     !EN_put_core_req_put ;

  // rule __me_check_4
  assign CAN_FIRE___me_check_4 = 1'b1 ;
  assign WILL_FIRE___me_check_4 = 1'b1 ;

  // rule RL_rg_release_readphase__dreg_update
  assign CAN_FIRE_RL_rg_release_readphase__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_release_readphase__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_ff_core_response_rv_port0__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_fence_operation &&
	     (rg_fence_way == 2'd3 && _theResult____h21336 == 7'd64 ||
	      !rg_globaldirty) ;
  assign MUX_ff_write_mem_request_enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_fence_operation &&
	     SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d173 &&
	     SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d106 ;
  assign MUX_ff_write_mem_request_enq_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] &&
	     rg_release_readphase ;
  assign MUX_ff_write_mem_request_enq_1__SEL_3 =
	     EN_ma_perform_store &&
	     m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992 &&
	     m_storebuffer_mav_store_to_commit[2] ;
  assign MUX_m_data_ma_request_1__SEL_1 =
	     EN_put_core_req_put && ma_cache_enable_c ;
  assign MUX_m_data_ma_request_1__SEL_2 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] ;
  assign MUX_m_fillbuffer_mav_allocate_line_1__SEL_1 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_m_fillbuffer_mav_allocate_line_1__SEL_2 =
	     WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386 ;
  assign MUX_rg_globaldirty_write_1__SEL_2 =
	     EN_ma_perform_store &&
	     m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992 &&
	     !m_storebuffer_mav_store_to_commit[2] ;
  assign MUX_rg_performing_replay_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     NOT_m_fillbuffer_mv_release_info__94_BIT_1_633_ETC___d1811 ;
  assign MUX_v_reg_dirty_0_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1668 ;
  assign MUX_v_reg_dirty_0_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd0 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_1_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1671 ;
  assign MUX_v_reg_dirty_1_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd1 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_10_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1689 ;
  assign MUX_v_reg_dirty_10_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd10 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_11_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1691 ;
  assign MUX_v_reg_dirty_11_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd11 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_12_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1693 ;
  assign MUX_v_reg_dirty_12_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd12 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_13_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1695 ;
  assign MUX_v_reg_dirty_13_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd13 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_14_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1697 ;
  assign MUX_v_reg_dirty_14_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd14 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_15_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1699 ;
  assign MUX_v_reg_dirty_15_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd15 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_16_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1701 ;
  assign MUX_v_reg_dirty_16_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd16 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_17_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1703 ;
  assign MUX_v_reg_dirty_17_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd17 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_18_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1705 ;
  assign MUX_v_reg_dirty_18_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd18 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_19_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1707 ;
  assign MUX_v_reg_dirty_19_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd19 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_2_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1673 ;
  assign MUX_v_reg_dirty_2_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd2 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_20_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1709 ;
  assign MUX_v_reg_dirty_20_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd20 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_21_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1711 ;
  assign MUX_v_reg_dirty_21_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd21 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_22_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1713 ;
  assign MUX_v_reg_dirty_22_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd22 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_23_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1715 ;
  assign MUX_v_reg_dirty_23_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd23 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_24_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1717 ;
  assign MUX_v_reg_dirty_24_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd24 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_25_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1719 ;
  assign MUX_v_reg_dirty_25_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd25 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_26_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1721 ;
  assign MUX_v_reg_dirty_26_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd26 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_27_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1723 ;
  assign MUX_v_reg_dirty_27_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd27 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_28_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1725 ;
  assign MUX_v_reg_dirty_28_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd28 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_29_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1727 ;
  assign MUX_v_reg_dirty_29_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd29 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_3_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1675 ;
  assign MUX_v_reg_dirty_3_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd3 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_30_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1729 ;
  assign MUX_v_reg_dirty_30_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd30 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_31_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1731 ;
  assign MUX_v_reg_dirty_31_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd31 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_32_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1733 ;
  assign MUX_v_reg_dirty_32_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd32 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_33_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1735 ;
  assign MUX_v_reg_dirty_33_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd33 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_34_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1737 ;
  assign MUX_v_reg_dirty_34_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd34 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_35_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1739 ;
  assign MUX_v_reg_dirty_35_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd35 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_36_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1741 ;
  assign MUX_v_reg_dirty_36_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd36 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_37_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1743 ;
  assign MUX_v_reg_dirty_37_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd37 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_38_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1745 ;
  assign MUX_v_reg_dirty_38_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd38 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_39_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1747 ;
  assign MUX_v_reg_dirty_39_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd39 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_4_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1677 ;
  assign MUX_v_reg_dirty_4_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd4 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_40_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1749 ;
  assign MUX_v_reg_dirty_40_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd40 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_41_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1751 ;
  assign MUX_v_reg_dirty_41_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd41 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_42_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1753 ;
  assign MUX_v_reg_dirty_42_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd42 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_43_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1755 ;
  assign MUX_v_reg_dirty_43_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd43 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_44_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1757 ;
  assign MUX_v_reg_dirty_44_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd44 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_45_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1759 ;
  assign MUX_v_reg_dirty_45_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd45 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_46_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1761 ;
  assign MUX_v_reg_dirty_46_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd46 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_47_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1763 ;
  assign MUX_v_reg_dirty_47_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd47 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_48_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1765 ;
  assign MUX_v_reg_dirty_48_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd48 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_49_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1767 ;
  assign MUX_v_reg_dirty_49_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd49 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_5_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1679 ;
  assign MUX_v_reg_dirty_5_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd5 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_50_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1769 ;
  assign MUX_v_reg_dirty_50_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd50 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_51_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1771 ;
  assign MUX_v_reg_dirty_51_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd51 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_52_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1773 ;
  assign MUX_v_reg_dirty_52_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd52 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_53_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1775 ;
  assign MUX_v_reg_dirty_53_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd53 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_54_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1777 ;
  assign MUX_v_reg_dirty_54_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd54 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_55_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1779 ;
  assign MUX_v_reg_dirty_55_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd55 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_56_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1781 ;
  assign MUX_v_reg_dirty_56_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd56 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_57_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1783 ;
  assign MUX_v_reg_dirty_57_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd57 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_58_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1785 ;
  assign MUX_v_reg_dirty_58_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd58 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_59_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1787 ;
  assign MUX_v_reg_dirty_59_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd59 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_6_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1681 ;
  assign MUX_v_reg_dirty_6_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd6 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_60_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1789 ;
  assign MUX_v_reg_dirty_60_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd60 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_61_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1791 ;
  assign MUX_v_reg_dirty_61_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd61 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_62_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1793 ;
  assign MUX_v_reg_dirty_62_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd62 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_63_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1795 ;
  assign MUX_v_reg_dirty_63_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd63 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_7_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1683 ;
  assign MUX_v_reg_dirty_7_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd7 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_8_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1685 ;
  assign MUX_v_reg_dirty_8_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd8 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_v_reg_dirty_9_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1687 ;
  assign MUX_v_reg_dirty_9_write_1__SEL_2 =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd9 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign MUX_m_data_mv_read_response_2__VAL_2 = 4'd1 << rg_fence_way ;
  assign MUX_ff_core_response_rv_port0__write_1__VAL_1 =
	     { 1'd1,
	       64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	       1'd0,
	       ff_core_request_D_OUT[81:75] } ;
  assign MUX_ff_core_response_rv_port0__write_1__VAL_2 =
	     { 1'd1,
	       lv_response_word__h38277,
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d557,
	       lv_response_cause__h38279,
	       lv_response_epochs__h38280 } ;
  assign MUX_ff_write_mem_request_enq_1__VAL_1 =
	     { final_address__h16755,
	       m_data_mv_read_response[575:64],
	       12'd118 } ;
  assign MUX_ff_write_mem_request_enq_1__VAL_2 =
	     { lv_evict_address__h106549,
	       m_data_mv_read_response[575:64],
	       12'd118 } ;
  assign MUX_ff_write_mem_request_enq_1__VAL_3 =
	     { m_storebuffer_mav_store_to_commit[166:135],
	       x_data__h121620,
	       8'd0,
	       x_burst_size__h121622,
	       1'd1 } ;
  assign MUX_m_data_ma_request_1__VAL_2 =
	     !SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	     rg_release_readphase ;
  assign MUX_m_fillbuffer_mav_allocate_line_4__VAL_1 = bs__h94492[i__h94493] ;
  assign MUX_replacement_v_count_1_write_1__VAL_2 =
	     SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 -
	     2'd1 ;
  assign MUX_v_reg_dirty_0_write_1__VAL_1 =
	     m_fillbuffer_mv_release_info[0] ?
	       dirty__h103315 | wayselect__h106742 :
	       dirty__h103315 & y__h111085 ;
  assign MUX_v_reg_dirty_0_write_1__VAL_2 = bs__h94492 & y__h95353 ;
  assign MUX_v_reg_valid_0_write_1__VAL_1 =
	     valid__h103314 | wayselect__h106742 ;
  assign MUX_v_reg_valid_0_write_1__VAL_2 =
	     SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 &
	     y__h95353 ;

  // inlined wires
  assign rg_release_readphase_1_whas =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] &&
	     SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 &&
	     !rg_release_readphase ;
  assign wr_fault_whas =
	     WILL_FIRE_RL_rl_ram_check &&
	     (fn_pmp_lookup___d292[6] || ff_from_tlb_rv_port1__read[7] ||
	      ff_from_tlb_rv_port1__read[0]) ;
  assign wr_ram_state_wget =
	     (lv_hitmask__h32238 != 4'd0 && ma_cache_enable_c) ? 2'd1 : 2'd0 ;
  assign wr_ram_state_whas =
	     WILL_FIRE_RL_rl_ram_check && !fn_pmp_lookup___d292[6] &&
	     !ff_from_tlb_rv_port1__read[7] &&
	     !ff_from_tlb_rv_port1__read[0] ;
  assign wr_ram_response_wget =
	     { response_word__h32519,
	       fn_pmp_lookup___d292[6] || ff_from_tlb_rv_port1__read[7] ||
	       ff_from_tlb_rv_port1__read[0],
	       lv_response_cause__h32541,
	       ff_core_request_D_OUT[75] } ;
  assign wr_fb_state_wget =
	     ((!ma_cache_enable_c ||
	       ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386) &&
	      ff_core_request_D_OUT[74:73] != 2'd0) ?
	       2'd1 :
	       (m_fillbuffer_mav_polling_response[1] ?
		  (m_fillbuffer_mav_polling_response[0] ? 2'd1 : 2'd2) :
		  2'd0) ;
  assign wr_fb_response_wget =
	     { lv_response_word__h35009,
	       m_fillbuffer_mav_polling_response[74],
	       IF_ff_core_request_first__1_BITS_74_TO_73_79_E_ETC___d299,
	       ff_core_request_D_OUT[75] } ;
  assign wr_nc_response_wget =
	     { response_word__h102810,
	       ff_read_mem_response_rv_port1__read[0],
	       IF_ff_core_request_first__1_BITS_74_TO_73_79_E_ETC___d299,
	       ff_core_request_D_OUT[75] } ;
  assign wr_total_read_access_whas =
	     EN_put_core_req_put && put_core_req_put[74:73] == 2'd0 ;
  assign wr_total_write_access_whas =
	     EN_put_core_req_put && put_core_req_put[74:73] == 2'd1 ;
  assign wr_total_atomic_access_whas =
	     EN_put_core_req_put && put_core_req_put[74:73] == 2'd2 ;
  assign wr_total_io_reads_whas =
	     WILL_FIRE_RL_rl_send_memory_request &&
	     (!ma_cache_enable_c ||
	      ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386) ;
  assign wr_total_fb_releases_whas =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign wr_total_atomic_fb_hits_whas =
	     WILL_FIRE_RL_rl_response_to_core &&
	     wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d530 ;
  assign wr_total_read_fb_hits_whas =
	     WILL_FIRE_RL_rl_response_to_core &&
	     wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d524 ;
  assign wr_total_write_fb_hits_whas =
	     WILL_FIRE_RL_rl_response_to_core &&
	     wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d527 ;
  assign _mav_allocate_line_RL_rl_send_memory_request_EN_m_fillbuffer_wget =
	     ma_cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386 ;
  assign _wset_RL_rl_send_memory_request_EN_wr_total_io_reads_wget =
	     !ma_cache_enable_c ||
	     ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386 ;
  assign ff_core_response_rv_EN_port0__write =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     !ff_from_tlb_rv_port1__read[0] &&
	     !ff_core_request_D_OUT[0] ;
  assign ff_core_response_rv_port0__write_1 =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       MUX_ff_core_response_rv_port0__write_1__VAL_1 :
	       MUX_ff_core_response_rv_port0__write_1__VAL_2 ;
  assign ff_core_response_rv_port1__read =
	     ff_core_response_rv_EN_port0__write ?
	       ff_core_response_rv_port0__write_1 :
	       ff_core_response_rv ;
  assign ff_core_response_rv_port1__write_1 =
	     { 1'd0,
	       72'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_core_response_rv_port2__read =
	     EN_get_core_resp_get ?
	       ff_core_response_rv_port1__write_1 :
	       ff_core_response_rv_port1__read ;
  assign ff_ptw_response_rv_EN_port0__write =
	     WILL_FIRE_RL_rl_response_to_core &&
	     !ff_from_tlb_rv_port1__read[0] &&
	     ff_core_request_D_OUT[0] ;
  assign ff_ptw_response_rv_port1__read =
	     ff_ptw_response_rv_EN_port0__write ?
	       MUX_ff_core_response_rv_port0__write_1__VAL_2 :
	       ff_ptw_response_rv ;
  assign ff_ptw_response_rv_port2__read =
	     EN_get_ptw_resp_get ?
	       ff_core_response_rv_port1__write_1 :
	       ff_ptw_response_rv_port1__read ;
  assign ff_read_mem_response_rv_port0__write_1 =
	     { 1'd1, put_read_mem_resp_put } ;
  assign ff_read_mem_response_rv_port1__read =
	     EN_put_read_mem_resp_put ?
	       ff_read_mem_response_rv_port0__write_1 :
	       ff_read_mem_response_rv ;
  assign ff_read_mem_response_rv_EN_port1__write =
	     WILL_FIRE_RL_rl_capture_io_response ||
	     WILL_FIRE_RL_rl_fill_from_memory ;
  assign ff_read_mem_response_rv_port1__write_1 =
	     { 1'd0,
	       66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_read_mem_response_rv_port2__read =
	     ff_read_mem_response_rv_EN_port1__write ?
	       ff_read_mem_response_rv_port1__write_1 :
	       ff_read_mem_response_rv_port1__read ;
  assign ff_write_mem_response_rv_port0__write_1 =
	     { 1'd1, put_write_mem_resp_put } ;
  assign ff_write_mem_response_rv_port1__read =
	     EN_put_write_mem_resp_put ?
	       ff_write_mem_response_rv_port0__write_1 :
	       ff_write_mem_response_rv ;
  assign ff_write_mem_response_rv_port1__write_1 =
	     { 1'd0, 1'bx /* unspecified value */  } ;
  assign ff_write_mem_response_rv_port2__read =
	     ff_write_mem_response_rv_port1__read[1] ?
	       ff_write_mem_response_rv_port1__write_1 :
	       ff_write_mem_response_rv_port1__read ;
  assign ff_hold_request_rv_EN_port0__write =
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[0] ;
  assign ff_hold_request_rv_port0__write_1 = { 1'd1, ff_core_request_D_OUT } ;
  assign ff_hold_request_rv_port1__read =
	     ff_hold_request_rv_EN_port0__write ?
	       ff_hold_request_rv_port0__write_1 :
	       ff_hold_request_rv ;
  assign ff_hold_request_rv_port1__write_1 =
	     { 1'd0,
	       141'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_hold_request_rv_port2__read =
	     EN_get_hold_req_get ?
	       ff_hold_request_rv_port1__write_1 :
	       ff_hold_request_rv_port1__read ;
  assign ff_from_tlb_rv_port0__write_1 = { 1'd1, put_pa_from_tlb_put } ;
  assign ff_from_tlb_rv_port1__read =
	     EN_put_pa_from_tlb_put ?
	       ff_from_tlb_rv_port0__write_1 :
	       ff_from_tlb_rv ;
  assign ff_from_tlb_rv_port1__write_1 =
	     { 1'd0,
	       40'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign ff_from_tlb_rv_port2__read =
	     CAN_FIRE_RL_rl_response_to_core ?
	       ff_from_tlb_rv_port1__write_1 :
	       ff_from_tlb_rv_port1__read ;

  // register ff_core_response_rv
  assign ff_core_response_rv_D_IN = ff_core_response_rv_port2__read ;
  assign ff_core_response_rv_EN = 1'b1 ;

  // register ff_from_tlb_rv
  assign ff_from_tlb_rv_D_IN = ff_from_tlb_rv_port2__read ;
  assign ff_from_tlb_rv_EN = 1'b1 ;

  // register ff_hold_request_rv
  assign ff_hold_request_rv_D_IN = ff_hold_request_rv_port2__read ;
  assign ff_hold_request_rv_EN = 1'b1 ;

  // register ff_ptw_response_rv
  assign ff_ptw_response_rv_D_IN = ff_ptw_response_rv_port2__read ;
  assign ff_ptw_response_rv_EN = 1'b1 ;

  // register ff_read_mem_response_rv
  assign ff_read_mem_response_rv_D_IN = ff_read_mem_response_rv_port2__read ;
  assign ff_read_mem_response_rv_EN = 1'b1 ;

  // register ff_write_mem_response_rv
  assign ff_write_mem_response_rv_D_IN =
	     ff_write_mem_response_rv_port2__read ;
  assign ff_write_mem_response_rv_EN = 1'b1 ;

  // register replacement_v_count_0
  assign replacement_v_count_0_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_0_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd0 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_1
  assign replacement_v_count_1_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_1_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd1 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_10
  assign replacement_v_count_10_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_10_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd10 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_11
  assign replacement_v_count_11_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_11_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd11 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_12
  assign replacement_v_count_12_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_12_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd12 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_13
  assign replacement_v_count_13_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_13_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd13 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_14
  assign replacement_v_count_14_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_14_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd14 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_15
  assign replacement_v_count_15_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_15_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd15 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_16
  assign replacement_v_count_16_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_16_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd16 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_17
  assign replacement_v_count_17_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_17_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd17 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_18
  assign replacement_v_count_18_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_18_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd18 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_19
  assign replacement_v_count_19_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_19_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd19 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_2
  assign replacement_v_count_2_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_2_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd2 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_20
  assign replacement_v_count_20_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_20_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd20 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_21
  assign replacement_v_count_21_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_21_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd21 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_22
  assign replacement_v_count_22_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_22_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd22 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_23
  assign replacement_v_count_23_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_23_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd23 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_24
  assign replacement_v_count_24_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_24_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd24 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_25
  assign replacement_v_count_25_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_25_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd25 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_26
  assign replacement_v_count_26_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_26_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd26 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_27
  assign replacement_v_count_27_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_27_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd27 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_28
  assign replacement_v_count_28_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_28_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd28 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_29
  assign replacement_v_count_29_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_29_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd29 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_3
  assign replacement_v_count_3_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_3_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd3 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_30
  assign replacement_v_count_30_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_30_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd30 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_31
  assign replacement_v_count_31_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_31_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd31 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_32
  assign replacement_v_count_32_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_32_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd32 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_33
  assign replacement_v_count_33_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_33_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd33 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_34
  assign replacement_v_count_34_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_34_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd34 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_35
  assign replacement_v_count_35_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_35_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd35 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_36
  assign replacement_v_count_36_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_36_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd36 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_37
  assign replacement_v_count_37_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_37_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd37 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_38
  assign replacement_v_count_38_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_38_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd38 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_39
  assign replacement_v_count_39_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_39_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd39 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_4
  assign replacement_v_count_4_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_4_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd4 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_40
  assign replacement_v_count_40_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_40_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd40 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_41
  assign replacement_v_count_41_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_41_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd41 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_42
  assign replacement_v_count_42_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_42_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd42 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_43
  assign replacement_v_count_43_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_43_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd43 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_44
  assign replacement_v_count_44_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_44_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd44 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_45
  assign replacement_v_count_45_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_45_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd45 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_46
  assign replacement_v_count_46_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_46_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd46 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_47
  assign replacement_v_count_47_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_47_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd47 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_48
  assign replacement_v_count_48_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_48_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd48 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_49
  assign replacement_v_count_49_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_49_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd49 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_5
  assign replacement_v_count_5_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_5_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd5 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_50
  assign replacement_v_count_50_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_50_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd50 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_51
  assign replacement_v_count_51_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_51_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd51 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_52
  assign replacement_v_count_52_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_52_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd52 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_53
  assign replacement_v_count_53_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_53_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd53 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_54
  assign replacement_v_count_54_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_54_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd54 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_55
  assign replacement_v_count_55_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_55_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd55 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_56
  assign replacement_v_count_56_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_56_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd56 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_57
  assign replacement_v_count_57_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_57_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd57 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_58
  assign replacement_v_count_58_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_58_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd58 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_59
  assign replacement_v_count_59_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_59_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd59 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_6
  assign replacement_v_count_6_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_6_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd6 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_60
  assign replacement_v_count_60_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_60_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd60 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_61
  assign replacement_v_count_61_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_61_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd61 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_62
  assign replacement_v_count_62_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_62_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd62 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_63
  assign replacement_v_count_63_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_63_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd63 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_7
  assign replacement_v_count_7_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_7_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd7 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_8
  assign replacement_v_count_8_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_8_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd8 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register replacement_v_count_9
  assign replacement_v_count_9_D_IN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ?
	       2'd3 :
	       MUX_replacement_v_count_1_write_1__VAL_2 ;
  assign replacement_v_count_9_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info[13:8] == 6'd9 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 ;

  // register rg_fence_pending
  assign rg_fence_pending_D_IN = 1'd0 ;
  assign rg_fence_pending_EN = CAN_FIRE_RL_rl_deq_write_resp ;

  // register rg_fence_set
  assign rg_fence_set_D_IN =
	     (rg_fence_way == 2'd3 && _theResult____h21336 == 7'd64 ||
	      !rg_globaldirty) ?
	       6'd0 :
	       _theResult____h21336[5:0] ;
  assign rg_fence_set_EN = WILL_FIRE_RL_rl_fence_operation ;

  // register rg_fence_stall
  assign rg_fence_stall_D_IN =
	     !MUX_ff_core_response_rv_port0__write_1__SEL_1 &&
	     put_core_req_put[76] ;
  assign rg_fence_stall_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     EN_put_core_req_put ;

  // register rg_fence_way
  assign rg_fence_way_D_IN =
	     (rg_fence_way == 2'd3 && _theResult____h21336 == 7'd64 ||
	      !rg_globaldirty) ?
	       2'd0 :
	       x__h27336 ;
  assign rg_fence_way_EN = WILL_FIRE_RL_rl_fence_operation ;

  // register rg_globaldirty
  assign rg_globaldirty_D_IN =
	     !MUX_ff_core_response_rv_port0__write_1__SEL_1 ;
  assign rg_globaldirty_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     EN_ma_perform_store &&
	     m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992 &&
	     !m_storebuffer_mav_store_to_commit[2] ;

  // register rg_handling_miss
  assign rg_handling_miss_D_IN = !WILL_FIRE_RL_rl_response_to_core ;
  assign rg_handling_miss_EN =
	     WILL_FIRE_RL_rl_response_to_core ||
	     WILL_FIRE_RL_rl_send_memory_request ;

  // register rg_performing_replay
  assign rg_performing_replay_D_IN = MUX_rg_performing_replay_write_1__SEL_1 ;
  assign rg_performing_replay_EN =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     NOT_m_fillbuffer_mv_release_info__94_BIT_1_633_ETC___d1811 ||
	     rg_performing_replay ;

  // register rg_polling_mode
  assign rg_polling_mode_D_IN =
	     m_fillbuffer_mav_polling_response[1] &&
	     !m_fillbuffer_mav_polling_response[0] ;
  assign rg_polling_mode_EN =
	     WILL_FIRE_RL_rl_fillbuffer_check &&
	     (ma_cache_enable_c &&
	      !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386 ||
	      ff_core_request_D_OUT[74:73] == 2'd0) ;

  // register rg_recent_req
  assign rg_recent_req_D_IN = set_index__h119470 ;
  assign rg_recent_req_EN = EN_put_core_req_put ;

  // register rg_release_readphase
  assign rg_release_readphase_D_IN = rg_release_readphase_1_whas ;
  assign rg_release_readphase_EN = 1'd1 ;

  // register rg_wEpoch
  assign rg_wEpoch_D_IN = 1'b0 ;
  assign rg_wEpoch_EN = 1'b0 ;

  // register v_reg_dirty_0
  always@(MUX_v_reg_dirty_0_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_0_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_0_write_1__SEL_1:
	v_reg_dirty_0_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_0_write_1__SEL_2:
	v_reg_dirty_0_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_0_D_IN = 4'd0;
    default: v_reg_dirty_0_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_0_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd0 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1668 ;

  // register v_reg_dirty_1
  always@(MUX_v_reg_dirty_1_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_1_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_1_write_1__SEL_1:
	v_reg_dirty_1_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_1_write_1__SEL_2:
	v_reg_dirty_1_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_1_D_IN = 4'd0;
    default: v_reg_dirty_1_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_1_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd1 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1671 ;

  // register v_reg_dirty_10
  always@(MUX_v_reg_dirty_10_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_10_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_10_write_1__SEL_1:
	v_reg_dirty_10_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_10_write_1__SEL_2:
	v_reg_dirty_10_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_10_D_IN = 4'd0;
    default: v_reg_dirty_10_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_10_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd10 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1689 ;

  // register v_reg_dirty_11
  always@(MUX_v_reg_dirty_11_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_11_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_11_write_1__SEL_1:
	v_reg_dirty_11_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_11_write_1__SEL_2:
	v_reg_dirty_11_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_11_D_IN = 4'd0;
    default: v_reg_dirty_11_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_11_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd11 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1691 ;

  // register v_reg_dirty_12
  always@(MUX_v_reg_dirty_12_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_12_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_12_write_1__SEL_1:
	v_reg_dirty_12_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_12_write_1__SEL_2:
	v_reg_dirty_12_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_12_D_IN = 4'd0;
    default: v_reg_dirty_12_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_12_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd12 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1693 ;

  // register v_reg_dirty_13
  always@(MUX_v_reg_dirty_13_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_13_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_13_write_1__SEL_1:
	v_reg_dirty_13_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_13_write_1__SEL_2:
	v_reg_dirty_13_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_13_D_IN = 4'd0;
    default: v_reg_dirty_13_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_13_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd13 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1695 ;

  // register v_reg_dirty_14
  always@(MUX_v_reg_dirty_14_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_14_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_14_write_1__SEL_1:
	v_reg_dirty_14_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_14_write_1__SEL_2:
	v_reg_dirty_14_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_14_D_IN = 4'd0;
    default: v_reg_dirty_14_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_14_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd14 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1697 ;

  // register v_reg_dirty_15
  always@(MUX_v_reg_dirty_15_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_15_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_15_write_1__SEL_1:
	v_reg_dirty_15_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_15_write_1__SEL_2:
	v_reg_dirty_15_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_15_D_IN = 4'd0;
    default: v_reg_dirty_15_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_15_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd15 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1699 ;

  // register v_reg_dirty_16
  always@(MUX_v_reg_dirty_16_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_16_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_16_write_1__SEL_1:
	v_reg_dirty_16_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_16_write_1__SEL_2:
	v_reg_dirty_16_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_16_D_IN = 4'd0;
    default: v_reg_dirty_16_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_16_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd16 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1701 ;

  // register v_reg_dirty_17
  always@(MUX_v_reg_dirty_17_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_17_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_17_write_1__SEL_1:
	v_reg_dirty_17_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_17_write_1__SEL_2:
	v_reg_dirty_17_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_17_D_IN = 4'd0;
    default: v_reg_dirty_17_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_17_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd17 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1703 ;

  // register v_reg_dirty_18
  always@(MUX_v_reg_dirty_18_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_18_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_18_write_1__SEL_1:
	v_reg_dirty_18_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_18_write_1__SEL_2:
	v_reg_dirty_18_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_18_D_IN = 4'd0;
    default: v_reg_dirty_18_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_18_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd18 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1705 ;

  // register v_reg_dirty_19
  always@(MUX_v_reg_dirty_19_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_19_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_19_write_1__SEL_1:
	v_reg_dirty_19_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_19_write_1__SEL_2:
	v_reg_dirty_19_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_19_D_IN = 4'd0;
    default: v_reg_dirty_19_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_19_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd19 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1707 ;

  // register v_reg_dirty_2
  always@(MUX_v_reg_dirty_2_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_2_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_2_write_1__SEL_1:
	v_reg_dirty_2_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_2_write_1__SEL_2:
	v_reg_dirty_2_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_2_D_IN = 4'd0;
    default: v_reg_dirty_2_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_2_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd2 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1673 ;

  // register v_reg_dirty_20
  always@(MUX_v_reg_dirty_20_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_20_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_20_write_1__SEL_1:
	v_reg_dirty_20_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_20_write_1__SEL_2:
	v_reg_dirty_20_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_20_D_IN = 4'd0;
    default: v_reg_dirty_20_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_20_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd20 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1709 ;

  // register v_reg_dirty_21
  always@(MUX_v_reg_dirty_21_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_21_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_21_write_1__SEL_1:
	v_reg_dirty_21_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_21_write_1__SEL_2:
	v_reg_dirty_21_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_21_D_IN = 4'd0;
    default: v_reg_dirty_21_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_21_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd21 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1711 ;

  // register v_reg_dirty_22
  always@(MUX_v_reg_dirty_22_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_22_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_22_write_1__SEL_1:
	v_reg_dirty_22_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_22_write_1__SEL_2:
	v_reg_dirty_22_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_22_D_IN = 4'd0;
    default: v_reg_dirty_22_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_22_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd22 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1713 ;

  // register v_reg_dirty_23
  always@(MUX_v_reg_dirty_23_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_23_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_23_write_1__SEL_1:
	v_reg_dirty_23_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_23_write_1__SEL_2:
	v_reg_dirty_23_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_23_D_IN = 4'd0;
    default: v_reg_dirty_23_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_23_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd23 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1715 ;

  // register v_reg_dirty_24
  always@(MUX_v_reg_dirty_24_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_24_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_24_write_1__SEL_1:
	v_reg_dirty_24_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_24_write_1__SEL_2:
	v_reg_dirty_24_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_24_D_IN = 4'd0;
    default: v_reg_dirty_24_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_24_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd24 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1717 ;

  // register v_reg_dirty_25
  always@(MUX_v_reg_dirty_25_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_25_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_25_write_1__SEL_1:
	v_reg_dirty_25_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_25_write_1__SEL_2:
	v_reg_dirty_25_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_25_D_IN = 4'd0;
    default: v_reg_dirty_25_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_25_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd25 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1719 ;

  // register v_reg_dirty_26
  always@(MUX_v_reg_dirty_26_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_26_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_26_write_1__SEL_1:
	v_reg_dirty_26_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_26_write_1__SEL_2:
	v_reg_dirty_26_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_26_D_IN = 4'd0;
    default: v_reg_dirty_26_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_26_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd26 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1721 ;

  // register v_reg_dirty_27
  always@(MUX_v_reg_dirty_27_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_27_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_27_write_1__SEL_1:
	v_reg_dirty_27_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_27_write_1__SEL_2:
	v_reg_dirty_27_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_27_D_IN = 4'd0;
    default: v_reg_dirty_27_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_27_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd27 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1723 ;

  // register v_reg_dirty_28
  always@(MUX_v_reg_dirty_28_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_28_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_28_write_1__SEL_1:
	v_reg_dirty_28_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_28_write_1__SEL_2:
	v_reg_dirty_28_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_28_D_IN = 4'd0;
    default: v_reg_dirty_28_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_28_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd28 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1725 ;

  // register v_reg_dirty_29
  always@(MUX_v_reg_dirty_29_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_29_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_29_write_1__SEL_1:
	v_reg_dirty_29_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_29_write_1__SEL_2:
	v_reg_dirty_29_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_29_D_IN = 4'd0;
    default: v_reg_dirty_29_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_29_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd29 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1727 ;

  // register v_reg_dirty_3
  always@(MUX_v_reg_dirty_3_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_3_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_3_write_1__SEL_1:
	v_reg_dirty_3_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_3_write_1__SEL_2:
	v_reg_dirty_3_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_3_D_IN = 4'd0;
    default: v_reg_dirty_3_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_3_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd3 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1675 ;

  // register v_reg_dirty_30
  always@(MUX_v_reg_dirty_30_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_30_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_30_write_1__SEL_1:
	v_reg_dirty_30_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_30_write_1__SEL_2:
	v_reg_dirty_30_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_30_D_IN = 4'd0;
    default: v_reg_dirty_30_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_30_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd30 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1729 ;

  // register v_reg_dirty_31
  always@(MUX_v_reg_dirty_31_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_31_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_31_write_1__SEL_1:
	v_reg_dirty_31_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_31_write_1__SEL_2:
	v_reg_dirty_31_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_31_D_IN = 4'd0;
    default: v_reg_dirty_31_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_31_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd31 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1731 ;

  // register v_reg_dirty_32
  always@(MUX_v_reg_dirty_32_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_32_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_32_write_1__SEL_1:
	v_reg_dirty_32_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_32_write_1__SEL_2:
	v_reg_dirty_32_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_32_D_IN = 4'd0;
    default: v_reg_dirty_32_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_32_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd32 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1733 ;

  // register v_reg_dirty_33
  always@(MUX_v_reg_dirty_33_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_33_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_33_write_1__SEL_1:
	v_reg_dirty_33_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_33_write_1__SEL_2:
	v_reg_dirty_33_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_33_D_IN = 4'd0;
    default: v_reg_dirty_33_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_33_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd33 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1735 ;

  // register v_reg_dirty_34
  always@(MUX_v_reg_dirty_34_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_34_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_34_write_1__SEL_1:
	v_reg_dirty_34_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_34_write_1__SEL_2:
	v_reg_dirty_34_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_34_D_IN = 4'd0;
    default: v_reg_dirty_34_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_34_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd34 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1737 ;

  // register v_reg_dirty_35
  always@(MUX_v_reg_dirty_35_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_35_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_35_write_1__SEL_1:
	v_reg_dirty_35_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_35_write_1__SEL_2:
	v_reg_dirty_35_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_35_D_IN = 4'd0;
    default: v_reg_dirty_35_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_35_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd35 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1739 ;

  // register v_reg_dirty_36
  always@(MUX_v_reg_dirty_36_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_36_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_36_write_1__SEL_1:
	v_reg_dirty_36_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_36_write_1__SEL_2:
	v_reg_dirty_36_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_36_D_IN = 4'd0;
    default: v_reg_dirty_36_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_36_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd36 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1741 ;

  // register v_reg_dirty_37
  always@(MUX_v_reg_dirty_37_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_37_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_37_write_1__SEL_1:
	v_reg_dirty_37_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_37_write_1__SEL_2:
	v_reg_dirty_37_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_37_D_IN = 4'd0;
    default: v_reg_dirty_37_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_37_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd37 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1743 ;

  // register v_reg_dirty_38
  always@(MUX_v_reg_dirty_38_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_38_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_38_write_1__SEL_1:
	v_reg_dirty_38_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_38_write_1__SEL_2:
	v_reg_dirty_38_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_38_D_IN = 4'd0;
    default: v_reg_dirty_38_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_38_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd38 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1745 ;

  // register v_reg_dirty_39
  always@(MUX_v_reg_dirty_39_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_39_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_39_write_1__SEL_1:
	v_reg_dirty_39_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_39_write_1__SEL_2:
	v_reg_dirty_39_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_39_D_IN = 4'd0;
    default: v_reg_dirty_39_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_39_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd39 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1747 ;

  // register v_reg_dirty_4
  always@(MUX_v_reg_dirty_4_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_4_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_4_write_1__SEL_1:
	v_reg_dirty_4_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_4_write_1__SEL_2:
	v_reg_dirty_4_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_4_D_IN = 4'd0;
    default: v_reg_dirty_4_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_4_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd4 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1677 ;

  // register v_reg_dirty_40
  always@(MUX_v_reg_dirty_40_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_40_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_40_write_1__SEL_1:
	v_reg_dirty_40_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_40_write_1__SEL_2:
	v_reg_dirty_40_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_40_D_IN = 4'd0;
    default: v_reg_dirty_40_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_40_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd40 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1749 ;

  // register v_reg_dirty_41
  always@(MUX_v_reg_dirty_41_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_41_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_41_write_1__SEL_1:
	v_reg_dirty_41_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_41_write_1__SEL_2:
	v_reg_dirty_41_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_41_D_IN = 4'd0;
    default: v_reg_dirty_41_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_41_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd41 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1751 ;

  // register v_reg_dirty_42
  always@(MUX_v_reg_dirty_42_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_42_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_42_write_1__SEL_1:
	v_reg_dirty_42_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_42_write_1__SEL_2:
	v_reg_dirty_42_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_42_D_IN = 4'd0;
    default: v_reg_dirty_42_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_42_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd42 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1753 ;

  // register v_reg_dirty_43
  always@(MUX_v_reg_dirty_43_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_43_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_43_write_1__SEL_1:
	v_reg_dirty_43_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_43_write_1__SEL_2:
	v_reg_dirty_43_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_43_D_IN = 4'd0;
    default: v_reg_dirty_43_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_43_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd43 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1755 ;

  // register v_reg_dirty_44
  always@(MUX_v_reg_dirty_44_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_44_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_44_write_1__SEL_1:
	v_reg_dirty_44_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_44_write_1__SEL_2:
	v_reg_dirty_44_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_44_D_IN = 4'd0;
    default: v_reg_dirty_44_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_44_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd44 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1757 ;

  // register v_reg_dirty_45
  always@(MUX_v_reg_dirty_45_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_45_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_45_write_1__SEL_1:
	v_reg_dirty_45_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_45_write_1__SEL_2:
	v_reg_dirty_45_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_45_D_IN = 4'd0;
    default: v_reg_dirty_45_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_45_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd45 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1759 ;

  // register v_reg_dirty_46
  always@(MUX_v_reg_dirty_46_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_46_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_46_write_1__SEL_1:
	v_reg_dirty_46_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_46_write_1__SEL_2:
	v_reg_dirty_46_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_46_D_IN = 4'd0;
    default: v_reg_dirty_46_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_46_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd46 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1761 ;

  // register v_reg_dirty_47
  always@(MUX_v_reg_dirty_47_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_47_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_47_write_1__SEL_1:
	v_reg_dirty_47_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_47_write_1__SEL_2:
	v_reg_dirty_47_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_47_D_IN = 4'd0;
    default: v_reg_dirty_47_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_47_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd47 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1763 ;

  // register v_reg_dirty_48
  always@(MUX_v_reg_dirty_48_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_48_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_48_write_1__SEL_1:
	v_reg_dirty_48_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_48_write_1__SEL_2:
	v_reg_dirty_48_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_48_D_IN = 4'd0;
    default: v_reg_dirty_48_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_48_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd48 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1765 ;

  // register v_reg_dirty_49
  always@(MUX_v_reg_dirty_49_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_49_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_49_write_1__SEL_1:
	v_reg_dirty_49_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_49_write_1__SEL_2:
	v_reg_dirty_49_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_49_D_IN = 4'd0;
    default: v_reg_dirty_49_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_49_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd49 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1767 ;

  // register v_reg_dirty_5
  always@(MUX_v_reg_dirty_5_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_5_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_5_write_1__SEL_1:
	v_reg_dirty_5_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_5_write_1__SEL_2:
	v_reg_dirty_5_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_5_D_IN = 4'd0;
    default: v_reg_dirty_5_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_5_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd5 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1679 ;

  // register v_reg_dirty_50
  always@(MUX_v_reg_dirty_50_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_50_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_50_write_1__SEL_1:
	v_reg_dirty_50_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_50_write_1__SEL_2:
	v_reg_dirty_50_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_50_D_IN = 4'd0;
    default: v_reg_dirty_50_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_50_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd50 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1769 ;

  // register v_reg_dirty_51
  always@(MUX_v_reg_dirty_51_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_51_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_51_write_1__SEL_1:
	v_reg_dirty_51_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_51_write_1__SEL_2:
	v_reg_dirty_51_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_51_D_IN = 4'd0;
    default: v_reg_dirty_51_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_51_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd51 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1771 ;

  // register v_reg_dirty_52
  always@(MUX_v_reg_dirty_52_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_52_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_52_write_1__SEL_1:
	v_reg_dirty_52_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_52_write_1__SEL_2:
	v_reg_dirty_52_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_52_D_IN = 4'd0;
    default: v_reg_dirty_52_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_52_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd52 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1773 ;

  // register v_reg_dirty_53
  always@(MUX_v_reg_dirty_53_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_53_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_53_write_1__SEL_1:
	v_reg_dirty_53_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_53_write_1__SEL_2:
	v_reg_dirty_53_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_53_D_IN = 4'd0;
    default: v_reg_dirty_53_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_53_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd53 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1775 ;

  // register v_reg_dirty_54
  always@(MUX_v_reg_dirty_54_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_54_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_54_write_1__SEL_1:
	v_reg_dirty_54_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_54_write_1__SEL_2:
	v_reg_dirty_54_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_54_D_IN = 4'd0;
    default: v_reg_dirty_54_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_54_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd54 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1777 ;

  // register v_reg_dirty_55
  always@(MUX_v_reg_dirty_55_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_55_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_55_write_1__SEL_1:
	v_reg_dirty_55_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_55_write_1__SEL_2:
	v_reg_dirty_55_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_55_D_IN = 4'd0;
    default: v_reg_dirty_55_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_55_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd55 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1779 ;

  // register v_reg_dirty_56
  always@(MUX_v_reg_dirty_56_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_56_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_56_write_1__SEL_1:
	v_reg_dirty_56_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_56_write_1__SEL_2:
	v_reg_dirty_56_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_56_D_IN = 4'd0;
    default: v_reg_dirty_56_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_56_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd56 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1781 ;

  // register v_reg_dirty_57
  always@(MUX_v_reg_dirty_57_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_57_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_57_write_1__SEL_1:
	v_reg_dirty_57_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_57_write_1__SEL_2:
	v_reg_dirty_57_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_57_D_IN = 4'd0;
    default: v_reg_dirty_57_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_57_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd57 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1783 ;

  // register v_reg_dirty_58
  always@(MUX_v_reg_dirty_58_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_58_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_58_write_1__SEL_1:
	v_reg_dirty_58_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_58_write_1__SEL_2:
	v_reg_dirty_58_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_58_D_IN = 4'd0;
    default: v_reg_dirty_58_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_58_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd58 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1785 ;

  // register v_reg_dirty_59
  always@(MUX_v_reg_dirty_59_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_59_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_59_write_1__SEL_1:
	v_reg_dirty_59_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_59_write_1__SEL_2:
	v_reg_dirty_59_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_59_D_IN = 4'd0;
    default: v_reg_dirty_59_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_59_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd59 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1787 ;

  // register v_reg_dirty_6
  always@(MUX_v_reg_dirty_6_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_6_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_6_write_1__SEL_1:
	v_reg_dirty_6_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_6_write_1__SEL_2:
	v_reg_dirty_6_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_6_D_IN = 4'd0;
    default: v_reg_dirty_6_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_6_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd6 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1681 ;

  // register v_reg_dirty_60
  always@(MUX_v_reg_dirty_60_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_60_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_60_write_1__SEL_1:
	v_reg_dirty_60_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_60_write_1__SEL_2:
	v_reg_dirty_60_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_60_D_IN = 4'd0;
    default: v_reg_dirty_60_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_60_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd60 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1789 ;

  // register v_reg_dirty_61
  always@(MUX_v_reg_dirty_61_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_61_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_61_write_1__SEL_1:
	v_reg_dirty_61_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_61_write_1__SEL_2:
	v_reg_dirty_61_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_61_D_IN = 4'd0;
    default: v_reg_dirty_61_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_61_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd61 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1791 ;

  // register v_reg_dirty_62
  always@(MUX_v_reg_dirty_62_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_62_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_62_write_1__SEL_1:
	v_reg_dirty_62_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_62_write_1__SEL_2:
	v_reg_dirty_62_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_62_D_IN = 4'd0;
    default: v_reg_dirty_62_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_62_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd62 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1793 ;

  // register v_reg_dirty_63
  always@(MUX_v_reg_dirty_63_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_63_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_63_write_1__SEL_1:
	v_reg_dirty_63_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_63_write_1__SEL_2:
	v_reg_dirty_63_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_63_D_IN = 4'd0;
    default: v_reg_dirty_63_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_63_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd63 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1795 ;

  // register v_reg_dirty_7
  always@(MUX_v_reg_dirty_7_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_7_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_7_write_1__SEL_1:
	v_reg_dirty_7_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_7_write_1__SEL_2:
	v_reg_dirty_7_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_7_D_IN = 4'd0;
    default: v_reg_dirty_7_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_7_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd7 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1683 ;

  // register v_reg_dirty_8
  always@(MUX_v_reg_dirty_8_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_8_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_8_write_1__SEL_1:
	v_reg_dirty_8_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_8_write_1__SEL_2:
	v_reg_dirty_8_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_8_D_IN = 4'd0;
    default: v_reg_dirty_8_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_8_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd8 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1685 ;

  // register v_reg_dirty_9
  always@(MUX_v_reg_dirty_9_write_1__SEL_1 or
	  MUX_v_reg_dirty_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_9_write_1__SEL_2 or
	  MUX_v_reg_dirty_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_9_write_1__SEL_1:
	v_reg_dirty_9_D_IN = MUX_v_reg_dirty_0_write_1__VAL_1;
    MUX_v_reg_dirty_9_write_1__SEL_2:
	v_reg_dirty_9_D_IN = MUX_v_reg_dirty_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_dirty_9_D_IN = 4'd0;
    default: v_reg_dirty_9_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_dirty_9_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd9 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1687 ;

  // register v_reg_valid_0
  always@(MUX_v_reg_dirty_0_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_0_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_0_write_1__SEL_1:
	v_reg_valid_0_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_0_write_1__SEL_2:
	v_reg_valid_0_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_0_D_IN = 4'd0;
    default: v_reg_valid_0_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_0_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd0 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1668 ;

  // register v_reg_valid_1
  always@(MUX_v_reg_dirty_1_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_1_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_1_write_1__SEL_1:
	v_reg_valid_1_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_1_write_1__SEL_2:
	v_reg_valid_1_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_1_D_IN = 4'd0;
    default: v_reg_valid_1_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_1_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd1 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1671 ;

  // register v_reg_valid_10
  always@(MUX_v_reg_dirty_10_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_10_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_10_write_1__SEL_1:
	v_reg_valid_10_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_10_write_1__SEL_2:
	v_reg_valid_10_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_10_D_IN = 4'd0;
    default: v_reg_valid_10_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_10_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd10 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1689 ;

  // register v_reg_valid_11
  always@(MUX_v_reg_dirty_11_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_11_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_11_write_1__SEL_1:
	v_reg_valid_11_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_11_write_1__SEL_2:
	v_reg_valid_11_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_11_D_IN = 4'd0;
    default: v_reg_valid_11_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_11_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd11 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1691 ;

  // register v_reg_valid_12
  always@(MUX_v_reg_dirty_12_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_12_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_12_write_1__SEL_1:
	v_reg_valid_12_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_12_write_1__SEL_2:
	v_reg_valid_12_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_12_D_IN = 4'd0;
    default: v_reg_valid_12_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_12_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd12 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1693 ;

  // register v_reg_valid_13
  always@(MUX_v_reg_dirty_13_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_13_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_13_write_1__SEL_1:
	v_reg_valid_13_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_13_write_1__SEL_2:
	v_reg_valid_13_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_13_D_IN = 4'd0;
    default: v_reg_valid_13_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_13_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd13 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1695 ;

  // register v_reg_valid_14
  always@(MUX_v_reg_dirty_14_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_14_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_14_write_1__SEL_1:
	v_reg_valid_14_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_14_write_1__SEL_2:
	v_reg_valid_14_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_14_D_IN = 4'd0;
    default: v_reg_valid_14_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_14_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd14 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1697 ;

  // register v_reg_valid_15
  always@(MUX_v_reg_dirty_15_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_15_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_15_write_1__SEL_1:
	v_reg_valid_15_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_15_write_1__SEL_2:
	v_reg_valid_15_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_15_D_IN = 4'd0;
    default: v_reg_valid_15_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_15_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd15 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1699 ;

  // register v_reg_valid_16
  always@(MUX_v_reg_dirty_16_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_16_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_16_write_1__SEL_1:
	v_reg_valid_16_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_16_write_1__SEL_2:
	v_reg_valid_16_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_16_D_IN = 4'd0;
    default: v_reg_valid_16_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_16_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd16 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1701 ;

  // register v_reg_valid_17
  always@(MUX_v_reg_dirty_17_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_17_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_17_write_1__SEL_1:
	v_reg_valid_17_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_17_write_1__SEL_2:
	v_reg_valid_17_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_17_D_IN = 4'd0;
    default: v_reg_valid_17_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_17_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd17 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1703 ;

  // register v_reg_valid_18
  always@(MUX_v_reg_dirty_18_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_18_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_18_write_1__SEL_1:
	v_reg_valid_18_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_18_write_1__SEL_2:
	v_reg_valid_18_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_18_D_IN = 4'd0;
    default: v_reg_valid_18_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_18_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd18 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1705 ;

  // register v_reg_valid_19
  always@(MUX_v_reg_dirty_19_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_19_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_19_write_1__SEL_1:
	v_reg_valid_19_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_19_write_1__SEL_2:
	v_reg_valid_19_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_19_D_IN = 4'd0;
    default: v_reg_valid_19_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_19_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd19 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1707 ;

  // register v_reg_valid_2
  always@(MUX_v_reg_dirty_2_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_2_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_2_write_1__SEL_1:
	v_reg_valid_2_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_2_write_1__SEL_2:
	v_reg_valid_2_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_2_D_IN = 4'd0;
    default: v_reg_valid_2_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_2_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd2 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1673 ;

  // register v_reg_valid_20
  always@(MUX_v_reg_dirty_20_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_20_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_20_write_1__SEL_1:
	v_reg_valid_20_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_20_write_1__SEL_2:
	v_reg_valid_20_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_20_D_IN = 4'd0;
    default: v_reg_valid_20_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_20_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd20 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1709 ;

  // register v_reg_valid_21
  always@(MUX_v_reg_dirty_21_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_21_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_21_write_1__SEL_1:
	v_reg_valid_21_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_21_write_1__SEL_2:
	v_reg_valid_21_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_21_D_IN = 4'd0;
    default: v_reg_valid_21_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_21_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd21 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1711 ;

  // register v_reg_valid_22
  always@(MUX_v_reg_dirty_22_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_22_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_22_write_1__SEL_1:
	v_reg_valid_22_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_22_write_1__SEL_2:
	v_reg_valid_22_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_22_D_IN = 4'd0;
    default: v_reg_valid_22_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_22_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd22 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1713 ;

  // register v_reg_valid_23
  always@(MUX_v_reg_dirty_23_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_23_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_23_write_1__SEL_1:
	v_reg_valid_23_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_23_write_1__SEL_2:
	v_reg_valid_23_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_23_D_IN = 4'd0;
    default: v_reg_valid_23_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_23_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd23 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1715 ;

  // register v_reg_valid_24
  always@(MUX_v_reg_dirty_24_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_24_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_24_write_1__SEL_1:
	v_reg_valid_24_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_24_write_1__SEL_2:
	v_reg_valid_24_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_24_D_IN = 4'd0;
    default: v_reg_valid_24_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_24_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd24 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1717 ;

  // register v_reg_valid_25
  always@(MUX_v_reg_dirty_25_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_25_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_25_write_1__SEL_1:
	v_reg_valid_25_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_25_write_1__SEL_2:
	v_reg_valid_25_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_25_D_IN = 4'd0;
    default: v_reg_valid_25_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_25_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd25 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1719 ;

  // register v_reg_valid_26
  always@(MUX_v_reg_dirty_26_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_26_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_26_write_1__SEL_1:
	v_reg_valid_26_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_26_write_1__SEL_2:
	v_reg_valid_26_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_26_D_IN = 4'd0;
    default: v_reg_valid_26_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_26_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd26 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1721 ;

  // register v_reg_valid_27
  always@(MUX_v_reg_dirty_27_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_27_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_27_write_1__SEL_1:
	v_reg_valid_27_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_27_write_1__SEL_2:
	v_reg_valid_27_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_27_D_IN = 4'd0;
    default: v_reg_valid_27_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_27_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd27 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1723 ;

  // register v_reg_valid_28
  always@(MUX_v_reg_dirty_28_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_28_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_28_write_1__SEL_1:
	v_reg_valid_28_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_28_write_1__SEL_2:
	v_reg_valid_28_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_28_D_IN = 4'd0;
    default: v_reg_valid_28_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_28_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd28 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1725 ;

  // register v_reg_valid_29
  always@(MUX_v_reg_dirty_29_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_29_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_29_write_1__SEL_1:
	v_reg_valid_29_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_29_write_1__SEL_2:
	v_reg_valid_29_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_29_D_IN = 4'd0;
    default: v_reg_valid_29_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_29_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd29 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1727 ;

  // register v_reg_valid_3
  always@(MUX_v_reg_dirty_3_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_3_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_3_write_1__SEL_1:
	v_reg_valid_3_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_3_write_1__SEL_2:
	v_reg_valid_3_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_3_D_IN = 4'd0;
    default: v_reg_valid_3_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_3_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd3 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1675 ;

  // register v_reg_valid_30
  always@(MUX_v_reg_dirty_30_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_30_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_30_write_1__SEL_1:
	v_reg_valid_30_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_30_write_1__SEL_2:
	v_reg_valid_30_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_30_D_IN = 4'd0;
    default: v_reg_valid_30_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_30_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd30 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1729 ;

  // register v_reg_valid_31
  always@(MUX_v_reg_dirty_31_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_31_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_31_write_1__SEL_1:
	v_reg_valid_31_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_31_write_1__SEL_2:
	v_reg_valid_31_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_31_D_IN = 4'd0;
    default: v_reg_valid_31_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_31_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd31 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1731 ;

  // register v_reg_valid_32
  always@(MUX_v_reg_dirty_32_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_32_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_32_write_1__SEL_1:
	v_reg_valid_32_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_32_write_1__SEL_2:
	v_reg_valid_32_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_32_D_IN = 4'd0;
    default: v_reg_valid_32_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_32_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd32 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1733 ;

  // register v_reg_valid_33
  always@(MUX_v_reg_dirty_33_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_33_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_33_write_1__SEL_1:
	v_reg_valid_33_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_33_write_1__SEL_2:
	v_reg_valid_33_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_33_D_IN = 4'd0;
    default: v_reg_valid_33_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_33_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd33 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1735 ;

  // register v_reg_valid_34
  always@(MUX_v_reg_dirty_34_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_34_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_34_write_1__SEL_1:
	v_reg_valid_34_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_34_write_1__SEL_2:
	v_reg_valid_34_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_34_D_IN = 4'd0;
    default: v_reg_valid_34_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_34_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd34 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1737 ;

  // register v_reg_valid_35
  always@(MUX_v_reg_dirty_35_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_35_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_35_write_1__SEL_1:
	v_reg_valid_35_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_35_write_1__SEL_2:
	v_reg_valid_35_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_35_D_IN = 4'd0;
    default: v_reg_valid_35_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_35_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd35 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1739 ;

  // register v_reg_valid_36
  always@(MUX_v_reg_dirty_36_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_36_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_36_write_1__SEL_1:
	v_reg_valid_36_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_36_write_1__SEL_2:
	v_reg_valid_36_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_36_D_IN = 4'd0;
    default: v_reg_valid_36_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_36_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd36 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1741 ;

  // register v_reg_valid_37
  always@(MUX_v_reg_dirty_37_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_37_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_37_write_1__SEL_1:
	v_reg_valid_37_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_37_write_1__SEL_2:
	v_reg_valid_37_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_37_D_IN = 4'd0;
    default: v_reg_valid_37_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_37_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd37 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1743 ;

  // register v_reg_valid_38
  always@(MUX_v_reg_dirty_38_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_38_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_38_write_1__SEL_1:
	v_reg_valid_38_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_38_write_1__SEL_2:
	v_reg_valid_38_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_38_D_IN = 4'd0;
    default: v_reg_valid_38_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_38_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd38 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1745 ;

  // register v_reg_valid_39
  always@(MUX_v_reg_dirty_39_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_39_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_39_write_1__SEL_1:
	v_reg_valid_39_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_39_write_1__SEL_2:
	v_reg_valid_39_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_39_D_IN = 4'd0;
    default: v_reg_valid_39_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_39_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd39 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1747 ;

  // register v_reg_valid_4
  always@(MUX_v_reg_dirty_4_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_4_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_4_write_1__SEL_1:
	v_reg_valid_4_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_4_write_1__SEL_2:
	v_reg_valid_4_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_4_D_IN = 4'd0;
    default: v_reg_valid_4_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_4_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd4 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1677 ;

  // register v_reg_valid_40
  always@(MUX_v_reg_dirty_40_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_40_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_40_write_1__SEL_1:
	v_reg_valid_40_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_40_write_1__SEL_2:
	v_reg_valid_40_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_40_D_IN = 4'd0;
    default: v_reg_valid_40_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_40_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd40 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1749 ;

  // register v_reg_valid_41
  always@(MUX_v_reg_dirty_41_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_41_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_41_write_1__SEL_1:
	v_reg_valid_41_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_41_write_1__SEL_2:
	v_reg_valid_41_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_41_D_IN = 4'd0;
    default: v_reg_valid_41_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_41_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd41 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1751 ;

  // register v_reg_valid_42
  always@(MUX_v_reg_dirty_42_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_42_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_42_write_1__SEL_1:
	v_reg_valid_42_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_42_write_1__SEL_2:
	v_reg_valid_42_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_42_D_IN = 4'd0;
    default: v_reg_valid_42_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_42_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd42 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1753 ;

  // register v_reg_valid_43
  always@(MUX_v_reg_dirty_43_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_43_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_43_write_1__SEL_1:
	v_reg_valid_43_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_43_write_1__SEL_2:
	v_reg_valid_43_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_43_D_IN = 4'd0;
    default: v_reg_valid_43_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_43_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd43 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1755 ;

  // register v_reg_valid_44
  always@(MUX_v_reg_dirty_44_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_44_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_44_write_1__SEL_1:
	v_reg_valid_44_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_44_write_1__SEL_2:
	v_reg_valid_44_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_44_D_IN = 4'd0;
    default: v_reg_valid_44_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_44_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd44 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1757 ;

  // register v_reg_valid_45
  always@(MUX_v_reg_dirty_45_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_45_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_45_write_1__SEL_1:
	v_reg_valid_45_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_45_write_1__SEL_2:
	v_reg_valid_45_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_45_D_IN = 4'd0;
    default: v_reg_valid_45_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_45_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd45 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1759 ;

  // register v_reg_valid_46
  always@(MUX_v_reg_dirty_46_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_46_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_46_write_1__SEL_1:
	v_reg_valid_46_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_46_write_1__SEL_2:
	v_reg_valid_46_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_46_D_IN = 4'd0;
    default: v_reg_valid_46_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_46_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd46 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1761 ;

  // register v_reg_valid_47
  always@(MUX_v_reg_dirty_47_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_47_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_47_write_1__SEL_1:
	v_reg_valid_47_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_47_write_1__SEL_2:
	v_reg_valid_47_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_47_D_IN = 4'd0;
    default: v_reg_valid_47_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_47_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd47 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1763 ;

  // register v_reg_valid_48
  always@(MUX_v_reg_dirty_48_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_48_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_48_write_1__SEL_1:
	v_reg_valid_48_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_48_write_1__SEL_2:
	v_reg_valid_48_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_48_D_IN = 4'd0;
    default: v_reg_valid_48_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_48_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd48 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1765 ;

  // register v_reg_valid_49
  always@(MUX_v_reg_dirty_49_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_49_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_49_write_1__SEL_1:
	v_reg_valid_49_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_49_write_1__SEL_2:
	v_reg_valid_49_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_49_D_IN = 4'd0;
    default: v_reg_valid_49_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_49_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd49 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1767 ;

  // register v_reg_valid_5
  always@(MUX_v_reg_dirty_5_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_5_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_5_write_1__SEL_1:
	v_reg_valid_5_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_5_write_1__SEL_2:
	v_reg_valid_5_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_5_D_IN = 4'd0;
    default: v_reg_valid_5_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_5_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd5 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1679 ;

  // register v_reg_valid_50
  always@(MUX_v_reg_dirty_50_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_50_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_50_write_1__SEL_1:
	v_reg_valid_50_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_50_write_1__SEL_2:
	v_reg_valid_50_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_50_D_IN = 4'd0;
    default: v_reg_valid_50_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_50_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd50 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1769 ;

  // register v_reg_valid_51
  always@(MUX_v_reg_dirty_51_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_51_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_51_write_1__SEL_1:
	v_reg_valid_51_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_51_write_1__SEL_2:
	v_reg_valid_51_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_51_D_IN = 4'd0;
    default: v_reg_valid_51_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_51_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd51 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1771 ;

  // register v_reg_valid_52
  always@(MUX_v_reg_dirty_52_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_52_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_52_write_1__SEL_1:
	v_reg_valid_52_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_52_write_1__SEL_2:
	v_reg_valid_52_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_52_D_IN = 4'd0;
    default: v_reg_valid_52_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_52_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd52 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1773 ;

  // register v_reg_valid_53
  always@(MUX_v_reg_dirty_53_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_53_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_53_write_1__SEL_1:
	v_reg_valid_53_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_53_write_1__SEL_2:
	v_reg_valid_53_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_53_D_IN = 4'd0;
    default: v_reg_valid_53_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_53_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd53 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1775 ;

  // register v_reg_valid_54
  always@(MUX_v_reg_dirty_54_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_54_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_54_write_1__SEL_1:
	v_reg_valid_54_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_54_write_1__SEL_2:
	v_reg_valid_54_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_54_D_IN = 4'd0;
    default: v_reg_valid_54_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_54_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd54 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1777 ;

  // register v_reg_valid_55
  always@(MUX_v_reg_dirty_55_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_55_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_55_write_1__SEL_1:
	v_reg_valid_55_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_55_write_1__SEL_2:
	v_reg_valid_55_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_55_D_IN = 4'd0;
    default: v_reg_valid_55_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_55_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd55 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1779 ;

  // register v_reg_valid_56
  always@(MUX_v_reg_dirty_56_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_56_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_56_write_1__SEL_1:
	v_reg_valid_56_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_56_write_1__SEL_2:
	v_reg_valid_56_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_56_D_IN = 4'd0;
    default: v_reg_valid_56_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_56_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd56 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1781 ;

  // register v_reg_valid_57
  always@(MUX_v_reg_dirty_57_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_57_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_57_write_1__SEL_1:
	v_reg_valid_57_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_57_write_1__SEL_2:
	v_reg_valid_57_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_57_D_IN = 4'd0;
    default: v_reg_valid_57_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_57_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd57 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1783 ;

  // register v_reg_valid_58
  always@(MUX_v_reg_dirty_58_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_58_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_58_write_1__SEL_1:
	v_reg_valid_58_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_58_write_1__SEL_2:
	v_reg_valid_58_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_58_D_IN = 4'd0;
    default: v_reg_valid_58_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_58_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd58 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1785 ;

  // register v_reg_valid_59
  always@(MUX_v_reg_dirty_59_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_59_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_59_write_1__SEL_1:
	v_reg_valid_59_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_59_write_1__SEL_2:
	v_reg_valid_59_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_59_D_IN = 4'd0;
    default: v_reg_valid_59_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_59_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd59 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1787 ;

  // register v_reg_valid_6
  always@(MUX_v_reg_dirty_6_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_6_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_6_write_1__SEL_1:
	v_reg_valid_6_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_6_write_1__SEL_2:
	v_reg_valid_6_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_6_D_IN = 4'd0;
    default: v_reg_valid_6_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_6_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd6 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1681 ;

  // register v_reg_valid_60
  always@(MUX_v_reg_dirty_60_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_60_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_60_write_1__SEL_1:
	v_reg_valid_60_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_60_write_1__SEL_2:
	v_reg_valid_60_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_60_D_IN = 4'd0;
    default: v_reg_valid_60_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_60_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd60 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1789 ;

  // register v_reg_valid_61
  always@(MUX_v_reg_dirty_61_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_61_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_61_write_1__SEL_1:
	v_reg_valid_61_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_61_write_1__SEL_2:
	v_reg_valid_61_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_61_D_IN = 4'd0;
    default: v_reg_valid_61_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_61_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd61 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1791 ;

  // register v_reg_valid_62
  always@(MUX_v_reg_dirty_62_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_62_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_62_write_1__SEL_1:
	v_reg_valid_62_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_62_write_1__SEL_2:
	v_reg_valid_62_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_62_D_IN = 4'd0;
    default: v_reg_valid_62_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_62_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd62 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1793 ;

  // register v_reg_valid_63
  always@(MUX_v_reg_dirty_63_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_63_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_63_write_1__SEL_1:
	v_reg_valid_63_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_63_write_1__SEL_2:
	v_reg_valid_63_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_63_D_IN = 4'd0;
    default: v_reg_valid_63_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_63_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd63 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1795 ;

  // register v_reg_valid_7
  always@(MUX_v_reg_dirty_7_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_7_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_7_write_1__SEL_1:
	v_reg_valid_7_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_7_write_1__SEL_2:
	v_reg_valid_7_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_7_D_IN = 4'd0;
    default: v_reg_valid_7_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_7_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd7 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1683 ;

  // register v_reg_valid_8
  always@(MUX_v_reg_dirty_8_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_8_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_8_write_1__SEL_1:
	v_reg_valid_8_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_8_write_1__SEL_2:
	v_reg_valid_8_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_8_D_IN = 4'd0;
    default: v_reg_valid_8_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_8_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd8 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1685 ;

  // register v_reg_valid_9
  always@(MUX_v_reg_dirty_9_write_1__SEL_1 or
	  MUX_v_reg_valid_0_write_1__VAL_1 or
	  MUX_v_reg_dirty_9_write_1__SEL_2 or
	  MUX_v_reg_valid_0_write_1__VAL_2 or
	  MUX_ff_core_response_rv_port0__write_1__SEL_1)
  case (1'b1)
    MUX_v_reg_dirty_9_write_1__SEL_1:
	v_reg_valid_9_D_IN = MUX_v_reg_valid_0_write_1__VAL_1;
    MUX_v_reg_dirty_9_write_1__SEL_2:
	v_reg_valid_9_D_IN = MUX_v_reg_valid_0_write_1__VAL_2;
    MUX_ff_core_response_rv_port0__write_1__SEL_1: v_reg_valid_9_D_IN = 4'd0;
    default: v_reg_valid_9_D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign v_reg_valid_9_EN =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     ff_from_tlb_rv_port1__read[19:14] == 6'd9 &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1687 ;

  // submodule ff_core_request
  assign ff_core_request_D_IN = put_core_req_put ;
  assign ff_core_request_ENQ = EN_put_core_req_put ;
  assign ff_core_request_DEQ =
	     MUX_ff_core_response_rv_port0__write_1__SEL_1 ||
	     WILL_FIRE_RL_rl_response_to_core ;
  assign ff_core_request_CLR = 1'b0 ;

  // submodule ff_pending_req
  assign ff_pending_req_D_IN =
	     { ff_from_tlb_rv_port1__read[13:11],
	       m_fillbuffer_mav_allocate_line,
	       !ma_cache_enable_c ||
	       ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386 } ;
  assign ff_pending_req_ENQ = CAN_FIRE_RL_rl_send_memory_request ;
  assign ff_pending_req_DEQ =
	     WILL_FIRE_RL_rl_fill_from_memory &&
	     ff_read_mem_response_rv_port1__read[1] ||
	     WILL_FIRE_RL_rl_capture_io_response ;
  assign ff_pending_req_CLR = 1'b0 ;

  // submodule ff_read_mem_request
  assign ff_read_mem_request_D_IN =
	     { phyaddr__h101688,
	       x_burst_len__h101716,
	       burst_size__h101684,
	       !ma_cache_enable_c ||
	       ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386 } ;
  assign ff_read_mem_request_ENQ = CAN_FIRE_RL_rl_send_memory_request ;
  assign ff_read_mem_request_DEQ = EN_get_read_mem_req_get ;
  assign ff_read_mem_request_CLR = 1'b0 ;

  // submodule ff_write_mem_request
  always@(MUX_ff_write_mem_request_enq_1__SEL_1 or
	  MUX_ff_write_mem_request_enq_1__VAL_1 or
	  MUX_ff_write_mem_request_enq_1__SEL_2 or
	  MUX_ff_write_mem_request_enq_1__VAL_2 or
	  MUX_ff_write_mem_request_enq_1__SEL_3 or
	  MUX_ff_write_mem_request_enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ff_write_mem_request_enq_1__SEL_1:
	  ff_write_mem_request_D_IN = MUX_ff_write_mem_request_enq_1__VAL_1;
      MUX_ff_write_mem_request_enq_1__SEL_2:
	  ff_write_mem_request_D_IN = MUX_ff_write_mem_request_enq_1__VAL_2;
      MUX_ff_write_mem_request_enq_1__SEL_3:
	  ff_write_mem_request_D_IN = MUX_ff_write_mem_request_enq_1__VAL_3;
      default: ff_write_mem_request_D_IN =
		   556'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign ff_write_mem_request_ENQ =
	     WILL_FIRE_RL_rl_fence_operation &&
	     SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d173 &&
	     SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d106 ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] &&
	     rg_release_readphase ||
	     EN_ma_perform_store &&
	     m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992 &&
	     m_storebuffer_mav_store_to_commit[2] ;
  assign ff_write_mem_request_DEQ = EN_ma_write_mem_req_deq ;
  assign ff_write_mem_request_CLR = 1'b0 ;

  // submodule m_data
  assign m_data_ma_request_banks = 8'd255 ;
  assign m_data_ma_request_dataline = m_fillbuffer_mv_release_info[545:34] ;
  always@(MUX_m_data_ma_request_1__SEL_1 or
	  set_index__h119470 or
	  MUX_m_data_ma_request_1__SEL_2 or
	  m_fillbuffer_mv_release_info or
	  rg_performing_replay or
	  rg_recent_req or
	  WILL_FIRE_RL_rl_fence_operation or _theResult____h21336)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_m_data_ma_request_1__SEL_1:
	  m_data_ma_request_index = set_index__h119470;
      MUX_m_data_ma_request_1__SEL_2:
	  m_data_ma_request_index = m_fillbuffer_mv_release_info[13:8];
      rg_performing_replay: m_data_ma_request_index = rg_recent_req;
      WILL_FIRE_RL_rl_fence_operation:
	  m_data_ma_request_index = _theResult____h21336[5:0];
      default: m_data_ma_request_index = 6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  assign m_data_ma_request_read_write =
	     MUX_m_data_ma_request_1__SEL_2 &&
	     MUX_m_data_ma_request_1__VAL_2 ;
  always@(MUX_m_data_ma_request_1__SEL_1 or
	  MUX_m_data_ma_request_1__SEL_2 or
	  v__h103311 or
	  rg_performing_replay or WILL_FIRE_RL_rl_fence_operation)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_m_data_ma_request_1__SEL_1:
	  m_data_ma_request_way = 2'bxx /* unspecified value */ ;
      MUX_m_data_ma_request_1__SEL_2: m_data_ma_request_way = v__h103311;
      rg_performing_replay:
	  m_data_ma_request_way = 2'bxx /* unspecified value */ ;
      WILL_FIRE_RL_rl_fence_operation:
	  m_data_ma_request_way = 2'bxx /* unspecified value */ ;
      default: m_data_ma_request_way = 2'bxx /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_rl_ram_check or
	  ff_from_tlb_rv_port1__read or
	  WILL_FIRE_RL_rl_fence_operation or
	  WILL_FIRE_RL_rl_release_from_fillbuffer)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_ram_check:
	  m_data_mv_read_response_blocknum =
	      ff_from_tlb_rv_port1__read[13:11];
      WILL_FIRE_RL_rl_fence_operation:
	  m_data_mv_read_response_blocknum = 3'bxxx /* unspecified value */ ;
      WILL_FIRE_RL_rl_release_from_fillbuffer:
	  m_data_mv_read_response_blocknum = 3'bxxx /* unspecified value */ ;
      default: m_data_mv_read_response_blocknum =
		   3'bxxx /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_rl_ram_check or
	  lv_hitmask__h32238 or
	  WILL_FIRE_RL_rl_fence_operation or
	  MUX_m_data_mv_read_response_2__VAL_2 or
	  WILL_FIRE_RL_rl_release_from_fillbuffer or wayselect__h106742)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_ram_check:
	  m_data_mv_read_response_wayselect = lv_hitmask__h32238;
      WILL_FIRE_RL_rl_fence_operation:
	  m_data_mv_read_response_wayselect =
	      MUX_m_data_mv_read_response_2__VAL_2;
      WILL_FIRE_RL_rl_release_from_fillbuffer:
	  m_data_mv_read_response_wayselect = wayselect__h106742;
      default: m_data_mv_read_response_wayselect =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  assign m_data_EN_ma_request =
	     EN_put_core_req_put && ma_cache_enable_c ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] ||
	     rg_performing_replay ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // submodule m_fillbuffer
  assign m_fillbuffer_ma_fill_from_memory_fbindex =
	     ff_pending_req_D_OUT[3:1] ;
  assign m_fillbuffer_ma_fill_from_memory_init_bank =
	     ff_pending_req_D_OUT[6:4] ;
  assign m_fillbuffer_ma_fill_from_memory_mem_resp =
	     ff_read_mem_response_rv_port1__read[65:0] ;
  assign m_fillbuffer_ma_from_storebuffer_address =
	     m_storebuffer_mav_store_to_commit[166:135] ;
  assign m_fillbuffer_ma_from_storebuffer_dataword =
	     m_storebuffer_mav_store_to_commit[134:71] ;
  assign m_fillbuffer_ma_from_storebuffer_fbindex =
	     m_storebuffer_mav_store_to_commit[69:67] ;
  assign m_fillbuffer_ma_from_storebuffer_mask =
	     m_storebuffer_mav_store_to_commit[66:3] ;
  assign m_fillbuffer_mav_allocate_line_address =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_1 ?
	       ff_from_tlb_rv_port1__read[39:8] :
	       phyaddr__h101688 ;
  assign m_fillbuffer_mav_allocate_line_dataline =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_1 ?
	       m_data_mv_read_response[575:64] :
	       512'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  ;
  assign m_fillbuffer_mav_allocate_line_dirty =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_1 ?
	       MUX_m_fillbuffer_mav_allocate_line_4__VAL_1 :
	       1'bx /* unspecified value */  ;
  assign m_fillbuffer_mav_allocate_line_from_ram =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_1 ;
  assign m_fillbuffer_mav_polling_response_address = phyaddr__h31807 ;
  assign m_fillbuffer_mav_polling_response_fbindex =
	     ff_pending_req_D_OUT[3:1] ;
  assign m_fillbuffer_mav_polling_response_fill = ff_pending_req_EMPTY_N ;
  assign m_fillbuffer_EN_mav_allocate_line =
	     WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	     !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386 ||
	     WILL_FIRE_RL_rl_response_to_core &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 ;
  assign m_fillbuffer_EN_ma_fill_from_memory =
	     CAN_FIRE_RL_rl_fill_from_memory ;
  assign m_fillbuffer_EN_ma_from_storebuffer =
	     MUX_rg_globaldirty_write_1__SEL_2 ;
  assign m_fillbuffer_EN_ma_perform_release =
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     (m_fillbuffer_mv_release_info[1] ||
	      !SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_EN_mav_polling_response =
	     CAN_FIRE_RL_rl_fillbuffer_check ;

  // submodule m_storebuffer
  assign m_storebuffer_ma_allocate_entry_address = phyaddr__h31807 ;
  assign m_storebuffer_ma_allocate_entry_atomic =
	     ff_core_request_D_OUT[74:73] == 2'd2 ;
  assign m_storebuffer_ma_allocate_entry_atomic_op =
	     ff_core_request_D_OUT[5:1] ;
  assign m_storebuffer_ma_allocate_entry_data = ff_core_request_D_OUT[69:6] ;
  assign m_storebuffer_ma_allocate_entry_epochs = ff_core_request_D_OUT[75] ;
  assign m_storebuffer_ma_allocate_entry_fbindex =
	     (CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	      !wr_fault_whas) ?
	       x__h35039[2:0] :
	       m_fillbuffer_mav_allocate_line ;
  assign m_storebuffer_ma_allocate_entry_io =
	     _wset_RL_rl_send_memory_request_EN_wr_total_io_reads_wget ;
  assign m_storebuffer_ma_allocate_entry_read_data =
	     lv_response_word__h38277 ;
  assign m_storebuffer_ma_allocate_entry_size = ff_core_request_D_OUT[71:70] ;
  assign m_storebuffer_mav_check_sb_hit_phyaddr = phyaddr__h31807 ;
  assign m_storebuffer_EN_mav_check_sb_hit = CAN_FIRE_RL_rl_response_to_core ;
  assign m_storebuffer_EN_ma_allocate_entry =
	     WILL_FIRE_RL_rl_response_to_core &&
	     NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1395 &&
	     !ff_from_tlb_rv_port1__read[0] ;
  assign m_storebuffer_EN_mav_store_to_commit = EN_ma_perform_store ;

  // submodule m_tag
  assign m_tag_ma_request_address = m_fillbuffer_mv_release_info[33:2] ;
  always@(MUX_m_data_ma_request_1__SEL_1 or
	  set_index__h119470 or
	  MUX_m_data_ma_request_1__SEL_2 or
	  m_fillbuffer_mv_release_info or
	  rg_performing_replay or
	  rg_recent_req or
	  WILL_FIRE_RL_rl_fence_operation or _theResult____h21336)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_m_data_ma_request_1__SEL_1:
	  m_tag_ma_request_index = set_index__h119470;
      MUX_m_data_ma_request_1__SEL_2:
	  m_tag_ma_request_index = m_fillbuffer_mv_release_info[13:8];
      rg_performing_replay: m_tag_ma_request_index = rg_recent_req;
      WILL_FIRE_RL_rl_fence_operation:
	  m_tag_ma_request_index = _theResult____h21336[5:0];
      default: m_tag_ma_request_index = 6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  assign m_tag_ma_request_read_write =
	     MUX_m_data_ma_request_1__SEL_2 &&
	     MUX_m_data_ma_request_1__VAL_2 ;
  always@(MUX_m_data_ma_request_1__SEL_1 or
	  MUX_m_data_ma_request_1__SEL_2 or
	  v__h103311 or
	  rg_performing_replay or WILL_FIRE_RL_rl_fence_operation)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_m_data_ma_request_1__SEL_1:
	  m_tag_ma_request_way = 2'bxx /* unspecified value */ ;
      MUX_m_data_ma_request_1__SEL_2: m_tag_ma_request_way = v__h103311;
      rg_performing_replay:
	  m_tag_ma_request_way = 2'bxx /* unspecified value */ ;
      WILL_FIRE_RL_rl_fence_operation:
	  m_tag_ma_request_way = 2'bxx /* unspecified value */ ;
      default: m_tag_ma_request_way = 2'bxx /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_rl_ram_check or
	  ff_from_tlb_rv_port1__read or
	  WILL_FIRE_RL_rl_fence_operation or
	  WILL_FIRE_RL_rl_release_from_fillbuffer)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_ram_check:
	  m_tag_mv_read_response_address_in =
	      ff_from_tlb_rv_port1__read[39:8];
      WILL_FIRE_RL_rl_fence_operation:
	  m_tag_mv_read_response_address_in =
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
      WILL_FIRE_RL_rl_release_from_fillbuffer:
	  m_tag_mv_read_response_address_in =
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
      default: m_tag_mv_read_response_address_in =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_rl_ram_check or
	  WILL_FIRE_RL_rl_fence_operation or
	  rg_fence_way or
	  WILL_FIRE_RL_rl_release_from_fillbuffer or v__h103311)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_ram_check:
	  m_tag_mv_read_response_wayselect = 2'bxx /* unspecified value */ ;
      WILL_FIRE_RL_rl_fence_operation:
	  m_tag_mv_read_response_wayselect = rg_fence_way;
      WILL_FIRE_RL_rl_release_from_fillbuffer:
	  m_tag_mv_read_response_wayselect = v__h103311;
      default: m_tag_mv_read_response_wayselect =
		   2'bxx /* unspecified value */ ;
    endcase
  end
  assign m_tag_EN_ma_request =
	     EN_put_core_req_put && ma_cache_enable_c ||
	     WILL_FIRE_RL_rl_release_from_fillbuffer &&
	     !m_fillbuffer_mv_release_info[1] ||
	     rg_performing_replay ||
	     WILL_FIRE_RL_rl_fence_operation ;

  // remaining internal signals
  module_fn_pmp_lookup instance_fn_pmp_lookup_0(.fn_pmp_lookup_req({ phyaddr__h31807,
								     pmp_access__h32057 }),
						.fn_pmp_lookup_priv(CASE_ma_curr_priv_c_1_ma_curr_priv_c_3_ma_curr_ETC__q1),
						.fn_pmp_lookup_pmpcfg({ { pmp_cfg_3,
									  pmp_cfg_2 },
									pmp_cfg_1,
									pmp_cfg_0 }),
						.fn_pmp_lookup_pmpaddr({ { pmp_addr_3,
									   pmp_addr_2 },
									 pmp_addr_1,
									 pmp_addr_0 }),
						.fn_pmp_lookup(fn_pmp_lookup___d292));
  assign IF_ff_core_request_first__1_BITS_71_TO_70_106__ETC___d1124 =
	     lv_sign__h37927 & y__h91493 ;
  assign IF_ff_core_request_first__1_BITS_74_TO_73_79_E_ETC___d299 =
	     (ff_core_request_D_OUT[74:73] == 2'd0) ? 6'd5 : 6'd7 ;
  assign NOT_0_CONCAT_m_tag_mv_read_response_ff_from_tl_ETC___d329 =
	     x__h34229 + y__h34230 > 3'd1 ;
  assign NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1812 =
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) &&
	     valid__h103314 == 4'd15 &&
	     (dirty__h103315 == 4'd15 || dirty__h103315 == 4'd0) ;
  assign NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 =
	     ff_core_request_D_OUT[74:73] != 2'd0 && wr_ram_state_whas &&
	     wr_ram_state_wget == 2'd1 &&
	     !wr_fault_whas ;
  assign NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1395 =
	     ff_core_request_D_OUT[74:73] != 2'd0 &&
	     NOT_wr_nc_state_whas__68_371_OR_NOT_wr_nc_stat_ETC___d1376 &&
	     NOT_wr_fb_state_whas__78_377_OR_NOT_wr_fb_stat_ETC___d1382 &&
	     NOT_wr_ram_state_whas__73_383_OR_NOT_wr_ram_st_ETC___d1388 ;
  assign NOT_ff_core_request_first__1_BIT_76_2_20_AND_N_ETC___d236 =
	     !ff_core_request_D_OUT[76] && !rg_handling_miss &&
	     !rg_performing_replay &&
	     !rg_polling_mode &&
	     !m_fillbuffer_mv_fbfull &&
	     !rg_release_readphase &&
	     !m_storebuffer_mv_sb_busy ;
  assign NOT_ff_core_request_first__1_BIT_76_2_20_AND_w_ETC___d483 =
	     !ff_core_request_D_OUT[76] &&
	     (wr_fault_whas__65_AND_wr_fault_wget__66_67_OR__ETC___d477 ||
	      CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1) ;
  assign NOT_ff_core_request_notEmpty__506_507_AND_NOT__ETC___d1517 =
	     !ff_core_request_EMPTY_N && !EN_put_core_req_put &&
	     !m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1515 ;
  assign NOT_ff_hold_request_rv_port0__read__52_BIT_141_ETC___d462 =
	     !ff_hold_request_rv[141] && !ff_ptw_response_rv[72] &&
	     !ff_core_response_rv[72] &&
	     m_storebuffer_RDY_ma_allocate_entry &&
	     EN_ma_cache_enable ;
  assign NOT_m_fillbuffer_mv_release_info__94_BIT_1_633_ETC___d1811 =
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) &&
	     (rg_release_readphase ||
	      m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1515) ;
  assign NOT_wr_fb_state_whas__78_377_OR_NOT_wr_fb_stat_ETC___d1382 =
	     !CAN_FIRE_RL_rl_fillbuffer_check || wr_fb_state_wget != 2'd1 ||
	     wr_fault_whas ||
	     !wr_fb_response_wget[7] ;
  assign NOT_wr_nc_state_whas__68_371_OR_NOT_wr_nc_stat_ETC___d1376 =
	     !CAN_FIRE_RL_rl_capture_io_response || wr_fault_whas ||
	     !wr_nc_response_wget[7] ;
  assign NOT_wr_ram_state_whas__73_383_OR_NOT_wr_ram_st_ETC___d1388 =
	     (!wr_ram_state_whas || wr_ram_state_wget != 2'd1) &&
	     !wr_fault_whas ||
	     !wr_ram_response_wget[7] ;
  assign SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d1632 =
	     dirty__h103315[v__h103311] ;
  assign SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d173 =
	     bs__h18905[rg_fence_way] ;
  assign SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d106 =
	     bs__h16879[rg_fence_way] ;
  assign SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1631 =
	     valid__h103314[v__h103311] ;
  assign SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 =
	     SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1631 &
	     SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d1632 ;
  assign _theResult____h21336 =
	     (rg_fence_way == 2'd3) ?
	       { 1'd0, rg_fence_set } + 7'd1 :
	       { 1'd0, rg_fence_set } ;
  assign b__h36829 =
	     wr_ram_state_whas && wr_ram_state_wget == 2'd1 || wr_fault_whas ;
  assign burst_size__h101684 =
	     (!ma_cache_enable_c ||
	      ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386) ?
	       { 1'd0, ff_core_request_D_OUT[71:70] } :
	       3'd3 ;
  assign ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386 =
	     ff_from_tlb_rv_port1__read[39:8] < 32'h80000000 ;
  assign final_address__h16755 =
	     { m_tag_mv_read_response[31:12], rg_fence_set, 6'd0 } ;
  assign i__h94493 = CAN_FIRE_RL_rl_ram_check ? x__h33662[1:0] : 2'd0 ;
  assign lv_cause__h31809 =
	     (ff_from_tlb_rv_port1__read[7] ||
	      ff_from_tlb_rv_port1__read[0]) ?
	       ff_from_tlb_rv_port1__read[6:1] :
	       IF_ff_core_request_first__1_BITS_74_TO_73_79_E_ETC___d299 ;
  assign lv_evict_address__h106549 =
	     { m_tag_mv_read_response[31:12],
	       m_fillbuffer_mv_release_info[13:8],
	       6'd0 } ;
  assign lv_hitmask__h32238 =
	     m_tag_mv_read_response[35:32] &
	     SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 ;
  assign lv_response_cause__h32541 =
	     (!ff_from_tlb_rv_port1__read[7] &&
	      !ff_from_tlb_rv_port1__read[0] &&
	      fn_pmp_lookup___d292[6]) ?
	       fn_pmp_lookup___d292[5:0] :
	       lv_cause__h31809 ;
  assign lv_response_cause__h38279 =
	     { wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1161 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1163 ||
	       b__h36829 && wr_ram_response_wget[6],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1169 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1171 ||
	       b__h36829 && wr_ram_response_wget[5],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1178 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1180 ||
	       b__h36829 && wr_ram_response_wget[4],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1186 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1188 ||
	       b__h36829 && wr_ram_response_wget[3],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1195 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1197 ||
	       b__h36829 && wr_ram_response_wget[2],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1203 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1205 ||
	       b__h36829 && wr_ram_response_wget[1] } ;
  assign lv_response_epochs__h38280 =
	     wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1212 ||
	     wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1214 ||
	     b__h36829 && wr_ram_response_wget[0] ;
  assign lv_response_word__h35009 =
	     m_fillbuffer_mav_polling_response[73:10] >> x__h32545 ;
  assign lv_response_word__h38277 =
	     wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d557 ?
	       ff_core_request_D_OUT[140:77] :
	       lv_response_word__h38281 ;
  assign lv_response_word__h38281 = x__h86254 | y__h86255 ;
  assign m_fillbuffer_mv_fbfull__28_OR_rg_fence_stall_3_ETC___d1529 =
	     (m_fillbuffer_mv_fbfull || rg_fence_stall ||
	      NOT_ff_core_request_notEmpty__506_507_AND_NOT__ETC___d1517) &&
	     m_storebuffer_mv_sb_empty &&
	     !m_fillbuffer_mv_fbempty &&
	     (!CAN_FIRE_RL_rl_fillbuffer_check ||
	      !(ff_core_request_D_OUT[74:73] != 2'd0)) &&
	     m_fillbuffer_mv_fbhead_valid ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1515 =
	     m_fillbuffer_mv_release_info[13:8] == rg_recent_req ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1668 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd0 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1671 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd1 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1673 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd2 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1675 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd3 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1677 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd4 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1679 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd5 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1681 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd6 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1683 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd7 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1685 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd8 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1687 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd9 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1689 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd10 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1691 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd11 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1693 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd12 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1695 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd13 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1697 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd14 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1699 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd15 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1701 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd16 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1703 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd17 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1705 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd18 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1707 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd19 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1709 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd20 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1711 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd21 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1713 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd22 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1715 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd23 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1717 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd24 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1719 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd25 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1721 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd26 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1723 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd27 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1725 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd28 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1727 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd29 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1729 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd30 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1731 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd31 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1733 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd32 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1735 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd33 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1737 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd34 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1739 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd35 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1741 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd36 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1743 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd37 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1745 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd38 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1747 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd39 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1749 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd40 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1751 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd41 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1753 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd42 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1755 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd43 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1757 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd44 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1759 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd45 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1761 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd46 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1763 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd47 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1765 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd48 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1767 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd49 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1769 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd50 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1771 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd51 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1773 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd52 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1775 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd53 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1777 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd54 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1779 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd55 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1781 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd56 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1783 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd57 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1785 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd58 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1787 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd59 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1789 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd60 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1791 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd61 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1793 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd62 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1795 =
	     m_fillbuffer_mv_release_info[13:8] == 6'd63 &&
	     !m_fillbuffer_mv_release_info[1] &&
	     (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	      rg_release_readphase) ;
  assign m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992 =
	     m_storebuffer_mav_store_to_commit[70] ==
	     ma_perform_store_currepoch ;
  assign phyaddr__h101688 =
	     (!ma_cache_enable_c ||
	      ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386) ?
	       ff_from_tlb_rv_port1__read[39:8] :
	       { ff_from_tlb_rv_port1__read[39:11], 3'd0 } ;
  assign phyaddr__h31807 = ff_from_tlb_rv_port1__read[39:8] ;
  assign pmp_access__h32057 =
	     (ff_core_request_D_OUT[74:73] == 2'd0) ?
	       ff_core_request_D_OUT[74:73] :
	       2'd1 ;
  assign response_word__h102810 =
	     ff_read_mem_response_rv_port1__read[65:2] >> x__h102838 ;
  assign response_word__h32519 = m_data_mv_read_response[63:0] >> x__h32545 ;
  assign set_index__h119470 =
	     put_core_req_put[76] ? 6'd0 : put_core_req_put[88:83] ;
  assign v__h103311 =
	     (valid__h103314 == 4'd15 &&
	      (dirty__h103315 == 4'd15 || dirty__h103315 == 4'd0)) ?
	       SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 :
	       ((valid__h103314 == 4'd15 && dirty__h103315 != 4'd15) ?
		  (dirty__h103315[3] ?
		     (dirty__h103315[2] ?
			(dirty__h103315[1] ?
			   (dirty__h103315[0] ? 2'd3 : 2'd0) :
			   2'd1) :
			2'd2) :
		     2'd3) :
		  (valid__h103314[3] ?
		     (valid__h103314[2] ?
			(valid__h103314[1] ?
			   (valid__h103314[0] ? 2'd3 : 2'd0) :
			   2'd1) :
			2'd2) :
		     2'd3)) ;
  assign wayselect__h106742 = 4'd1 << v__h103311 ;
  assign wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d406 =
	     (ma_cache_enable_c &&
	      !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386 ||
	      ff_core_request_D_OUT[74:73] == 2'd0) &&
	     m_fillbuffer_mav_polling_response[1] ;
  assign wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d417 =
	     (ma_cache_enable_c &&
	      !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386 ||
	      ff_core_request_D_OUT[74:73] == 2'd0) &&
	     m_fillbuffer_mav_polling_response[1] &&
	     m_fillbuffer_mav_polling_response[0] ;
  assign wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d432 =
	     (ma_cache_enable_c &&
	      !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386 ||
	      ff_core_request_D_OUT[74:73] == 2'd0) &&
	     m_fillbuffer_mav_polling_response[1] &&
	     !m_fillbuffer_mav_polling_response[0] ;
  assign wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d443 =
	     (ma_cache_enable_c &&
	      !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386 ||
	      ff_core_request_D_OUT[74:73] == 2'd0) &&
	     !m_fillbuffer_mav_polling_response[1] ;
  assign wr_fault_whas__65_AND_wr_fault_wget__66_67_OR__ETC___d477 =
	     wr_fault_whas || CAN_FIRE_RL_rl_capture_io_response ||
	     wr_ram_state_whas && wr_ram_state_wget == 2'd1 ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1005 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[19] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1013 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[18] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1022 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[17] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1030 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[16] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1039 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[15] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1047 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[14] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1056 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[13] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1064 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[12] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1073 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[11] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1081 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[10] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1090 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[9] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1098 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[8] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1163 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[6] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1171 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[5] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1180 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[4] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1188 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[3] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1197 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[2] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1205 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[1] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1214 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[0] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d524 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     rg_handling_miss &&
	     ff_core_request_D_OUT[74:73] == 2'd0 ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d527 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     rg_handling_miss &&
	     ff_core_request_D_OUT[74:73] == 2'd1 ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d530 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     rg_handling_miss &&
	     ff_core_request_D_OUT[74:73] == 2'd2 ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d550 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[7] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d563 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[71] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d571 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[70] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d580 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[69] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d588 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[68] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d597 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[67] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d605 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[66] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d614 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[65] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d622 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[64] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d631 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[63] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d639 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[62] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d648 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[61] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d656 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[60] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d665 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[59] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d673 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[58] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d682 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[57] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d690 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[56] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d699 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[55] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d707 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[54] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d716 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[53] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d724 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[52] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d733 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[51] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d741 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[50] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d750 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[49] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d758 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[48] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d767 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[47] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d775 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[46] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d784 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[45] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d792 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[44] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d801 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[43] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d809 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[42] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d818 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[41] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d826 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[40] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d835 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[39] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d843 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[38] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d852 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[37] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d860 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[36] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d869 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[35] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d877 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[34] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d886 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[33] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d894 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[32] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d903 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[31] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d911 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[30] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d920 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[29] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d928 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[28] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d937 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[27] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d945 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[26] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d954 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[25] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d962 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[24] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d971 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[23] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d979 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[22] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d988 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[21] ;
  assign wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d996 =
	     CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	     !wr_fault_whas &&
	     wr_fb_response_wget[20] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1003 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[19] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1011 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[18] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1020 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[17] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1028 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[16] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1037 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[15] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1045 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[14] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1054 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[13] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1062 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[12] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1071 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[11] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1079 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[10] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1088 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[9] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1096 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[8] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1161 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[6] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1169 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[5] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1178 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[4] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1186 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[3] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1195 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[2] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1203 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[1] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1212 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[0] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d545 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[7] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d557 =
	     wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d545 ||
	     wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d550 ||
	     b__h36829 && wr_ram_response_wget[7] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d561 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[71] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d569 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[70] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d578 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[69] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d586 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[68] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d595 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[67] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d603 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[66] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d612 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[65] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d620 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[64] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d629 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[63] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d637 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[62] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d646 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[61] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d654 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[60] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d663 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[59] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d671 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[58] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d680 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[57] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d688 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[56] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d697 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[55] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d705 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[54] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d714 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[53] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d722 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[52] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d731 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[51] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d739 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[50] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d748 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[49] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d756 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[48] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d765 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[47] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d773 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[46] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d782 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[45] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d790 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[44] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d799 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[43] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d807 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[42] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d816 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[41] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d824 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[40] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d833 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[39] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d841 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[38] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d850 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[37] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d858 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[36] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d867 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[35] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d875 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[34] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d884 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[33] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d892 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[32] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d901 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[31] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d909 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[30] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d918 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[29] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d926 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[28] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d935 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[27] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d943 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[26] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d952 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[25] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d960 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[24] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d969 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[23] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d977 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[22] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d986 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[21] ;
  assign wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d994 =
	     CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	     wr_nc_response_wget[20] ;
  assign wr_ram_state_whas__73_AND_wr_ram_state_wget__7_ETC___d1419 =
	     wr_ram_state_whas && wr_ram_state_wget == 2'd0 &&
	     CAN_FIRE_RL_rl_fillbuffer_check &&
	     wr_fb_state_wget == 2'd0 &&
	     !m_fillbuffer_mv_fbfull ;
  assign x__h102838 = { ff_core_request_D_OUT[79:77], 3'b0 } ;
  assign x__h27336 = rg_fence_way + 2'd1 ;
  assign x__h32545 = { ff_from_tlb_rv_port1__read[10:8], 3'b0 } ;
  assign x__h33662 =
	     lv_hitmask__h32238[0] ?
	       3'd0 :
	       (lv_hitmask__h32238[1] ?
		  3'd1 :
		  (lv_hitmask__h32238[2] ?
		     3'd2 :
		     (lv_hitmask__h32238[3] ? 3'd3 : 3'd4))) ;
  assign x__h34229 = x__h34241 + y__h34242 ;
  assign x__h34241 = x__h34253 + y__h34254 ;
  assign x__h34253 = { 2'd0, lv_hitmask__h32238[3] } ;
  assign x__h35039 =
	     m_fillbuffer_mav_polling_response[2] ?
	       4'd0 :
	       (m_fillbuffer_mav_polling_response[3] ?
		  4'd1 :
		  (m_fillbuffer_mav_polling_response[4] ?
		     4'd2 :
		     (m_fillbuffer_mav_polling_response[5] ?
			4'd3 :
			(m_fillbuffer_mav_polling_response[6] ?
			   4'd4 :
			   (m_fillbuffer_mav_polling_response[7] ?
			      4'd5 :
			      (m_fillbuffer_mav_polling_response[8] ?
				 4'd6 :
				 (m_fillbuffer_mav_polling_response[9] ?
				    4'd7 :
				    4'd8))))))) ;
  assign x__h36809 = x__h36821 + y__h36822 ;
  assign x__h36821 = { 1'd0, b__h36829 } ;
  assign x__h86254 = x__h86256 & y__h86257 ;
  assign x__h86256 = x__h86269 | y__h86270 ;
  assign x__h86269 =
	     m_storebuffer_mav_check_sb_hit[127:64] &
	     m_storebuffer_mav_check_sb_hit[63:0] ;
  assign x__h86271 = ~m_storebuffer_mav_check_sb_hit[127:64] ;
  assign x__h95337 = 4'd1 << i__h94493 ;
  assign x__read__h3823 =
	     wr_total_io_reads_whas && ff_core_request_D_OUT[74:73] == 2'd0 ;
  assign x__read__h3893 =
	     wr_total_io_reads_whas && ff_core_request_D_OUT[74:73] == 2'd1 ;
  assign x__read__h3963 =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_2 &&
	     ff_core_request_D_OUT[74:73] == 2'd0 ;
  assign x__read__h4033 =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_2 &&
	     ff_core_request_D_OUT[74:73] == 2'd1 ;
  assign x__read__h4103 =
	     MUX_m_fillbuffer_mav_allocate_line_1__SEL_2 &&
	     ff_core_request_D_OUT[74:73] == 2'd2 ;
  assign x_burst_len__h101716 =
	     (!ma_cache_enable_c ||
	      ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386) ?
	       8'd0 :
	       8'd7 ;
  assign x_burst_size__h121622 =
	     { 1'd0, m_storebuffer_mav_store_to_commit[1:0] } ;
  assign x_data__h121620 = {8{m_storebuffer_mav_store_to_commit[134:71]}} ;
  assign y__h111085 = ~wayselect__h106742 ;
  assign y__h34230 = { 2'd0, lv_hitmask__h32238[0] } ;
  assign y__h34242 = { 2'd0, lv_hitmask__h32238[1] } ;
  assign y__h34254 = { 2'd0, lv_hitmask__h32238[2] } ;
  assign y__h36810 =
	     { 1'd0, CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas } ;
  assign y__h36822 =
	     { 1'd0,
	       CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	       !wr_fault_whas } ;
  assign y__h86255 = x__h86370 & y__h86371 ;
  assign y__h86270 = x__h86271 & y__h86272 ;
  assign y__h86272 =
	     { wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d561 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d563 ||
	       b__h36829 && wr_ram_response_wget[71],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d569 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d571 ||
	       b__h36829 && wr_ram_response_wget[70],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d578 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d580 ||
	       b__h36829 && wr_ram_response_wget[69],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d586 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d588 ||
	       b__h36829 && wr_ram_response_wget[68],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d595 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d597 ||
	       b__h36829 && wr_ram_response_wget[67],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d603 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d605 ||
	       b__h36829 && wr_ram_response_wget[66],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d612 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d614 ||
	       b__h36829 && wr_ram_response_wget[65],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d620 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d622 ||
	       b__h36829 && wr_ram_response_wget[64],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d629 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d631 ||
	       b__h36829 && wr_ram_response_wget[63],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d637 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d639 ||
	       b__h36829 && wr_ram_response_wget[62],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d646 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d648 ||
	       b__h36829 && wr_ram_response_wget[61],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d654 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d656 ||
	       b__h36829 && wr_ram_response_wget[60],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d663 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d665 ||
	       b__h36829 && wr_ram_response_wget[59],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d671 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d673 ||
	       b__h36829 && wr_ram_response_wget[58],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d680 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d682 ||
	       b__h36829 && wr_ram_response_wget[57],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d688 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d690 ||
	       b__h36829 && wr_ram_response_wget[56],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d697 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d699 ||
	       b__h36829 && wr_ram_response_wget[55],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d705 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d707 ||
	       b__h36829 && wr_ram_response_wget[54],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d714 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d716 ||
	       b__h36829 && wr_ram_response_wget[53],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d722 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d724 ||
	       b__h36829 && wr_ram_response_wget[52],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d731 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d733 ||
	       b__h36829 && wr_ram_response_wget[51],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d739 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d741 ||
	       b__h36829 && wr_ram_response_wget[50],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d748 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d750 ||
	       b__h36829 && wr_ram_response_wget[49],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d756 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d758 ||
	       b__h36829 && wr_ram_response_wget[48],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d765 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d767 ||
	       b__h36829 && wr_ram_response_wget[47],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d773 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d775 ||
	       b__h36829 && wr_ram_response_wget[46],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d782 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d784 ||
	       b__h36829 && wr_ram_response_wget[45],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d790 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d792 ||
	       b__h36829 && wr_ram_response_wget[44],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d799 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d801 ||
	       b__h36829 && wr_ram_response_wget[43],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d807 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d809 ||
	       b__h36829 && wr_ram_response_wget[42],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d816 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d818 ||
	       b__h36829 && wr_ram_response_wget[41],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d824 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d826 ||
	       b__h36829 && wr_ram_response_wget[40],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d833 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d835 ||
	       b__h36829 && wr_ram_response_wget[39],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d841 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d843 ||
	       b__h36829 && wr_ram_response_wget[38],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d850 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d852 ||
	       b__h36829 && wr_ram_response_wget[37],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d858 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d860 ||
	       b__h36829 && wr_ram_response_wget[36],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d867 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d869 ||
	       b__h36829 && wr_ram_response_wget[35],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d875 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d877 ||
	       b__h36829 && wr_ram_response_wget[34],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d884 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d886 ||
	       b__h36829 && wr_ram_response_wget[33],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d892 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d894 ||
	       b__h36829 && wr_ram_response_wget[32],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d901 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d903 ||
	       b__h36829 && wr_ram_response_wget[31],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d909 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d911 ||
	       b__h36829 && wr_ram_response_wget[30],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d918 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d920 ||
	       b__h36829 && wr_ram_response_wget[29],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d926 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d928 ||
	       b__h36829 && wr_ram_response_wget[28],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d935 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d937 ||
	       b__h36829 && wr_ram_response_wget[27],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d943 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d945 ||
	       b__h36829 && wr_ram_response_wget[26],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d952 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d954 ||
	       b__h36829 && wr_ram_response_wget[25],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d960 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d962 ||
	       b__h36829 && wr_ram_response_wget[24],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d969 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d971 ||
	       b__h36829 && wr_ram_response_wget[23],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d977 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d979 ||
	       b__h36829 && wr_ram_response_wget[22],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d986 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d988 ||
	       b__h36829 && wr_ram_response_wget[21],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d994 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d996 ||
	       b__h36829 && wr_ram_response_wget[20],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1003 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1005 ||
	       b__h36829 && wr_ram_response_wget[19],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1011 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1013 ||
	       b__h36829 && wr_ram_response_wget[18],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1020 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1022 ||
	       b__h36829 && wr_ram_response_wget[17],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1028 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1030 ||
	       b__h36829 && wr_ram_response_wget[16],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1037 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1039 ||
	       b__h36829 && wr_ram_response_wget[15],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1045 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1047 ||
	       b__h36829 && wr_ram_response_wget[14],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1054 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1056 ||
	       b__h36829 && wr_ram_response_wget[13],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1062 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1064 ||
	       b__h36829 && wr_ram_response_wget[12],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1071 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1073 ||
	       b__h36829 && wr_ram_response_wget[11],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1079 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1081 ||
	       b__h36829 && wr_ram_response_wget[10],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1088 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1090 ||
	       b__h36829 && wr_ram_response_wget[9],
	       wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d1096 ||
	       wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d1098 ||
	       b__h36829 && wr_ram_response_wget[8] } ;
  assign y__h86371 =
	     {64{IF_ff_core_request_first__1_BITS_71_TO_70_106__ETC___d1124}} ;
  assign y__h91493 = ~ff_core_request_D_OUT[72] ;
  assign y__h95353 = ~x__h95337 ;
  always@(ff_core_request_D_OUT)
  begin
    case (ff_core_request_D_OUT[71:70])
      2'b0: y__h86257 = 64'h00000000000000FF;
      2'b01: y__h86257 = 64'h000000000000FFFF;
      2'b10: y__h86257 = 64'h00000000FFFFFFFF;
      2'd3: y__h86257 = 64'hFFFFFFFFFFFFFFFF;
    endcase
  end
  always@(ff_core_request_D_OUT)
  begin
    case (ff_core_request_D_OUT[71:70])
      2'b0: x__h86370 = 64'hFFFFFFFFFFFFFF00;
      2'b01: x__h86370 = 64'hFFFFFFFFFFFF0000;
      2'b10: x__h86370 = 64'hFFFFFFFF00000000;
      2'd3: x__h86370 = 64'd0;
    endcase
  end
  always@(m_fillbuffer_mv_release_info or
	  v_reg_dirty_0 or
	  v_reg_dirty_1 or
	  v_reg_dirty_2 or
	  v_reg_dirty_3 or
	  v_reg_dirty_4 or
	  v_reg_dirty_5 or
	  v_reg_dirty_6 or
	  v_reg_dirty_7 or
	  v_reg_dirty_8 or
	  v_reg_dirty_9 or
	  v_reg_dirty_10 or
	  v_reg_dirty_11 or
	  v_reg_dirty_12 or
	  v_reg_dirty_13 or
	  v_reg_dirty_14 or
	  v_reg_dirty_15 or
	  v_reg_dirty_16 or
	  v_reg_dirty_17 or
	  v_reg_dirty_18 or
	  v_reg_dirty_19 or
	  v_reg_dirty_20 or
	  v_reg_dirty_21 or
	  v_reg_dirty_22 or
	  v_reg_dirty_23 or
	  v_reg_dirty_24 or
	  v_reg_dirty_25 or
	  v_reg_dirty_26 or
	  v_reg_dirty_27 or
	  v_reg_dirty_28 or
	  v_reg_dirty_29 or
	  v_reg_dirty_30 or
	  v_reg_dirty_31 or
	  v_reg_dirty_32 or
	  v_reg_dirty_33 or
	  v_reg_dirty_34 or
	  v_reg_dirty_35 or
	  v_reg_dirty_36 or
	  v_reg_dirty_37 or
	  v_reg_dirty_38 or
	  v_reg_dirty_39 or
	  v_reg_dirty_40 or
	  v_reg_dirty_41 or
	  v_reg_dirty_42 or
	  v_reg_dirty_43 or
	  v_reg_dirty_44 or
	  v_reg_dirty_45 or
	  v_reg_dirty_46 or
	  v_reg_dirty_47 or
	  v_reg_dirty_48 or
	  v_reg_dirty_49 or
	  v_reg_dirty_50 or
	  v_reg_dirty_51 or
	  v_reg_dirty_52 or
	  v_reg_dirty_53 or
	  v_reg_dirty_54 or
	  v_reg_dirty_55 or
	  v_reg_dirty_56 or
	  v_reg_dirty_57 or
	  v_reg_dirty_58 or
	  v_reg_dirty_59 or
	  v_reg_dirty_60 or
	  v_reg_dirty_61 or v_reg_dirty_62 or v_reg_dirty_63)
  begin
    case (m_fillbuffer_mv_release_info[13:8])
      6'd0: dirty__h103315 = v_reg_dirty_0;
      6'd1: dirty__h103315 = v_reg_dirty_1;
      6'd2: dirty__h103315 = v_reg_dirty_2;
      6'd3: dirty__h103315 = v_reg_dirty_3;
      6'd4: dirty__h103315 = v_reg_dirty_4;
      6'd5: dirty__h103315 = v_reg_dirty_5;
      6'd6: dirty__h103315 = v_reg_dirty_6;
      6'd7: dirty__h103315 = v_reg_dirty_7;
      6'd8: dirty__h103315 = v_reg_dirty_8;
      6'd9: dirty__h103315 = v_reg_dirty_9;
      6'd10: dirty__h103315 = v_reg_dirty_10;
      6'd11: dirty__h103315 = v_reg_dirty_11;
      6'd12: dirty__h103315 = v_reg_dirty_12;
      6'd13: dirty__h103315 = v_reg_dirty_13;
      6'd14: dirty__h103315 = v_reg_dirty_14;
      6'd15: dirty__h103315 = v_reg_dirty_15;
      6'd16: dirty__h103315 = v_reg_dirty_16;
      6'd17: dirty__h103315 = v_reg_dirty_17;
      6'd18: dirty__h103315 = v_reg_dirty_18;
      6'd19: dirty__h103315 = v_reg_dirty_19;
      6'd20: dirty__h103315 = v_reg_dirty_20;
      6'd21: dirty__h103315 = v_reg_dirty_21;
      6'd22: dirty__h103315 = v_reg_dirty_22;
      6'd23: dirty__h103315 = v_reg_dirty_23;
      6'd24: dirty__h103315 = v_reg_dirty_24;
      6'd25: dirty__h103315 = v_reg_dirty_25;
      6'd26: dirty__h103315 = v_reg_dirty_26;
      6'd27: dirty__h103315 = v_reg_dirty_27;
      6'd28: dirty__h103315 = v_reg_dirty_28;
      6'd29: dirty__h103315 = v_reg_dirty_29;
      6'd30: dirty__h103315 = v_reg_dirty_30;
      6'd31: dirty__h103315 = v_reg_dirty_31;
      6'd32: dirty__h103315 = v_reg_dirty_32;
      6'd33: dirty__h103315 = v_reg_dirty_33;
      6'd34: dirty__h103315 = v_reg_dirty_34;
      6'd35: dirty__h103315 = v_reg_dirty_35;
      6'd36: dirty__h103315 = v_reg_dirty_36;
      6'd37: dirty__h103315 = v_reg_dirty_37;
      6'd38: dirty__h103315 = v_reg_dirty_38;
      6'd39: dirty__h103315 = v_reg_dirty_39;
      6'd40: dirty__h103315 = v_reg_dirty_40;
      6'd41: dirty__h103315 = v_reg_dirty_41;
      6'd42: dirty__h103315 = v_reg_dirty_42;
      6'd43: dirty__h103315 = v_reg_dirty_43;
      6'd44: dirty__h103315 = v_reg_dirty_44;
      6'd45: dirty__h103315 = v_reg_dirty_45;
      6'd46: dirty__h103315 = v_reg_dirty_46;
      6'd47: dirty__h103315 = v_reg_dirty_47;
      6'd48: dirty__h103315 = v_reg_dirty_48;
      6'd49: dirty__h103315 = v_reg_dirty_49;
      6'd50: dirty__h103315 = v_reg_dirty_50;
      6'd51: dirty__h103315 = v_reg_dirty_51;
      6'd52: dirty__h103315 = v_reg_dirty_52;
      6'd53: dirty__h103315 = v_reg_dirty_53;
      6'd54: dirty__h103315 = v_reg_dirty_54;
      6'd55: dirty__h103315 = v_reg_dirty_55;
      6'd56: dirty__h103315 = v_reg_dirty_56;
      6'd57: dirty__h103315 = v_reg_dirty_57;
      6'd58: dirty__h103315 = v_reg_dirty_58;
      6'd59: dirty__h103315 = v_reg_dirty_59;
      6'd60: dirty__h103315 = v_reg_dirty_60;
      6'd61: dirty__h103315 = v_reg_dirty_61;
      6'd62: dirty__h103315 = v_reg_dirty_62;
      6'd63: dirty__h103315 = v_reg_dirty_63;
    endcase
  end
  always@(m_fillbuffer_mv_release_info or
	  v_reg_valid_0 or
	  v_reg_valid_1 or
	  v_reg_valid_2 or
	  v_reg_valid_3 or
	  v_reg_valid_4 or
	  v_reg_valid_5 or
	  v_reg_valid_6 or
	  v_reg_valid_7 or
	  v_reg_valid_8 or
	  v_reg_valid_9 or
	  v_reg_valid_10 or
	  v_reg_valid_11 or
	  v_reg_valid_12 or
	  v_reg_valid_13 or
	  v_reg_valid_14 or
	  v_reg_valid_15 or
	  v_reg_valid_16 or
	  v_reg_valid_17 or
	  v_reg_valid_18 or
	  v_reg_valid_19 or
	  v_reg_valid_20 or
	  v_reg_valid_21 or
	  v_reg_valid_22 or
	  v_reg_valid_23 or
	  v_reg_valid_24 or
	  v_reg_valid_25 or
	  v_reg_valid_26 or
	  v_reg_valid_27 or
	  v_reg_valid_28 or
	  v_reg_valid_29 or
	  v_reg_valid_30 or
	  v_reg_valid_31 or
	  v_reg_valid_32 or
	  v_reg_valid_33 or
	  v_reg_valid_34 or
	  v_reg_valid_35 or
	  v_reg_valid_36 or
	  v_reg_valid_37 or
	  v_reg_valid_38 or
	  v_reg_valid_39 or
	  v_reg_valid_40 or
	  v_reg_valid_41 or
	  v_reg_valid_42 or
	  v_reg_valid_43 or
	  v_reg_valid_44 or
	  v_reg_valid_45 or
	  v_reg_valid_46 or
	  v_reg_valid_47 or
	  v_reg_valid_48 or
	  v_reg_valid_49 or
	  v_reg_valid_50 or
	  v_reg_valid_51 or
	  v_reg_valid_52 or
	  v_reg_valid_53 or
	  v_reg_valid_54 or
	  v_reg_valid_55 or
	  v_reg_valid_56 or
	  v_reg_valid_57 or
	  v_reg_valid_58 or
	  v_reg_valid_59 or
	  v_reg_valid_60 or
	  v_reg_valid_61 or v_reg_valid_62 or v_reg_valid_63)
  begin
    case (m_fillbuffer_mv_release_info[13:8])
      6'd0: valid__h103314 = v_reg_valid_0;
      6'd1: valid__h103314 = v_reg_valid_1;
      6'd2: valid__h103314 = v_reg_valid_2;
      6'd3: valid__h103314 = v_reg_valid_3;
      6'd4: valid__h103314 = v_reg_valid_4;
      6'd5: valid__h103314 = v_reg_valid_5;
      6'd6: valid__h103314 = v_reg_valid_6;
      6'd7: valid__h103314 = v_reg_valid_7;
      6'd8: valid__h103314 = v_reg_valid_8;
      6'd9: valid__h103314 = v_reg_valid_9;
      6'd10: valid__h103314 = v_reg_valid_10;
      6'd11: valid__h103314 = v_reg_valid_11;
      6'd12: valid__h103314 = v_reg_valid_12;
      6'd13: valid__h103314 = v_reg_valid_13;
      6'd14: valid__h103314 = v_reg_valid_14;
      6'd15: valid__h103314 = v_reg_valid_15;
      6'd16: valid__h103314 = v_reg_valid_16;
      6'd17: valid__h103314 = v_reg_valid_17;
      6'd18: valid__h103314 = v_reg_valid_18;
      6'd19: valid__h103314 = v_reg_valid_19;
      6'd20: valid__h103314 = v_reg_valid_20;
      6'd21: valid__h103314 = v_reg_valid_21;
      6'd22: valid__h103314 = v_reg_valid_22;
      6'd23: valid__h103314 = v_reg_valid_23;
      6'd24: valid__h103314 = v_reg_valid_24;
      6'd25: valid__h103314 = v_reg_valid_25;
      6'd26: valid__h103314 = v_reg_valid_26;
      6'd27: valid__h103314 = v_reg_valid_27;
      6'd28: valid__h103314 = v_reg_valid_28;
      6'd29: valid__h103314 = v_reg_valid_29;
      6'd30: valid__h103314 = v_reg_valid_30;
      6'd31: valid__h103314 = v_reg_valid_31;
      6'd32: valid__h103314 = v_reg_valid_32;
      6'd33: valid__h103314 = v_reg_valid_33;
      6'd34: valid__h103314 = v_reg_valid_34;
      6'd35: valid__h103314 = v_reg_valid_35;
      6'd36: valid__h103314 = v_reg_valid_36;
      6'd37: valid__h103314 = v_reg_valid_37;
      6'd38: valid__h103314 = v_reg_valid_38;
      6'd39: valid__h103314 = v_reg_valid_39;
      6'd40: valid__h103314 = v_reg_valid_40;
      6'd41: valid__h103314 = v_reg_valid_41;
      6'd42: valid__h103314 = v_reg_valid_42;
      6'd43: valid__h103314 = v_reg_valid_43;
      6'd44: valid__h103314 = v_reg_valid_44;
      6'd45: valid__h103314 = v_reg_valid_45;
      6'd46: valid__h103314 = v_reg_valid_46;
      6'd47: valid__h103314 = v_reg_valid_47;
      6'd48: valid__h103314 = v_reg_valid_48;
      6'd49: valid__h103314 = v_reg_valid_49;
      6'd50: valid__h103314 = v_reg_valid_50;
      6'd51: valid__h103314 = v_reg_valid_51;
      6'd52: valid__h103314 = v_reg_valid_52;
      6'd53: valid__h103314 = v_reg_valid_53;
      6'd54: valid__h103314 = v_reg_valid_54;
      6'd55: valid__h103314 = v_reg_valid_55;
      6'd56: valid__h103314 = v_reg_valid_56;
      6'd57: valid__h103314 = v_reg_valid_57;
      6'd58: valid__h103314 = v_reg_valid_58;
      6'd59: valid__h103314 = v_reg_valid_59;
      6'd60: valid__h103314 = v_reg_valid_60;
      6'd61: valid__h103314 = v_reg_valid_61;
      6'd62: valid__h103314 = v_reg_valid_62;
      6'd63: valid__h103314 = v_reg_valid_63;
    endcase
  end
  always@(rg_fence_set or
	  v_reg_valid_0 or
	  v_reg_valid_1 or
	  v_reg_valid_2 or
	  v_reg_valid_3 or
	  v_reg_valid_4 or
	  v_reg_valid_5 or
	  v_reg_valid_6 or
	  v_reg_valid_7 or
	  v_reg_valid_8 or
	  v_reg_valid_9 or
	  v_reg_valid_10 or
	  v_reg_valid_11 or
	  v_reg_valid_12 or
	  v_reg_valid_13 or
	  v_reg_valid_14 or
	  v_reg_valid_15 or
	  v_reg_valid_16 or
	  v_reg_valid_17 or
	  v_reg_valid_18 or
	  v_reg_valid_19 or
	  v_reg_valid_20 or
	  v_reg_valid_21 or
	  v_reg_valid_22 or
	  v_reg_valid_23 or
	  v_reg_valid_24 or
	  v_reg_valid_25 or
	  v_reg_valid_26 or
	  v_reg_valid_27 or
	  v_reg_valid_28 or
	  v_reg_valid_29 or
	  v_reg_valid_30 or
	  v_reg_valid_31 or
	  v_reg_valid_32 or
	  v_reg_valid_33 or
	  v_reg_valid_34 or
	  v_reg_valid_35 or
	  v_reg_valid_36 or
	  v_reg_valid_37 or
	  v_reg_valid_38 or
	  v_reg_valid_39 or
	  v_reg_valid_40 or
	  v_reg_valid_41 or
	  v_reg_valid_42 or
	  v_reg_valid_43 or
	  v_reg_valid_44 or
	  v_reg_valid_45 or
	  v_reg_valid_46 or
	  v_reg_valid_47 or
	  v_reg_valid_48 or
	  v_reg_valid_49 or
	  v_reg_valid_50 or
	  v_reg_valid_51 or
	  v_reg_valid_52 or
	  v_reg_valid_53 or
	  v_reg_valid_54 or
	  v_reg_valid_55 or
	  v_reg_valid_56 or
	  v_reg_valid_57 or
	  v_reg_valid_58 or
	  v_reg_valid_59 or
	  v_reg_valid_60 or
	  v_reg_valid_61 or v_reg_valid_62 or v_reg_valid_63)
  begin
    case (rg_fence_set)
      6'd0: bs__h16879 = v_reg_valid_0;
      6'd1: bs__h16879 = v_reg_valid_1;
      6'd2: bs__h16879 = v_reg_valid_2;
      6'd3: bs__h16879 = v_reg_valid_3;
      6'd4: bs__h16879 = v_reg_valid_4;
      6'd5: bs__h16879 = v_reg_valid_5;
      6'd6: bs__h16879 = v_reg_valid_6;
      6'd7: bs__h16879 = v_reg_valid_7;
      6'd8: bs__h16879 = v_reg_valid_8;
      6'd9: bs__h16879 = v_reg_valid_9;
      6'd10: bs__h16879 = v_reg_valid_10;
      6'd11: bs__h16879 = v_reg_valid_11;
      6'd12: bs__h16879 = v_reg_valid_12;
      6'd13: bs__h16879 = v_reg_valid_13;
      6'd14: bs__h16879 = v_reg_valid_14;
      6'd15: bs__h16879 = v_reg_valid_15;
      6'd16: bs__h16879 = v_reg_valid_16;
      6'd17: bs__h16879 = v_reg_valid_17;
      6'd18: bs__h16879 = v_reg_valid_18;
      6'd19: bs__h16879 = v_reg_valid_19;
      6'd20: bs__h16879 = v_reg_valid_20;
      6'd21: bs__h16879 = v_reg_valid_21;
      6'd22: bs__h16879 = v_reg_valid_22;
      6'd23: bs__h16879 = v_reg_valid_23;
      6'd24: bs__h16879 = v_reg_valid_24;
      6'd25: bs__h16879 = v_reg_valid_25;
      6'd26: bs__h16879 = v_reg_valid_26;
      6'd27: bs__h16879 = v_reg_valid_27;
      6'd28: bs__h16879 = v_reg_valid_28;
      6'd29: bs__h16879 = v_reg_valid_29;
      6'd30: bs__h16879 = v_reg_valid_30;
      6'd31: bs__h16879 = v_reg_valid_31;
      6'd32: bs__h16879 = v_reg_valid_32;
      6'd33: bs__h16879 = v_reg_valid_33;
      6'd34: bs__h16879 = v_reg_valid_34;
      6'd35: bs__h16879 = v_reg_valid_35;
      6'd36: bs__h16879 = v_reg_valid_36;
      6'd37: bs__h16879 = v_reg_valid_37;
      6'd38: bs__h16879 = v_reg_valid_38;
      6'd39: bs__h16879 = v_reg_valid_39;
      6'd40: bs__h16879 = v_reg_valid_40;
      6'd41: bs__h16879 = v_reg_valid_41;
      6'd42: bs__h16879 = v_reg_valid_42;
      6'd43: bs__h16879 = v_reg_valid_43;
      6'd44: bs__h16879 = v_reg_valid_44;
      6'd45: bs__h16879 = v_reg_valid_45;
      6'd46: bs__h16879 = v_reg_valid_46;
      6'd47: bs__h16879 = v_reg_valid_47;
      6'd48: bs__h16879 = v_reg_valid_48;
      6'd49: bs__h16879 = v_reg_valid_49;
      6'd50: bs__h16879 = v_reg_valid_50;
      6'd51: bs__h16879 = v_reg_valid_51;
      6'd52: bs__h16879 = v_reg_valid_52;
      6'd53: bs__h16879 = v_reg_valid_53;
      6'd54: bs__h16879 = v_reg_valid_54;
      6'd55: bs__h16879 = v_reg_valid_55;
      6'd56: bs__h16879 = v_reg_valid_56;
      6'd57: bs__h16879 = v_reg_valid_57;
      6'd58: bs__h16879 = v_reg_valid_58;
      6'd59: bs__h16879 = v_reg_valid_59;
      6'd60: bs__h16879 = v_reg_valid_60;
      6'd61: bs__h16879 = v_reg_valid_61;
      6'd62: bs__h16879 = v_reg_valid_62;
      6'd63: bs__h16879 = v_reg_valid_63;
    endcase
  end
  always@(rg_fence_set or
	  v_reg_dirty_0 or
	  v_reg_dirty_1 or
	  v_reg_dirty_2 or
	  v_reg_dirty_3 or
	  v_reg_dirty_4 or
	  v_reg_dirty_5 or
	  v_reg_dirty_6 or
	  v_reg_dirty_7 or
	  v_reg_dirty_8 or
	  v_reg_dirty_9 or
	  v_reg_dirty_10 or
	  v_reg_dirty_11 or
	  v_reg_dirty_12 or
	  v_reg_dirty_13 or
	  v_reg_dirty_14 or
	  v_reg_dirty_15 or
	  v_reg_dirty_16 or
	  v_reg_dirty_17 or
	  v_reg_dirty_18 or
	  v_reg_dirty_19 or
	  v_reg_dirty_20 or
	  v_reg_dirty_21 or
	  v_reg_dirty_22 or
	  v_reg_dirty_23 or
	  v_reg_dirty_24 or
	  v_reg_dirty_25 or
	  v_reg_dirty_26 or
	  v_reg_dirty_27 or
	  v_reg_dirty_28 or
	  v_reg_dirty_29 or
	  v_reg_dirty_30 or
	  v_reg_dirty_31 or
	  v_reg_dirty_32 or
	  v_reg_dirty_33 or
	  v_reg_dirty_34 or
	  v_reg_dirty_35 or
	  v_reg_dirty_36 or
	  v_reg_dirty_37 or
	  v_reg_dirty_38 or
	  v_reg_dirty_39 or
	  v_reg_dirty_40 or
	  v_reg_dirty_41 or
	  v_reg_dirty_42 or
	  v_reg_dirty_43 or
	  v_reg_dirty_44 or
	  v_reg_dirty_45 or
	  v_reg_dirty_46 or
	  v_reg_dirty_47 or
	  v_reg_dirty_48 or
	  v_reg_dirty_49 or
	  v_reg_dirty_50 or
	  v_reg_dirty_51 or
	  v_reg_dirty_52 or
	  v_reg_dirty_53 or
	  v_reg_dirty_54 or
	  v_reg_dirty_55 or
	  v_reg_dirty_56 or
	  v_reg_dirty_57 or
	  v_reg_dirty_58 or
	  v_reg_dirty_59 or
	  v_reg_dirty_60 or
	  v_reg_dirty_61 or v_reg_dirty_62 or v_reg_dirty_63)
  begin
    case (rg_fence_set)
      6'd0: bs__h18905 = v_reg_dirty_0;
      6'd1: bs__h18905 = v_reg_dirty_1;
      6'd2: bs__h18905 = v_reg_dirty_2;
      6'd3: bs__h18905 = v_reg_dirty_3;
      6'd4: bs__h18905 = v_reg_dirty_4;
      6'd5: bs__h18905 = v_reg_dirty_5;
      6'd6: bs__h18905 = v_reg_dirty_6;
      6'd7: bs__h18905 = v_reg_dirty_7;
      6'd8: bs__h18905 = v_reg_dirty_8;
      6'd9: bs__h18905 = v_reg_dirty_9;
      6'd10: bs__h18905 = v_reg_dirty_10;
      6'd11: bs__h18905 = v_reg_dirty_11;
      6'd12: bs__h18905 = v_reg_dirty_12;
      6'd13: bs__h18905 = v_reg_dirty_13;
      6'd14: bs__h18905 = v_reg_dirty_14;
      6'd15: bs__h18905 = v_reg_dirty_15;
      6'd16: bs__h18905 = v_reg_dirty_16;
      6'd17: bs__h18905 = v_reg_dirty_17;
      6'd18: bs__h18905 = v_reg_dirty_18;
      6'd19: bs__h18905 = v_reg_dirty_19;
      6'd20: bs__h18905 = v_reg_dirty_20;
      6'd21: bs__h18905 = v_reg_dirty_21;
      6'd22: bs__h18905 = v_reg_dirty_22;
      6'd23: bs__h18905 = v_reg_dirty_23;
      6'd24: bs__h18905 = v_reg_dirty_24;
      6'd25: bs__h18905 = v_reg_dirty_25;
      6'd26: bs__h18905 = v_reg_dirty_26;
      6'd27: bs__h18905 = v_reg_dirty_27;
      6'd28: bs__h18905 = v_reg_dirty_28;
      6'd29: bs__h18905 = v_reg_dirty_29;
      6'd30: bs__h18905 = v_reg_dirty_30;
      6'd31: bs__h18905 = v_reg_dirty_31;
      6'd32: bs__h18905 = v_reg_dirty_32;
      6'd33: bs__h18905 = v_reg_dirty_33;
      6'd34: bs__h18905 = v_reg_dirty_34;
      6'd35: bs__h18905 = v_reg_dirty_35;
      6'd36: bs__h18905 = v_reg_dirty_36;
      6'd37: bs__h18905 = v_reg_dirty_37;
      6'd38: bs__h18905 = v_reg_dirty_38;
      6'd39: bs__h18905 = v_reg_dirty_39;
      6'd40: bs__h18905 = v_reg_dirty_40;
      6'd41: bs__h18905 = v_reg_dirty_41;
      6'd42: bs__h18905 = v_reg_dirty_42;
      6'd43: bs__h18905 = v_reg_dirty_43;
      6'd44: bs__h18905 = v_reg_dirty_44;
      6'd45: bs__h18905 = v_reg_dirty_45;
      6'd46: bs__h18905 = v_reg_dirty_46;
      6'd47: bs__h18905 = v_reg_dirty_47;
      6'd48: bs__h18905 = v_reg_dirty_48;
      6'd49: bs__h18905 = v_reg_dirty_49;
      6'd50: bs__h18905 = v_reg_dirty_50;
      6'd51: bs__h18905 = v_reg_dirty_51;
      6'd52: bs__h18905 = v_reg_dirty_52;
      6'd53: bs__h18905 = v_reg_dirty_53;
      6'd54: bs__h18905 = v_reg_dirty_54;
      6'd55: bs__h18905 = v_reg_dirty_55;
      6'd56: bs__h18905 = v_reg_dirty_56;
      6'd57: bs__h18905 = v_reg_dirty_57;
      6'd58: bs__h18905 = v_reg_dirty_58;
      6'd59: bs__h18905 = v_reg_dirty_59;
      6'd60: bs__h18905 = v_reg_dirty_60;
      6'd61: bs__h18905 = v_reg_dirty_61;
      6'd62: bs__h18905 = v_reg_dirty_62;
      6'd63: bs__h18905 = v_reg_dirty_63;
    endcase
  end
  always@(m_fillbuffer_mv_release_info or
	  replacement_v_count_0 or
	  replacement_v_count_1 or
	  replacement_v_count_2 or
	  replacement_v_count_3 or
	  replacement_v_count_4 or
	  replacement_v_count_5 or
	  replacement_v_count_6 or
	  replacement_v_count_7 or
	  replacement_v_count_8 or
	  replacement_v_count_9 or
	  replacement_v_count_10 or
	  replacement_v_count_11 or
	  replacement_v_count_12 or
	  replacement_v_count_13 or
	  replacement_v_count_14 or
	  replacement_v_count_15 or
	  replacement_v_count_16 or
	  replacement_v_count_17 or
	  replacement_v_count_18 or
	  replacement_v_count_19 or
	  replacement_v_count_20 or
	  replacement_v_count_21 or
	  replacement_v_count_22 or
	  replacement_v_count_23 or
	  replacement_v_count_24 or
	  replacement_v_count_25 or
	  replacement_v_count_26 or
	  replacement_v_count_27 or
	  replacement_v_count_28 or
	  replacement_v_count_29 or
	  replacement_v_count_30 or
	  replacement_v_count_31 or
	  replacement_v_count_32 or
	  replacement_v_count_33 or
	  replacement_v_count_34 or
	  replacement_v_count_35 or
	  replacement_v_count_36 or
	  replacement_v_count_37 or
	  replacement_v_count_38 or
	  replacement_v_count_39 or
	  replacement_v_count_40 or
	  replacement_v_count_41 or
	  replacement_v_count_42 or
	  replacement_v_count_43 or
	  replacement_v_count_44 or
	  replacement_v_count_45 or
	  replacement_v_count_46 or
	  replacement_v_count_47 or
	  replacement_v_count_48 or
	  replacement_v_count_49 or
	  replacement_v_count_50 or
	  replacement_v_count_51 or
	  replacement_v_count_52 or
	  replacement_v_count_53 or
	  replacement_v_count_54 or
	  replacement_v_count_55 or
	  replacement_v_count_56 or
	  replacement_v_count_57 or
	  replacement_v_count_58 or
	  replacement_v_count_59 or
	  replacement_v_count_60 or
	  replacement_v_count_61 or
	  replacement_v_count_62 or replacement_v_count_63)
  begin
    case (m_fillbuffer_mv_release_info[13:8])
      6'd0:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_0;
      6'd1:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_1;
      6'd2:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_2;
      6'd3:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_3;
      6'd4:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_4;
      6'd5:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_5;
      6'd6:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_6;
      6'd7:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_7;
      6'd8:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_8;
      6'd9:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_9;
      6'd10:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_10;
      6'd11:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_11;
      6'd12:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_12;
      6'd13:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_13;
      6'd14:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_14;
      6'd15:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_15;
      6'd16:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_16;
      6'd17:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_17;
      6'd18:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_18;
      6'd19:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_19;
      6'd20:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_20;
      6'd21:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_21;
      6'd22:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_22;
      6'd23:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_23;
      6'd24:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_24;
      6'd25:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_25;
      6'd26:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_26;
      6'd27:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_27;
      6'd28:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_28;
      6'd29:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_29;
      6'd30:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_30;
      6'd31:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_31;
      6'd32:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_32;
      6'd33:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_33;
      6'd34:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_34;
      6'd35:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_35;
      6'd36:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_36;
      6'd37:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_37;
      6'd38:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_38;
      6'd39:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_39;
      6'd40:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_40;
      6'd41:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_41;
      6'd42:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_42;
      6'd43:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_43;
      6'd44:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_44;
      6'd45:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_45;
      6'd46:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_46;
      6'd47:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_47;
      6'd48:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_48;
      6'd49:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_49;
      6'd50:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_50;
      6'd51:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_51;
      6'd52:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_52;
      6'd53:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_53;
      6'd54:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_54;
      6'd55:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_55;
      6'd56:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_56;
      6'd57:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_57;
      6'd58:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_58;
      6'd59:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_59;
      6'd60:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_60;
      6'd61:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_61;
      6'd62:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_62;
      6'd63:
	  SEL_ARR_replacement_v_count_0_545_replacement__ETC___d1610 =
	      replacement_v_count_63;
    endcase
  end
  always@(ff_from_tlb_rv_port1__read or
	  v_reg_dirty_0 or
	  v_reg_dirty_1 or
	  v_reg_dirty_2 or
	  v_reg_dirty_3 or
	  v_reg_dirty_4 or
	  v_reg_dirty_5 or
	  v_reg_dirty_6 or
	  v_reg_dirty_7 or
	  v_reg_dirty_8 or
	  v_reg_dirty_9 or
	  v_reg_dirty_10 or
	  v_reg_dirty_11 or
	  v_reg_dirty_12 or
	  v_reg_dirty_13 or
	  v_reg_dirty_14 or
	  v_reg_dirty_15 or
	  v_reg_dirty_16 or
	  v_reg_dirty_17 or
	  v_reg_dirty_18 or
	  v_reg_dirty_19 or
	  v_reg_dirty_20 or
	  v_reg_dirty_21 or
	  v_reg_dirty_22 or
	  v_reg_dirty_23 or
	  v_reg_dirty_24 or
	  v_reg_dirty_25 or
	  v_reg_dirty_26 or
	  v_reg_dirty_27 or
	  v_reg_dirty_28 or
	  v_reg_dirty_29 or
	  v_reg_dirty_30 or
	  v_reg_dirty_31 or
	  v_reg_dirty_32 or
	  v_reg_dirty_33 or
	  v_reg_dirty_34 or
	  v_reg_dirty_35 or
	  v_reg_dirty_36 or
	  v_reg_dirty_37 or
	  v_reg_dirty_38 or
	  v_reg_dirty_39 or
	  v_reg_dirty_40 or
	  v_reg_dirty_41 or
	  v_reg_dirty_42 or
	  v_reg_dirty_43 or
	  v_reg_dirty_44 or
	  v_reg_dirty_45 or
	  v_reg_dirty_46 or
	  v_reg_dirty_47 or
	  v_reg_dirty_48 or
	  v_reg_dirty_49 or
	  v_reg_dirty_50 or
	  v_reg_dirty_51 or
	  v_reg_dirty_52 or
	  v_reg_dirty_53 or
	  v_reg_dirty_54 or
	  v_reg_dirty_55 or
	  v_reg_dirty_56 or
	  v_reg_dirty_57 or
	  v_reg_dirty_58 or
	  v_reg_dirty_59 or
	  v_reg_dirty_60 or
	  v_reg_dirty_61 or v_reg_dirty_62 or v_reg_dirty_63)
  begin
    case (ff_from_tlb_rv_port1__read[19:14])
      6'd0: bs__h94492 = v_reg_dirty_0;
      6'd1: bs__h94492 = v_reg_dirty_1;
      6'd2: bs__h94492 = v_reg_dirty_2;
      6'd3: bs__h94492 = v_reg_dirty_3;
      6'd4: bs__h94492 = v_reg_dirty_4;
      6'd5: bs__h94492 = v_reg_dirty_5;
      6'd6: bs__h94492 = v_reg_dirty_6;
      6'd7: bs__h94492 = v_reg_dirty_7;
      6'd8: bs__h94492 = v_reg_dirty_8;
      6'd9: bs__h94492 = v_reg_dirty_9;
      6'd10: bs__h94492 = v_reg_dirty_10;
      6'd11: bs__h94492 = v_reg_dirty_11;
      6'd12: bs__h94492 = v_reg_dirty_12;
      6'd13: bs__h94492 = v_reg_dirty_13;
      6'd14: bs__h94492 = v_reg_dirty_14;
      6'd15: bs__h94492 = v_reg_dirty_15;
      6'd16: bs__h94492 = v_reg_dirty_16;
      6'd17: bs__h94492 = v_reg_dirty_17;
      6'd18: bs__h94492 = v_reg_dirty_18;
      6'd19: bs__h94492 = v_reg_dirty_19;
      6'd20: bs__h94492 = v_reg_dirty_20;
      6'd21: bs__h94492 = v_reg_dirty_21;
      6'd22: bs__h94492 = v_reg_dirty_22;
      6'd23: bs__h94492 = v_reg_dirty_23;
      6'd24: bs__h94492 = v_reg_dirty_24;
      6'd25: bs__h94492 = v_reg_dirty_25;
      6'd26: bs__h94492 = v_reg_dirty_26;
      6'd27: bs__h94492 = v_reg_dirty_27;
      6'd28: bs__h94492 = v_reg_dirty_28;
      6'd29: bs__h94492 = v_reg_dirty_29;
      6'd30: bs__h94492 = v_reg_dirty_30;
      6'd31: bs__h94492 = v_reg_dirty_31;
      6'd32: bs__h94492 = v_reg_dirty_32;
      6'd33: bs__h94492 = v_reg_dirty_33;
      6'd34: bs__h94492 = v_reg_dirty_34;
      6'd35: bs__h94492 = v_reg_dirty_35;
      6'd36: bs__h94492 = v_reg_dirty_36;
      6'd37: bs__h94492 = v_reg_dirty_37;
      6'd38: bs__h94492 = v_reg_dirty_38;
      6'd39: bs__h94492 = v_reg_dirty_39;
      6'd40: bs__h94492 = v_reg_dirty_40;
      6'd41: bs__h94492 = v_reg_dirty_41;
      6'd42: bs__h94492 = v_reg_dirty_42;
      6'd43: bs__h94492 = v_reg_dirty_43;
      6'd44: bs__h94492 = v_reg_dirty_44;
      6'd45: bs__h94492 = v_reg_dirty_45;
      6'd46: bs__h94492 = v_reg_dirty_46;
      6'd47: bs__h94492 = v_reg_dirty_47;
      6'd48: bs__h94492 = v_reg_dirty_48;
      6'd49: bs__h94492 = v_reg_dirty_49;
      6'd50: bs__h94492 = v_reg_dirty_50;
      6'd51: bs__h94492 = v_reg_dirty_51;
      6'd52: bs__h94492 = v_reg_dirty_52;
      6'd53: bs__h94492 = v_reg_dirty_53;
      6'd54: bs__h94492 = v_reg_dirty_54;
      6'd55: bs__h94492 = v_reg_dirty_55;
      6'd56: bs__h94492 = v_reg_dirty_56;
      6'd57: bs__h94492 = v_reg_dirty_57;
      6'd58: bs__h94492 = v_reg_dirty_58;
      6'd59: bs__h94492 = v_reg_dirty_59;
      6'd60: bs__h94492 = v_reg_dirty_60;
      6'd61: bs__h94492 = v_reg_dirty_61;
      6'd62: bs__h94492 = v_reg_dirty_62;
      6'd63: bs__h94492 = v_reg_dirty_63;
    endcase
  end
  always@(ff_from_tlb_rv_port1__read or
	  v_reg_valid_0 or
	  v_reg_valid_1 or
	  v_reg_valid_2 or
	  v_reg_valid_3 or
	  v_reg_valid_4 or
	  v_reg_valid_5 or
	  v_reg_valid_6 or
	  v_reg_valid_7 or
	  v_reg_valid_8 or
	  v_reg_valid_9 or
	  v_reg_valid_10 or
	  v_reg_valid_11 or
	  v_reg_valid_12 or
	  v_reg_valid_13 or
	  v_reg_valid_14 or
	  v_reg_valid_15 or
	  v_reg_valid_16 or
	  v_reg_valid_17 or
	  v_reg_valid_18 or
	  v_reg_valid_19 or
	  v_reg_valid_20 or
	  v_reg_valid_21 or
	  v_reg_valid_22 or
	  v_reg_valid_23 or
	  v_reg_valid_24 or
	  v_reg_valid_25 or
	  v_reg_valid_26 or
	  v_reg_valid_27 or
	  v_reg_valid_28 or
	  v_reg_valid_29 or
	  v_reg_valid_30 or
	  v_reg_valid_31 or
	  v_reg_valid_32 or
	  v_reg_valid_33 or
	  v_reg_valid_34 or
	  v_reg_valid_35 or
	  v_reg_valid_36 or
	  v_reg_valid_37 or
	  v_reg_valid_38 or
	  v_reg_valid_39 or
	  v_reg_valid_40 or
	  v_reg_valid_41 or
	  v_reg_valid_42 or
	  v_reg_valid_43 or
	  v_reg_valid_44 or
	  v_reg_valid_45 or
	  v_reg_valid_46 or
	  v_reg_valid_47 or
	  v_reg_valid_48 or
	  v_reg_valid_49 or
	  v_reg_valid_50 or
	  v_reg_valid_51 or
	  v_reg_valid_52 or
	  v_reg_valid_53 or
	  v_reg_valid_54 or
	  v_reg_valid_55 or
	  v_reg_valid_56 or
	  v_reg_valid_57 or
	  v_reg_valid_58 or
	  v_reg_valid_59 or
	  v_reg_valid_60 or
	  v_reg_valid_61 or v_reg_valid_62 or v_reg_valid_63)
  begin
    case (ff_from_tlb_rv_port1__read[19:14])
      6'd0:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_0;
      6'd1:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_1;
      6'd2:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_2;
      6'd3:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_3;
      6'd4:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_4;
      6'd5:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_5;
      6'd6:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_6;
      6'd7:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_7;
      6'd8:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_8;
      6'd9:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_9;
      6'd10:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_10;
      6'd11:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_11;
      6'd12:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_12;
      6'd13:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_13;
      6'd14:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_14;
      6'd15:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_15;
      6'd16:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_16;
      6'd17:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_17;
      6'd18:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_18;
      6'd19:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_19;
      6'd20:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_20;
      6'd21:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_21;
      6'd22:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_22;
      6'd23:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_23;
      6'd24:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_24;
      6'd25:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_25;
      6'd26:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_26;
      6'd27:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_27;
      6'd28:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_28;
      6'd29:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_29;
      6'd30:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_30;
      6'd31:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_31;
      6'd32:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_32;
      6'd33:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_33;
      6'd34:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_34;
      6'd35:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_35;
      6'd36:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_36;
      6'd37:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_37;
      6'd38:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_38;
      6'd39:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_39;
      6'd40:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_40;
      6'd41:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_41;
      6'd42:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_42;
      6'd43:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_43;
      6'd44:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_44;
      6'd45:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_45;
      6'd46:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_46;
      6'd47:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_47;
      6'd48:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_48;
      6'd49:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_49;
      6'd50:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_50;
      6'd51:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_51;
      6'd52:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_52;
      6'd53:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_53;
      6'd54:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_54;
      6'd55:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_55;
      6'd56:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_56;
      6'd57:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_57;
      6'd58:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_58;
      6'd59:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_59;
      6'd60:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_60;
      6'd61:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_61;
      6'd62:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_62;
      6'd63:
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d271 =
	      v_reg_valid_63;
    endcase
  end
  always@(ma_curr_priv_c)
  begin
    case (ma_curr_priv_c)
      2'd1, 2'd3:
	  CASE_ma_curr_priv_c_1_ma_curr_priv_c_3_ma_curr_ETC__q1 =
	      ma_curr_priv_c;
      default: CASE_ma_curr_priv_c_1_ma_curr_priv_c_3_ma_curr_ETC__q1 = 2'd0;
    endcase
  end
  always@(ff_core_request_D_OUT or x__h86256)
  begin
    case (ff_core_request_D_OUT[71:70])
      2'b0: lv_sign__h37927 = x__h86256[7];
      2'b01: lv_sign__h37927 = x__h86256[15];
      default: lv_sign__h37927 = x__h86256[31];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ff_core_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      72'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_from_tlb_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      40'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_hold_request_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      141'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_ptw_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      72'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_read_mem_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      66'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	ff_write_mem_response_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'bx /* unspecified value */  };
	replacement_v_count_0 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_1 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_10 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_11 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_12 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_13 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_14 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_15 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_16 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_17 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_18 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_19 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_2 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_20 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_21 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_22 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_23 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_24 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_25 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_26 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_27 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_28 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_29 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_3 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_30 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_31 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_32 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_33 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_34 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_35 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_36 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_37 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_38 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_39 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_4 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_40 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_41 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_42 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_43 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_44 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_45 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_46 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_47 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_48 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_49 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_5 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_50 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_51 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_52 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_53 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_54 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_55 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_56 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_57 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_58 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_59 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_6 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_60 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_61 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_62 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_63 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_7 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_8 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	replacement_v_count_9 <= `BSV_ASSIGNMENT_DELAY 2'd3;
	rg_fence_pending <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_fence_set <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_fence_stall <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_fence_way <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_globaldirty <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_handling_miss <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_performing_replay <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_polling_mode <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_recent_req <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_release_readphase <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_wEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	v_reg_dirty_0 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_1 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_10 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_11 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_12 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_13 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_14 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_15 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_16 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_17 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_18 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_19 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_2 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_20 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_21 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_22 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_23 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_24 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_25 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_26 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_27 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_28 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_29 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_3 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_30 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_31 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_32 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_33 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_34 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_35 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_36 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_37 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_38 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_39 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_4 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_40 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_41 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_42 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_43 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_44 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_45 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_46 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_47 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_48 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_49 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_5 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_50 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_51 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_52 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_53 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_54 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_55 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_56 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_57 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_58 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_59 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_6 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_60 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_61 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_62 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_63 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_7 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_8 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_dirty_9 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_0 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_1 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_10 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_11 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_12 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_13 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_14 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_15 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_16 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_17 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_18 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_19 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_2 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_20 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_21 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_22 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_23 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_24 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_25 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_26 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_27 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_28 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_29 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_3 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_30 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_31 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_32 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_33 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_34 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_35 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_36 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_37 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_38 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_39 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_4 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_40 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_41 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_42 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_43 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_44 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_45 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_46 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_47 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_48 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_49 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_5 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_50 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_51 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_52 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_53 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_54 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_55 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_56 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_57 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_58 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_59 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_6 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_60 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_61 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_62 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_63 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_7 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_8 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	v_reg_valid_9 <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (ff_core_response_rv_EN)
	  ff_core_response_rv <= `BSV_ASSIGNMENT_DELAY
	      ff_core_response_rv_D_IN;
	if (ff_from_tlb_rv_EN)
	  ff_from_tlb_rv <= `BSV_ASSIGNMENT_DELAY ff_from_tlb_rv_D_IN;
	if (ff_hold_request_rv_EN)
	  ff_hold_request_rv <= `BSV_ASSIGNMENT_DELAY ff_hold_request_rv_D_IN;
	if (ff_ptw_response_rv_EN)
	  ff_ptw_response_rv <= `BSV_ASSIGNMENT_DELAY ff_ptw_response_rv_D_IN;
	if (ff_read_mem_response_rv_EN)
	  ff_read_mem_response_rv <= `BSV_ASSIGNMENT_DELAY
	      ff_read_mem_response_rv_D_IN;
	if (ff_write_mem_response_rv_EN)
	  ff_write_mem_response_rv <= `BSV_ASSIGNMENT_DELAY
	      ff_write_mem_response_rv_D_IN;
	if (replacement_v_count_0_EN)
	  replacement_v_count_0 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_0_D_IN;
	if (replacement_v_count_1_EN)
	  replacement_v_count_1 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_1_D_IN;
	if (replacement_v_count_10_EN)
	  replacement_v_count_10 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_10_D_IN;
	if (replacement_v_count_11_EN)
	  replacement_v_count_11 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_11_D_IN;
	if (replacement_v_count_12_EN)
	  replacement_v_count_12 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_12_D_IN;
	if (replacement_v_count_13_EN)
	  replacement_v_count_13 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_13_D_IN;
	if (replacement_v_count_14_EN)
	  replacement_v_count_14 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_14_D_IN;
	if (replacement_v_count_15_EN)
	  replacement_v_count_15 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_15_D_IN;
	if (replacement_v_count_16_EN)
	  replacement_v_count_16 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_16_D_IN;
	if (replacement_v_count_17_EN)
	  replacement_v_count_17 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_17_D_IN;
	if (replacement_v_count_18_EN)
	  replacement_v_count_18 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_18_D_IN;
	if (replacement_v_count_19_EN)
	  replacement_v_count_19 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_19_D_IN;
	if (replacement_v_count_2_EN)
	  replacement_v_count_2 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_2_D_IN;
	if (replacement_v_count_20_EN)
	  replacement_v_count_20 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_20_D_IN;
	if (replacement_v_count_21_EN)
	  replacement_v_count_21 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_21_D_IN;
	if (replacement_v_count_22_EN)
	  replacement_v_count_22 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_22_D_IN;
	if (replacement_v_count_23_EN)
	  replacement_v_count_23 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_23_D_IN;
	if (replacement_v_count_24_EN)
	  replacement_v_count_24 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_24_D_IN;
	if (replacement_v_count_25_EN)
	  replacement_v_count_25 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_25_D_IN;
	if (replacement_v_count_26_EN)
	  replacement_v_count_26 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_26_D_IN;
	if (replacement_v_count_27_EN)
	  replacement_v_count_27 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_27_D_IN;
	if (replacement_v_count_28_EN)
	  replacement_v_count_28 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_28_D_IN;
	if (replacement_v_count_29_EN)
	  replacement_v_count_29 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_29_D_IN;
	if (replacement_v_count_3_EN)
	  replacement_v_count_3 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_3_D_IN;
	if (replacement_v_count_30_EN)
	  replacement_v_count_30 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_30_D_IN;
	if (replacement_v_count_31_EN)
	  replacement_v_count_31 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_31_D_IN;
	if (replacement_v_count_32_EN)
	  replacement_v_count_32 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_32_D_IN;
	if (replacement_v_count_33_EN)
	  replacement_v_count_33 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_33_D_IN;
	if (replacement_v_count_34_EN)
	  replacement_v_count_34 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_34_D_IN;
	if (replacement_v_count_35_EN)
	  replacement_v_count_35 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_35_D_IN;
	if (replacement_v_count_36_EN)
	  replacement_v_count_36 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_36_D_IN;
	if (replacement_v_count_37_EN)
	  replacement_v_count_37 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_37_D_IN;
	if (replacement_v_count_38_EN)
	  replacement_v_count_38 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_38_D_IN;
	if (replacement_v_count_39_EN)
	  replacement_v_count_39 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_39_D_IN;
	if (replacement_v_count_4_EN)
	  replacement_v_count_4 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_4_D_IN;
	if (replacement_v_count_40_EN)
	  replacement_v_count_40 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_40_D_IN;
	if (replacement_v_count_41_EN)
	  replacement_v_count_41 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_41_D_IN;
	if (replacement_v_count_42_EN)
	  replacement_v_count_42 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_42_D_IN;
	if (replacement_v_count_43_EN)
	  replacement_v_count_43 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_43_D_IN;
	if (replacement_v_count_44_EN)
	  replacement_v_count_44 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_44_D_IN;
	if (replacement_v_count_45_EN)
	  replacement_v_count_45 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_45_D_IN;
	if (replacement_v_count_46_EN)
	  replacement_v_count_46 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_46_D_IN;
	if (replacement_v_count_47_EN)
	  replacement_v_count_47 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_47_D_IN;
	if (replacement_v_count_48_EN)
	  replacement_v_count_48 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_48_D_IN;
	if (replacement_v_count_49_EN)
	  replacement_v_count_49 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_49_D_IN;
	if (replacement_v_count_5_EN)
	  replacement_v_count_5 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_5_D_IN;
	if (replacement_v_count_50_EN)
	  replacement_v_count_50 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_50_D_IN;
	if (replacement_v_count_51_EN)
	  replacement_v_count_51 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_51_D_IN;
	if (replacement_v_count_52_EN)
	  replacement_v_count_52 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_52_D_IN;
	if (replacement_v_count_53_EN)
	  replacement_v_count_53 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_53_D_IN;
	if (replacement_v_count_54_EN)
	  replacement_v_count_54 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_54_D_IN;
	if (replacement_v_count_55_EN)
	  replacement_v_count_55 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_55_D_IN;
	if (replacement_v_count_56_EN)
	  replacement_v_count_56 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_56_D_IN;
	if (replacement_v_count_57_EN)
	  replacement_v_count_57 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_57_D_IN;
	if (replacement_v_count_58_EN)
	  replacement_v_count_58 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_58_D_IN;
	if (replacement_v_count_59_EN)
	  replacement_v_count_59 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_59_D_IN;
	if (replacement_v_count_6_EN)
	  replacement_v_count_6 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_6_D_IN;
	if (replacement_v_count_60_EN)
	  replacement_v_count_60 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_60_D_IN;
	if (replacement_v_count_61_EN)
	  replacement_v_count_61 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_61_D_IN;
	if (replacement_v_count_62_EN)
	  replacement_v_count_62 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_62_D_IN;
	if (replacement_v_count_63_EN)
	  replacement_v_count_63 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_63_D_IN;
	if (replacement_v_count_7_EN)
	  replacement_v_count_7 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_7_D_IN;
	if (replacement_v_count_8_EN)
	  replacement_v_count_8 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_8_D_IN;
	if (replacement_v_count_9_EN)
	  replacement_v_count_9 <= `BSV_ASSIGNMENT_DELAY
	      replacement_v_count_9_D_IN;
	if (rg_fence_pending_EN)
	  rg_fence_pending <= `BSV_ASSIGNMENT_DELAY rg_fence_pending_D_IN;
	if (rg_fence_set_EN)
	  rg_fence_set <= `BSV_ASSIGNMENT_DELAY rg_fence_set_D_IN;
	if (rg_fence_stall_EN)
	  rg_fence_stall <= `BSV_ASSIGNMENT_DELAY rg_fence_stall_D_IN;
	if (rg_fence_way_EN)
	  rg_fence_way <= `BSV_ASSIGNMENT_DELAY rg_fence_way_D_IN;
	if (rg_globaldirty_EN)
	  rg_globaldirty <= `BSV_ASSIGNMENT_DELAY rg_globaldirty_D_IN;
	if (rg_handling_miss_EN)
	  rg_handling_miss <= `BSV_ASSIGNMENT_DELAY rg_handling_miss_D_IN;
	if (rg_performing_replay_EN)
	  rg_performing_replay <= `BSV_ASSIGNMENT_DELAY
	      rg_performing_replay_D_IN;
	if (rg_polling_mode_EN)
	  rg_polling_mode <= `BSV_ASSIGNMENT_DELAY rg_polling_mode_D_IN;
	if (rg_recent_req_EN)
	  rg_recent_req <= `BSV_ASSIGNMENT_DELAY rg_recent_req_D_IN;
	if (rg_release_readphase_EN)
	  rg_release_readphase <= `BSV_ASSIGNMENT_DELAY
	      rg_release_readphase_D_IN;
	if (rg_wEpoch_EN) rg_wEpoch <= `BSV_ASSIGNMENT_DELAY rg_wEpoch_D_IN;
	if (v_reg_dirty_0_EN)
	  v_reg_dirty_0 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_0_D_IN;
	if (v_reg_dirty_1_EN)
	  v_reg_dirty_1 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_1_D_IN;
	if (v_reg_dirty_10_EN)
	  v_reg_dirty_10 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_10_D_IN;
	if (v_reg_dirty_11_EN)
	  v_reg_dirty_11 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_11_D_IN;
	if (v_reg_dirty_12_EN)
	  v_reg_dirty_12 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_12_D_IN;
	if (v_reg_dirty_13_EN)
	  v_reg_dirty_13 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_13_D_IN;
	if (v_reg_dirty_14_EN)
	  v_reg_dirty_14 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_14_D_IN;
	if (v_reg_dirty_15_EN)
	  v_reg_dirty_15 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_15_D_IN;
	if (v_reg_dirty_16_EN)
	  v_reg_dirty_16 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_16_D_IN;
	if (v_reg_dirty_17_EN)
	  v_reg_dirty_17 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_17_D_IN;
	if (v_reg_dirty_18_EN)
	  v_reg_dirty_18 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_18_D_IN;
	if (v_reg_dirty_19_EN)
	  v_reg_dirty_19 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_19_D_IN;
	if (v_reg_dirty_2_EN)
	  v_reg_dirty_2 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_2_D_IN;
	if (v_reg_dirty_20_EN)
	  v_reg_dirty_20 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_20_D_IN;
	if (v_reg_dirty_21_EN)
	  v_reg_dirty_21 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_21_D_IN;
	if (v_reg_dirty_22_EN)
	  v_reg_dirty_22 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_22_D_IN;
	if (v_reg_dirty_23_EN)
	  v_reg_dirty_23 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_23_D_IN;
	if (v_reg_dirty_24_EN)
	  v_reg_dirty_24 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_24_D_IN;
	if (v_reg_dirty_25_EN)
	  v_reg_dirty_25 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_25_D_IN;
	if (v_reg_dirty_26_EN)
	  v_reg_dirty_26 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_26_D_IN;
	if (v_reg_dirty_27_EN)
	  v_reg_dirty_27 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_27_D_IN;
	if (v_reg_dirty_28_EN)
	  v_reg_dirty_28 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_28_D_IN;
	if (v_reg_dirty_29_EN)
	  v_reg_dirty_29 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_29_D_IN;
	if (v_reg_dirty_3_EN)
	  v_reg_dirty_3 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_3_D_IN;
	if (v_reg_dirty_30_EN)
	  v_reg_dirty_30 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_30_D_IN;
	if (v_reg_dirty_31_EN)
	  v_reg_dirty_31 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_31_D_IN;
	if (v_reg_dirty_32_EN)
	  v_reg_dirty_32 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_32_D_IN;
	if (v_reg_dirty_33_EN)
	  v_reg_dirty_33 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_33_D_IN;
	if (v_reg_dirty_34_EN)
	  v_reg_dirty_34 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_34_D_IN;
	if (v_reg_dirty_35_EN)
	  v_reg_dirty_35 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_35_D_IN;
	if (v_reg_dirty_36_EN)
	  v_reg_dirty_36 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_36_D_IN;
	if (v_reg_dirty_37_EN)
	  v_reg_dirty_37 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_37_D_IN;
	if (v_reg_dirty_38_EN)
	  v_reg_dirty_38 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_38_D_IN;
	if (v_reg_dirty_39_EN)
	  v_reg_dirty_39 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_39_D_IN;
	if (v_reg_dirty_4_EN)
	  v_reg_dirty_4 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_4_D_IN;
	if (v_reg_dirty_40_EN)
	  v_reg_dirty_40 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_40_D_IN;
	if (v_reg_dirty_41_EN)
	  v_reg_dirty_41 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_41_D_IN;
	if (v_reg_dirty_42_EN)
	  v_reg_dirty_42 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_42_D_IN;
	if (v_reg_dirty_43_EN)
	  v_reg_dirty_43 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_43_D_IN;
	if (v_reg_dirty_44_EN)
	  v_reg_dirty_44 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_44_D_IN;
	if (v_reg_dirty_45_EN)
	  v_reg_dirty_45 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_45_D_IN;
	if (v_reg_dirty_46_EN)
	  v_reg_dirty_46 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_46_D_IN;
	if (v_reg_dirty_47_EN)
	  v_reg_dirty_47 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_47_D_IN;
	if (v_reg_dirty_48_EN)
	  v_reg_dirty_48 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_48_D_IN;
	if (v_reg_dirty_49_EN)
	  v_reg_dirty_49 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_49_D_IN;
	if (v_reg_dirty_5_EN)
	  v_reg_dirty_5 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_5_D_IN;
	if (v_reg_dirty_50_EN)
	  v_reg_dirty_50 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_50_D_IN;
	if (v_reg_dirty_51_EN)
	  v_reg_dirty_51 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_51_D_IN;
	if (v_reg_dirty_52_EN)
	  v_reg_dirty_52 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_52_D_IN;
	if (v_reg_dirty_53_EN)
	  v_reg_dirty_53 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_53_D_IN;
	if (v_reg_dirty_54_EN)
	  v_reg_dirty_54 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_54_D_IN;
	if (v_reg_dirty_55_EN)
	  v_reg_dirty_55 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_55_D_IN;
	if (v_reg_dirty_56_EN)
	  v_reg_dirty_56 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_56_D_IN;
	if (v_reg_dirty_57_EN)
	  v_reg_dirty_57 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_57_D_IN;
	if (v_reg_dirty_58_EN)
	  v_reg_dirty_58 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_58_D_IN;
	if (v_reg_dirty_59_EN)
	  v_reg_dirty_59 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_59_D_IN;
	if (v_reg_dirty_6_EN)
	  v_reg_dirty_6 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_6_D_IN;
	if (v_reg_dirty_60_EN)
	  v_reg_dirty_60 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_60_D_IN;
	if (v_reg_dirty_61_EN)
	  v_reg_dirty_61 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_61_D_IN;
	if (v_reg_dirty_62_EN)
	  v_reg_dirty_62 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_62_D_IN;
	if (v_reg_dirty_63_EN)
	  v_reg_dirty_63 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_63_D_IN;
	if (v_reg_dirty_7_EN)
	  v_reg_dirty_7 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_7_D_IN;
	if (v_reg_dirty_8_EN)
	  v_reg_dirty_8 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_8_D_IN;
	if (v_reg_dirty_9_EN)
	  v_reg_dirty_9 <= `BSV_ASSIGNMENT_DELAY v_reg_dirty_9_D_IN;
	if (v_reg_valid_0_EN)
	  v_reg_valid_0 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_0_D_IN;
	if (v_reg_valid_1_EN)
	  v_reg_valid_1 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_1_D_IN;
	if (v_reg_valid_10_EN)
	  v_reg_valid_10 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_10_D_IN;
	if (v_reg_valid_11_EN)
	  v_reg_valid_11 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_11_D_IN;
	if (v_reg_valid_12_EN)
	  v_reg_valid_12 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_12_D_IN;
	if (v_reg_valid_13_EN)
	  v_reg_valid_13 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_13_D_IN;
	if (v_reg_valid_14_EN)
	  v_reg_valid_14 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_14_D_IN;
	if (v_reg_valid_15_EN)
	  v_reg_valid_15 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_15_D_IN;
	if (v_reg_valid_16_EN)
	  v_reg_valid_16 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_16_D_IN;
	if (v_reg_valid_17_EN)
	  v_reg_valid_17 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_17_D_IN;
	if (v_reg_valid_18_EN)
	  v_reg_valid_18 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_18_D_IN;
	if (v_reg_valid_19_EN)
	  v_reg_valid_19 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_19_D_IN;
	if (v_reg_valid_2_EN)
	  v_reg_valid_2 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_2_D_IN;
	if (v_reg_valid_20_EN)
	  v_reg_valid_20 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_20_D_IN;
	if (v_reg_valid_21_EN)
	  v_reg_valid_21 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_21_D_IN;
	if (v_reg_valid_22_EN)
	  v_reg_valid_22 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_22_D_IN;
	if (v_reg_valid_23_EN)
	  v_reg_valid_23 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_23_D_IN;
	if (v_reg_valid_24_EN)
	  v_reg_valid_24 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_24_D_IN;
	if (v_reg_valid_25_EN)
	  v_reg_valid_25 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_25_D_IN;
	if (v_reg_valid_26_EN)
	  v_reg_valid_26 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_26_D_IN;
	if (v_reg_valid_27_EN)
	  v_reg_valid_27 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_27_D_IN;
	if (v_reg_valid_28_EN)
	  v_reg_valid_28 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_28_D_IN;
	if (v_reg_valid_29_EN)
	  v_reg_valid_29 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_29_D_IN;
	if (v_reg_valid_3_EN)
	  v_reg_valid_3 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_3_D_IN;
	if (v_reg_valid_30_EN)
	  v_reg_valid_30 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_30_D_IN;
	if (v_reg_valid_31_EN)
	  v_reg_valid_31 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_31_D_IN;
	if (v_reg_valid_32_EN)
	  v_reg_valid_32 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_32_D_IN;
	if (v_reg_valid_33_EN)
	  v_reg_valid_33 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_33_D_IN;
	if (v_reg_valid_34_EN)
	  v_reg_valid_34 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_34_D_IN;
	if (v_reg_valid_35_EN)
	  v_reg_valid_35 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_35_D_IN;
	if (v_reg_valid_36_EN)
	  v_reg_valid_36 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_36_D_IN;
	if (v_reg_valid_37_EN)
	  v_reg_valid_37 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_37_D_IN;
	if (v_reg_valid_38_EN)
	  v_reg_valid_38 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_38_D_IN;
	if (v_reg_valid_39_EN)
	  v_reg_valid_39 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_39_D_IN;
	if (v_reg_valid_4_EN)
	  v_reg_valid_4 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_4_D_IN;
	if (v_reg_valid_40_EN)
	  v_reg_valid_40 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_40_D_IN;
	if (v_reg_valid_41_EN)
	  v_reg_valid_41 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_41_D_IN;
	if (v_reg_valid_42_EN)
	  v_reg_valid_42 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_42_D_IN;
	if (v_reg_valid_43_EN)
	  v_reg_valid_43 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_43_D_IN;
	if (v_reg_valid_44_EN)
	  v_reg_valid_44 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_44_D_IN;
	if (v_reg_valid_45_EN)
	  v_reg_valid_45 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_45_D_IN;
	if (v_reg_valid_46_EN)
	  v_reg_valid_46 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_46_D_IN;
	if (v_reg_valid_47_EN)
	  v_reg_valid_47 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_47_D_IN;
	if (v_reg_valid_48_EN)
	  v_reg_valid_48 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_48_D_IN;
	if (v_reg_valid_49_EN)
	  v_reg_valid_49 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_49_D_IN;
	if (v_reg_valid_5_EN)
	  v_reg_valid_5 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_5_D_IN;
	if (v_reg_valid_50_EN)
	  v_reg_valid_50 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_50_D_IN;
	if (v_reg_valid_51_EN)
	  v_reg_valid_51 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_51_D_IN;
	if (v_reg_valid_52_EN)
	  v_reg_valid_52 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_52_D_IN;
	if (v_reg_valid_53_EN)
	  v_reg_valid_53 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_53_D_IN;
	if (v_reg_valid_54_EN)
	  v_reg_valid_54 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_54_D_IN;
	if (v_reg_valid_55_EN)
	  v_reg_valid_55 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_55_D_IN;
	if (v_reg_valid_56_EN)
	  v_reg_valid_56 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_56_D_IN;
	if (v_reg_valid_57_EN)
	  v_reg_valid_57 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_57_D_IN;
	if (v_reg_valid_58_EN)
	  v_reg_valid_58 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_58_D_IN;
	if (v_reg_valid_59_EN)
	  v_reg_valid_59 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_59_D_IN;
	if (v_reg_valid_6_EN)
	  v_reg_valid_6 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_6_D_IN;
	if (v_reg_valid_60_EN)
	  v_reg_valid_60 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_60_D_IN;
	if (v_reg_valid_61_EN)
	  v_reg_valid_61 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_61_D_IN;
	if (v_reg_valid_62_EN)
	  v_reg_valid_62 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_62_D_IN;
	if (v_reg_valid_63_EN)
	  v_reg_valid_63 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_63_D_IN;
	if (v_reg_valid_7_EN)
	  v_reg_valid_7 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_7_D_IN;
	if (v_reg_valid_8_EN)
	  v_reg_valid_8 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_8_D_IN;
	if (v_reg_valid_9_EN)
	  v_reg_valid_9 <= `BSV_ASSIGNMENT_DELAY v_reg_valid_9_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ff_core_response_rv = 73'h0AAAAAAAAAAAAAAAAAA;
    ff_from_tlb_rv = 41'h0AAAAAAAAAA;
    ff_hold_request_rv = 142'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ff_ptw_response_rv = 73'h0AAAAAAAAAAAAAAAAAA;
    ff_read_mem_response_rv = 67'h2AAAAAAAAAAAAAAAA;
    ff_write_mem_response_rv = 2'h2;
    replacement_v_count_0 = 2'h2;
    replacement_v_count_1 = 2'h2;
    replacement_v_count_10 = 2'h2;
    replacement_v_count_11 = 2'h2;
    replacement_v_count_12 = 2'h2;
    replacement_v_count_13 = 2'h2;
    replacement_v_count_14 = 2'h2;
    replacement_v_count_15 = 2'h2;
    replacement_v_count_16 = 2'h2;
    replacement_v_count_17 = 2'h2;
    replacement_v_count_18 = 2'h2;
    replacement_v_count_19 = 2'h2;
    replacement_v_count_2 = 2'h2;
    replacement_v_count_20 = 2'h2;
    replacement_v_count_21 = 2'h2;
    replacement_v_count_22 = 2'h2;
    replacement_v_count_23 = 2'h2;
    replacement_v_count_24 = 2'h2;
    replacement_v_count_25 = 2'h2;
    replacement_v_count_26 = 2'h2;
    replacement_v_count_27 = 2'h2;
    replacement_v_count_28 = 2'h2;
    replacement_v_count_29 = 2'h2;
    replacement_v_count_3 = 2'h2;
    replacement_v_count_30 = 2'h2;
    replacement_v_count_31 = 2'h2;
    replacement_v_count_32 = 2'h2;
    replacement_v_count_33 = 2'h2;
    replacement_v_count_34 = 2'h2;
    replacement_v_count_35 = 2'h2;
    replacement_v_count_36 = 2'h2;
    replacement_v_count_37 = 2'h2;
    replacement_v_count_38 = 2'h2;
    replacement_v_count_39 = 2'h2;
    replacement_v_count_4 = 2'h2;
    replacement_v_count_40 = 2'h2;
    replacement_v_count_41 = 2'h2;
    replacement_v_count_42 = 2'h2;
    replacement_v_count_43 = 2'h2;
    replacement_v_count_44 = 2'h2;
    replacement_v_count_45 = 2'h2;
    replacement_v_count_46 = 2'h2;
    replacement_v_count_47 = 2'h2;
    replacement_v_count_48 = 2'h2;
    replacement_v_count_49 = 2'h2;
    replacement_v_count_5 = 2'h2;
    replacement_v_count_50 = 2'h2;
    replacement_v_count_51 = 2'h2;
    replacement_v_count_52 = 2'h2;
    replacement_v_count_53 = 2'h2;
    replacement_v_count_54 = 2'h2;
    replacement_v_count_55 = 2'h2;
    replacement_v_count_56 = 2'h2;
    replacement_v_count_57 = 2'h2;
    replacement_v_count_58 = 2'h2;
    replacement_v_count_59 = 2'h2;
    replacement_v_count_6 = 2'h2;
    replacement_v_count_60 = 2'h2;
    replacement_v_count_61 = 2'h2;
    replacement_v_count_62 = 2'h2;
    replacement_v_count_63 = 2'h2;
    replacement_v_count_7 = 2'h2;
    replacement_v_count_8 = 2'h2;
    replacement_v_count_9 = 2'h2;
    rg_fence_pending = 1'h0;
    rg_fence_set = 6'h2A;
    rg_fence_stall = 1'h0;
    rg_fence_way = 2'h2;
    rg_globaldirty = 1'h0;
    rg_handling_miss = 1'h0;
    rg_performing_replay = 1'h0;
    rg_polling_mode = 1'h0;
    rg_recent_req = 6'h2A;
    rg_release_readphase = 1'h0;
    rg_wEpoch = 1'h0;
    v_reg_dirty_0 = 4'hA;
    v_reg_dirty_1 = 4'hA;
    v_reg_dirty_10 = 4'hA;
    v_reg_dirty_11 = 4'hA;
    v_reg_dirty_12 = 4'hA;
    v_reg_dirty_13 = 4'hA;
    v_reg_dirty_14 = 4'hA;
    v_reg_dirty_15 = 4'hA;
    v_reg_dirty_16 = 4'hA;
    v_reg_dirty_17 = 4'hA;
    v_reg_dirty_18 = 4'hA;
    v_reg_dirty_19 = 4'hA;
    v_reg_dirty_2 = 4'hA;
    v_reg_dirty_20 = 4'hA;
    v_reg_dirty_21 = 4'hA;
    v_reg_dirty_22 = 4'hA;
    v_reg_dirty_23 = 4'hA;
    v_reg_dirty_24 = 4'hA;
    v_reg_dirty_25 = 4'hA;
    v_reg_dirty_26 = 4'hA;
    v_reg_dirty_27 = 4'hA;
    v_reg_dirty_28 = 4'hA;
    v_reg_dirty_29 = 4'hA;
    v_reg_dirty_3 = 4'hA;
    v_reg_dirty_30 = 4'hA;
    v_reg_dirty_31 = 4'hA;
    v_reg_dirty_32 = 4'hA;
    v_reg_dirty_33 = 4'hA;
    v_reg_dirty_34 = 4'hA;
    v_reg_dirty_35 = 4'hA;
    v_reg_dirty_36 = 4'hA;
    v_reg_dirty_37 = 4'hA;
    v_reg_dirty_38 = 4'hA;
    v_reg_dirty_39 = 4'hA;
    v_reg_dirty_4 = 4'hA;
    v_reg_dirty_40 = 4'hA;
    v_reg_dirty_41 = 4'hA;
    v_reg_dirty_42 = 4'hA;
    v_reg_dirty_43 = 4'hA;
    v_reg_dirty_44 = 4'hA;
    v_reg_dirty_45 = 4'hA;
    v_reg_dirty_46 = 4'hA;
    v_reg_dirty_47 = 4'hA;
    v_reg_dirty_48 = 4'hA;
    v_reg_dirty_49 = 4'hA;
    v_reg_dirty_5 = 4'hA;
    v_reg_dirty_50 = 4'hA;
    v_reg_dirty_51 = 4'hA;
    v_reg_dirty_52 = 4'hA;
    v_reg_dirty_53 = 4'hA;
    v_reg_dirty_54 = 4'hA;
    v_reg_dirty_55 = 4'hA;
    v_reg_dirty_56 = 4'hA;
    v_reg_dirty_57 = 4'hA;
    v_reg_dirty_58 = 4'hA;
    v_reg_dirty_59 = 4'hA;
    v_reg_dirty_6 = 4'hA;
    v_reg_dirty_60 = 4'hA;
    v_reg_dirty_61 = 4'hA;
    v_reg_dirty_62 = 4'hA;
    v_reg_dirty_63 = 4'hA;
    v_reg_dirty_7 = 4'hA;
    v_reg_dirty_8 = 4'hA;
    v_reg_dirty_9 = 4'hA;
    v_reg_valid_0 = 4'hA;
    v_reg_valid_1 = 4'hA;
    v_reg_valid_10 = 4'hA;
    v_reg_valid_11 = 4'hA;
    v_reg_valid_12 = 4'hA;
    v_reg_valid_13 = 4'hA;
    v_reg_valid_14 = 4'hA;
    v_reg_valid_15 = 4'hA;
    v_reg_valid_16 = 4'hA;
    v_reg_valid_17 = 4'hA;
    v_reg_valid_18 = 4'hA;
    v_reg_valid_19 = 4'hA;
    v_reg_valid_2 = 4'hA;
    v_reg_valid_20 = 4'hA;
    v_reg_valid_21 = 4'hA;
    v_reg_valid_22 = 4'hA;
    v_reg_valid_23 = 4'hA;
    v_reg_valid_24 = 4'hA;
    v_reg_valid_25 = 4'hA;
    v_reg_valid_26 = 4'hA;
    v_reg_valid_27 = 4'hA;
    v_reg_valid_28 = 4'hA;
    v_reg_valid_29 = 4'hA;
    v_reg_valid_3 = 4'hA;
    v_reg_valid_30 = 4'hA;
    v_reg_valid_31 = 4'hA;
    v_reg_valid_32 = 4'hA;
    v_reg_valid_33 = 4'hA;
    v_reg_valid_34 = 4'hA;
    v_reg_valid_35 = 4'hA;
    v_reg_valid_36 = 4'hA;
    v_reg_valid_37 = 4'hA;
    v_reg_valid_38 = 4'hA;
    v_reg_valid_39 = 4'hA;
    v_reg_valid_4 = 4'hA;
    v_reg_valid_40 = 4'hA;
    v_reg_valid_41 = 4'hA;
    v_reg_valid_42 = 4'hA;
    v_reg_valid_43 = 4'hA;
    v_reg_valid_44 = 4'hA;
    v_reg_valid_45 = 4'hA;
    v_reg_valid_46 = 4'hA;
    v_reg_valid_47 = 4'hA;
    v_reg_valid_48 = 4'hA;
    v_reg_valid_49 = 4'hA;
    v_reg_valid_5 = 4'hA;
    v_reg_valid_50 = 4'hA;
    v_reg_valid_51 = 4'hA;
    v_reg_valid_52 = 4'hA;
    v_reg_valid_53 = 4'hA;
    v_reg_valid_54 = 4'hA;
    v_reg_valid_55 = 4'hA;
    v_reg_valid_56 = 4'hA;
    v_reg_valid_57 = 4'hA;
    v_reg_valid_58 = 4'hA;
    v_reg_valid_59 = 4'hA;
    v_reg_valid_6 = 4'hA;
    v_reg_valid_60 = 4'hA;
    v_reg_valid_61 = 4'hA;
    v_reg_valid_62 = 4'hA;
    v_reg_valid_63 = 4'hA;
    v_reg_valid_7 = 4'hA;
    v_reg_valid_8 = 4'hA;
    v_reg_valid_9 = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1886 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1887 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1888 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_886_OR_TASK_testplusargs_887_ETC___d1893 =
	(TASK_testplusargs___d1886 ||
	 TASK_testplusargs___d1887 && TASK_testplusargs___d1888) &&
	put_core_req_put[76];
    TASK_testplusargs_886_OR_TASK_testplusargs_887_ETC___d1895 =
	(TASK_testplusargs___d1886 ||
	 TASK_testplusargs___d1887 && TASK_testplusargs___d1888) &&
	!put_core_req_put[76];
    TASK_testplusargs_886_OR_TASK_testplusargs_887_ETC___d1901 =
	(TASK_testplusargs___d1886 ||
	 TASK_testplusargs___d1887 && TASK_testplusargs___d1888) &&
	put_core_req_put[0];
    TASK_testplusargs_886_OR_TASK_testplusargs_887_ETC___d1903 =
	(TASK_testplusargs___d1886 ||
	 TASK_testplusargs___d1887 && TASK_testplusargs___d1888) &&
	!put_core_req_put[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  v__h119768 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1886 ||
	   TASK_testplusargs___d1887 && TASK_testplusargs___d1888))
	$write("[%10d", v__h119768, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1886 ||
	   TASK_testplusargs___d1887 && TASK_testplusargs___d1888))
	$write("[%2d]DCACHE: Receiving request: ", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1886 ||
	   TASK_testplusargs___d1887 && TASK_testplusargs___d1888))
	$write("DCache_core_request { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1886 ||
	   TASK_testplusargs___d1887 && TASK_testplusargs___d1888))
	$write("'h%h", put_core_req_put[140:77]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1886 ||
	   TASK_testplusargs___d1887 && TASK_testplusargs___d1888))
	$write(", ", "fence: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  TASK_testplusargs_886_OR_TASK_testplusargs_887_ETC___d1893)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  TASK_testplusargs_886_OR_TASK_testplusargs_887_ETC___d1895)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1886 ||
	   TASK_testplusargs___d1887 && TASK_testplusargs___d1888))
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1886 ||
	   TASK_testplusargs___d1887 && TASK_testplusargs___d1888))
	$write("'h%h", put_core_req_put[75]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1886 ||
	   TASK_testplusargs___d1887 && TASK_testplusargs___d1888))
	$write(", ", "access: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1886 ||
	   TASK_testplusargs___d1887 && TASK_testplusargs___d1888))
	$write("'h%h", put_core_req_put[74:73]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1886 ||
	   TASK_testplusargs___d1887 && TASK_testplusargs___d1888))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1886 ||
	   TASK_testplusargs___d1887 && TASK_testplusargs___d1888))
	$write("'h%h", put_core_req_put[72:70]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1886 ||
	   TASK_testplusargs___d1887 && TASK_testplusargs___d1888))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1886 ||
	   TASK_testplusargs___d1887 && TASK_testplusargs___d1888))
	$write("'h%h", put_core_req_put[69:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1886 ||
	   TASK_testplusargs___d1887 && TASK_testplusargs___d1888))
	$write(", ", "atomic_op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1886 ||
	   TASK_testplusargs___d1887 && TASK_testplusargs___d1888))
	$write("'h%h", put_core_req_put[5:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1886 ||
	   TASK_testplusargs___d1887 && TASK_testplusargs___d1888))
	$write(", ", "ptwalk_req: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  TASK_testplusargs_886_OR_TASK_testplusargs_887_ETC___d1901)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  TASK_testplusargs_886_OR_TASK_testplusargs_887_ETC___d1903)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1886 ||
	   TASK_testplusargs___d1887 && TASK_testplusargs___d1888))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1886 ||
	   TASK_testplusargs___d1887 && TASK_testplusargs___d1888))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1904 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1905 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  TASK_testplusargs___d1906 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put)
	begin
	  v__h119954 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1904 ||
	   TASK_testplusargs___d1905 && TASK_testplusargs___d1906))
	$write("[%10d", v__h119954, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1904 ||
	   TASK_testplusargs___d1905 && TASK_testplusargs___d1906))
	$write("[%2d]DCACHE: set:%d", id, set_index__h119470);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_put_core_req_put &&
	  (TASK_testplusargs___d1904 ||
	   TASK_testplusargs___d1905 && TASK_testplusargs___d1906))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store)
	begin
	  TASK_testplusargs___d1975 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store)
	begin
	  TASK_testplusargs___d1976 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store)
	begin
	  TASK_testplusargs___d1977 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_975_OR_TASK_testplusargs_976_ETC___d1988 =
	(TASK_testplusargs___d1975 ||
	 TASK_testplusargs___d1976 && TASK_testplusargs___d1977) &&
	m_storebuffer_mav_store_to_commit[2];
    TASK_testplusargs_975_OR_TASK_testplusargs_976_ETC___d1990 =
	(TASK_testplusargs___d1975 ||
	 TASK_testplusargs___d1976 && TASK_testplusargs___d1977) &&
	!m_storebuffer_mav_store_to_commit[2];
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store)
	begin
	  v__h121131 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1975 ||
	   TASK_testplusargs___d1976 && TASK_testplusargs___d1977))
	$write("[%10d", v__h121131, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1975 ||
	   TASK_testplusargs___d1976 && TASK_testplusargs___d1977))
	$write("[%2d]DCACHE: Commit Store entry:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1975 ||
	   TASK_testplusargs___d1976 && TASK_testplusargs___d1977))
	$write("Storebuffer { ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1975 ||
	   TASK_testplusargs___d1976 && TASK_testplusargs___d1977))
	$write("'h%h", m_storebuffer_mav_store_to_commit[166:135]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1975 ||
	   TASK_testplusargs___d1976 && TASK_testplusargs___d1977))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1975 ||
	   TASK_testplusargs___d1976 && TASK_testplusargs___d1977))
	$write("'h%h", m_storebuffer_mav_store_to_commit[134:71]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1975 ||
	   TASK_testplusargs___d1976 && TASK_testplusargs___d1977))
	$write(", ", "epoch: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1975 ||
	   TASK_testplusargs___d1976 && TASK_testplusargs___d1977))
	$write("'h%h", m_storebuffer_mav_store_to_commit[70]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1975 ||
	   TASK_testplusargs___d1976 && TASK_testplusargs___d1977))
	$write(", ", "fbindex: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1975 ||
	   TASK_testplusargs___d1976 && TASK_testplusargs___d1977))
	$write("'h%h", m_storebuffer_mav_store_to_commit[69:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1975 ||
	   TASK_testplusargs___d1976 && TASK_testplusargs___d1977))
	$write(", ", "mask: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1975 ||
	   TASK_testplusargs___d1976 && TASK_testplusargs___d1977))
	$write("'h%h", m_storebuffer_mav_store_to_commit[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1975 ||
	   TASK_testplusargs___d1976 && TASK_testplusargs___d1977))
	$write(", ", "io: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  TASK_testplusargs_975_OR_TASK_testplusargs_976_ETC___d1988)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  TASK_testplusargs_975_OR_TASK_testplusargs_976_ETC___d1990)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1975 ||
	   TASK_testplusargs___d1976 && TASK_testplusargs___d1977))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1975 ||
	   TASK_testplusargs___d1976 && TASK_testplusargs___d1977))
	$write("'h%h", m_storebuffer_mav_store_to_commit[1:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  (TASK_testplusargs___d1975 ||
	   TASK_testplusargs___d1976 && TASK_testplusargs___d1977))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992 &&
	  m_storebuffer_mav_store_to_commit[2])
	begin
	  TASK_testplusargs___d1994 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992 &&
	  m_storebuffer_mav_store_to_commit[2])
	begin
	  TASK_testplusargs___d1995 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992 &&
	  m_storebuffer_mav_store_to_commit[2])
	begin
	  TASK_testplusargs___d1996 = $test$plusargs("l0");
	  #0;
	end
    m_storebuffer_mav_store_to_commit_981_BIT_2_98_ETC___d1999 =
	m_storebuffer_mav_store_to_commit[2] &&
	(TASK_testplusargs___d1994 ||
	 TASK_testplusargs___d1995 && TASK_testplusargs___d1996);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992 &&
	  m_storebuffer_mav_store_to_commit[2])
	begin
	  v__h121360 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992 &&
	  m_storebuffer_mav_store_to_commit_981_BIT_2_98_ETC___d1999)
	$write("[%10d", v__h121360, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992 &&
	  m_storebuffer_mav_store_to_commit_981_BIT_2_98_ETC___d1999)
	$write("[%2d]DCACHE: Store to NC Addr:%h",
	       id,
	       m_storebuffer_mav_store_to_commit[166:135]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992 &&
	  m_storebuffer_mav_store_to_commit_981_BIT_2_98_ETC___d1999)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992 &&
	  !m_storebuffer_mav_store_to_commit[2])
	begin
	  TASK_testplusargs___d2010 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992 &&
	  !m_storebuffer_mav_store_to_commit[2])
	begin
	  TASK_testplusargs___d2011 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992 &&
	  !m_storebuffer_mav_store_to_commit[2])
	begin
	  TASK_testplusargs___d2012 = $test$plusargs("l0");
	  #0;
	end
    NOT_m_storebuffer_mav_store_to_commit_981_BIT__ETC___d2015 =
	!m_storebuffer_mav_store_to_commit[2] &&
	(TASK_testplusargs___d2010 ||
	 TASK_testplusargs___d2011 && TASK_testplusargs___d2012);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992 &&
	  !m_storebuffer_mav_store_to_commit[2])
	begin
	  v__h121509 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992 &&
	  NOT_m_storebuffer_mav_store_to_commit_981_BIT__ETC___d2015)
	$write("[%10d", v__h121509, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992 &&
	  NOT_m_storebuffer_mav_store_to_commit_981_BIT__ETC___d2015)
	$write("[%2d]DCACHE: Store to Available line", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992 &&
	  NOT_m_storebuffer_mav_store_to_commit_981_BIT__ETC___d2015)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  !m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992)
	begin
	  TASK_testplusargs___d2019 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  !m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992)
	begin
	  TASK_testplusargs___d2020 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  !m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992)
	begin
	  TASK_testplusargs___d2021 = $test$plusargs("l0");
	  #0;
	end
    NOT_m_storebuffer_mav_store_to_commit_981_BIT__ETC___d2024 =
	!m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992 &&
	(TASK_testplusargs___d2019 ||
	 TASK_testplusargs___d2020 && TASK_testplusargs___d2021);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  !m_storebuffer_mav_store_to_commit_981_BIT_70_9_ETC___d1992)
	begin
	  v__h122724 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  NOT_m_storebuffer_mav_store_to_commit_981_BIT__ETC___d2024)
	$write("[%10d", v__h122724, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  NOT_m_storebuffer_mav_store_to_commit_981_BIT__ETC___d2024)
	$write("[%2d]DCACHE: Store is being dropped- epoch mismatch", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_ma_perform_store &&
	  NOT_m_storebuffer_mav_store_to_commit_981_BIT__ETC___d2024)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d238 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d239 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d240 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d246 =
	(TASK_testplusargs___d238 ||
	 TASK_testplusargs___d239 && TASK_testplusargs___d240) &&
	ff_from_tlb_rv_port1__read[7];
    TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d248 =
	(TASK_testplusargs___d238 ||
	 TASK_testplusargs___d239 && TASK_testplusargs___d240) &&
	!ff_from_tlb_rv_port1__read[7];
    TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d251 =
	(TASK_testplusargs___d238 ||
	 TASK_testplusargs___d239 && TASK_testplusargs___d240) &&
	ff_from_tlb_rv_port1__read[0];
    TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d253 =
	(TASK_testplusargs___d238 ||
	 TASK_testplusargs___d239 && TASK_testplusargs___d240) &&
	!ff_from_tlb_rv_port1__read[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h31877 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d238 ||
	   TASK_testplusargs___d239 && TASK_testplusargs___d240))
	$write("[%10d", v__h31877, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d238 ||
	   TASK_testplusargs___d239 && TASK_testplusargs___d240))
	$write("[%2d]DCACHE: Response from PA:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d238 ||
	   TASK_testplusargs___d239 && TASK_testplusargs___d240))
	$write("DTLB_core_response { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d238 ||
	   TASK_testplusargs___d239 && TASK_testplusargs___d240))
	$write("'h%h", ff_from_tlb_rv_port1__read[39:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d238 ||
	   TASK_testplusargs___d239 && TASK_testplusargs___d240))
	$write(", ", "trap: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d246)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d248)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d238 ||
	   TASK_testplusargs___d239 && TASK_testplusargs___d240))
	$write(", ", "cause: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d238 ||
	   TASK_testplusargs___d239 && TASK_testplusargs___d240))
	$write("'h%h", ff_from_tlb_rv_port1__read[6:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d238 ||
	   TASK_testplusargs___d239 && TASK_testplusargs___d240))
	$write(", ", "tlbmiss: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d251)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_38_OR_TASK_testplusargs_39_A_ETC___d253)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d238 ||
	   TASK_testplusargs___d239 && TASK_testplusargs___d240))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d238 ||
	   TASK_testplusargs___d239 && TASK_testplusargs___d240))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d254 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d255 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d256 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h32134 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d254 ||
	   TASK_testplusargs___d255 && TASK_testplusargs___d256))
	$write("[%10d", v__h32134, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d254 ||
	   TASK_testplusargs___d255 && TASK_testplusargs___d256))
	$write("[%2d]DCACHE: lv_tag_resp:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d254 ||
	   TASK_testplusargs___d255 && TASK_testplusargs___d256))
	$write("TagResponse { ", "waymask: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d254 ||
	   TASK_testplusargs___d255 && TASK_testplusargs___d256))
	$write("'h%h", m_tag_mv_read_response[35:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d254 ||
	   TASK_testplusargs___d255 && TASK_testplusargs___d256))
	$write(", ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d254 ||
	   TASK_testplusargs___d255 && TASK_testplusargs___d256))
	$write("'h%h", m_tag_mv_read_response[31:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d254 ||
	   TASK_testplusargs___d255 && TASK_testplusargs___d256))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d263 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d264 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d265 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h32306 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d263 ||
	   TASK_testplusargs___d264 && TASK_testplusargs___d265))
	$write("[%10d", v__h32306, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d263 ||
	   TASK_testplusargs___d264 && TASK_testplusargs___d265))
	$write("[%2d]DCACHE: lv_data_resp:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d263 ||
	   TASK_testplusargs___d264 && TASK_testplusargs___d265))
	$write("DataResponse { ", "line: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d263 ||
	   TASK_testplusargs___d264 && TASK_testplusargs___d265))
	$write("'h%h", m_data_mv_read_response[575:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d263 ||
	   TASK_testplusargs___d264 && TASK_testplusargs___d265))
	$write(", ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d263 ||
	   TASK_testplusargs___d264 && TASK_testplusargs___d265))
	$write("'h%h", m_data_mv_read_response[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d263 ||
	   TASK_testplusargs___d264 && TASK_testplusargs___d265))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_0_CONCAT_m_tag_mv_read_response_ff_from_tl_ETC___d329)
	$display("Dynamic assertion failed: \"caches_mmu/src/dcache/dcache1rw.bsv\", line 671, column 48\nDCACHE: More than one way is a hit in the cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  NOT_0_CONCAT_m_tag_mv_read_response_ff_from_tl_ETC___d329)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d330 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d331 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d332 = $test$plusargs("l2");
	  #0;
	end
    TASK_testplusargs_30_OR_TASK_testplusargs_31_A_ETC___d341 =
	(TASK_testplusargs___d330 ||
	 TASK_testplusargs___d331 && TASK_testplusargs___d332) &&
	ff_core_request_D_OUT[0];
    TASK_testplusargs_30_OR_TASK_testplusargs_31_A_ETC___d343 =
	(TASK_testplusargs___d330 ||
	 TASK_testplusargs___d331 && TASK_testplusargs___d332) &&
	!ff_core_request_D_OUT[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h34489 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d330 ||
	   TASK_testplusargs___d331 && TASK_testplusargs___d332))
	$write("[%10d", v__h34489, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d330 ||
	   TASK_testplusargs___d331 && TASK_testplusargs___d332))
	$write("[%2d]DCACHE: RAM Req:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d330 ||
	   TASK_testplusargs___d331 && TASK_testplusargs___d332))
	$write("DCache_core_request { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d330 ||
	   TASK_testplusargs___d331 && TASK_testplusargs___d332))
	$write("'h%h", ff_core_request_D_OUT[140:77]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d330 ||
	   TASK_testplusargs___d331 && TASK_testplusargs___d332))
	$write(", ", "fence: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d330 ||
	   TASK_testplusargs___d331 && TASK_testplusargs___d332))
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d330 ||
	   TASK_testplusargs___d331 && TASK_testplusargs___d332))
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d330 ||
	   TASK_testplusargs___d331 && TASK_testplusargs___d332))
	$write("'h%h", ff_core_request_D_OUT[75]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d330 ||
	   TASK_testplusargs___d331 && TASK_testplusargs___d332))
	$write(", ", "access: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d330 ||
	   TASK_testplusargs___d331 && TASK_testplusargs___d332))
	$write("'h%h", ff_core_request_D_OUT[74:73]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d330 ||
	   TASK_testplusargs___d331 && TASK_testplusargs___d332))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d330 ||
	   TASK_testplusargs___d331 && TASK_testplusargs___d332))
	$write("'h%h", ff_core_request_D_OUT[72:70]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d330 ||
	   TASK_testplusargs___d331 && TASK_testplusargs___d332))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d330 ||
	   TASK_testplusargs___d331 && TASK_testplusargs___d332))
	$write("'h%h", ff_core_request_D_OUT[69:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d330 ||
	   TASK_testplusargs___d331 && TASK_testplusargs___d332))
	$write(", ", "atomic_op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d330 ||
	   TASK_testplusargs___d331 && TASK_testplusargs___d332))
	$write("'h%h", ff_core_request_D_OUT[5:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d330 ||
	   TASK_testplusargs___d331 && TASK_testplusargs___d332))
	$write(", ", "ptwalk_req: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_30_OR_TASK_testplusargs_31_A_ETC___d341)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  TASK_testplusargs_30_OR_TASK_testplusargs_31_A_ETC___d343)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d330 ||
	   TASK_testplusargs___d331 && TASK_testplusargs___d332))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d330 ||
	   TASK_testplusargs___d331 && TASK_testplusargs___d332))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d344 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d345 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  TASK_testplusargs___d346 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check)
	begin
	  v__h34680 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d344 ||
	   TASK_testplusargs___d345 && TASK_testplusargs___d346))
	$write("[%10d", v__h34680, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d344 ||
	   TASK_testplusargs___d345 && TASK_testplusargs___d346))
	$write("[%2d]DCACHE: RAM Hit:%b ", id, lv_hitmask__h32238);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  (TASK_testplusargs___d344 ||
	   TASK_testplusargs___d345 && TASK_testplusargs___d346))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check)
	begin
	  TASK_testplusargs___d356 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check)
	begin
	  TASK_testplusargs___d357 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check)
	begin
	  TASK_testplusargs___d358 = $test$plusargs("l2");
	  #0;
	end
    TASK_testplusargs_56_OR_TASK_testplusargs_57_A_ETC___d362 =
	(TASK_testplusargs___d356 ||
	 TASK_testplusargs___d357 && TASK_testplusargs___d358) &&
	ff_core_request_D_OUT[0];
    TASK_testplusargs_56_OR_TASK_testplusargs_57_A_ETC___d363 =
	(TASK_testplusargs___d356 ||
	 TASK_testplusargs___d357 && TASK_testplusargs___d358) &&
	!ff_core_request_D_OUT[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check)
	begin
	  v__h34824 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d356 ||
	   TASK_testplusargs___d357 && TASK_testplusargs___d358))
	$write("[%10d", v__h34824, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d356 ||
	   TASK_testplusargs___d357 && TASK_testplusargs___d358))
	$write("[%2d]DCACHE: FB Req:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d356 ||
	   TASK_testplusargs___d357 && TASK_testplusargs___d358))
	$write("DCache_core_request { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d356 ||
	   TASK_testplusargs___d357 && TASK_testplusargs___d358))
	$write("'h%h", ff_core_request_D_OUT[140:77]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d356 ||
	   TASK_testplusargs___d357 && TASK_testplusargs___d358))
	$write(", ", "fence: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d356 ||
	   TASK_testplusargs___d357 && TASK_testplusargs___d358))
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d356 ||
	   TASK_testplusargs___d357 && TASK_testplusargs___d358))
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d356 ||
	   TASK_testplusargs___d357 && TASK_testplusargs___d358))
	$write("'h%h", ff_core_request_D_OUT[75]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d356 ||
	   TASK_testplusargs___d357 && TASK_testplusargs___d358))
	$write(", ", "access: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d356 ||
	   TASK_testplusargs___d357 && TASK_testplusargs___d358))
	$write("'h%h", ff_core_request_D_OUT[74:73]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d356 ||
	   TASK_testplusargs___d357 && TASK_testplusargs___d358))
	$write(", ", "size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d356 ||
	   TASK_testplusargs___d357 && TASK_testplusargs___d358))
	$write("'h%h", ff_core_request_D_OUT[72:70]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d356 ||
	   TASK_testplusargs___d357 && TASK_testplusargs___d358))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d356 ||
	   TASK_testplusargs___d357 && TASK_testplusargs___d358))
	$write("'h%h", ff_core_request_D_OUT[69:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d356 ||
	   TASK_testplusargs___d357 && TASK_testplusargs___d358))
	$write(", ", "atomic_op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d356 ||
	   TASK_testplusargs___d357 && TASK_testplusargs___d358))
	$write("'h%h", ff_core_request_D_OUT[5:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d356 ||
	   TASK_testplusargs___d357 && TASK_testplusargs___d358))
	$write(", ", "ptwalk_req: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  TASK_testplusargs_56_OR_TASK_testplusargs_57_A_ETC___d362)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  TASK_testplusargs_56_OR_TASK_testplusargs_57_A_ETC___d363)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d356 ||
	   TASK_testplusargs___d357 && TASK_testplusargs___d358))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (TASK_testplusargs___d356 ||
	   TASK_testplusargs___d357 && TASK_testplusargs___d358))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (!ma_cache_enable_c ||
	   ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386) &&
	  ff_core_request_D_OUT[74:73] != 2'd0)
	begin
	  TASK_testplusargs___d394 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (!ma_cache_enable_c ||
	   ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386) &&
	  ff_core_request_D_OUT[74:73] != 2'd0)
	begin
	  TASK_testplusargs___d395 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (!ma_cache_enable_c ||
	   ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386) &&
	  ff_core_request_D_OUT[74:73] != 2'd0)
	begin
	  TASK_testplusargs___d396 = $test$plusargs("l1");
	  #0;
	end
    NOT_wr_cache_enable_wget__18_85_OR_ff_from_tlb_ETC___d399 =
	(!ma_cache_enable_c ||
	 ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386) &&
	ff_core_request_D_OUT[74:73] != 2'd0 &&
	(TASK_testplusargs___d394 ||
	 TASK_testplusargs___d395 && TASK_testplusargs___d396);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  (!ma_cache_enable_c ||
	   ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386) &&
	  ff_core_request_D_OUT[74:73] != 2'd0)
	begin
	  v__h35887 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  NOT_wr_cache_enable_wget__18_85_OR_ff_from_tlb_ETC___d399)
	$write("[%10d", v__h35887, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  NOT_wr_cache_enable_wget__18_85_OR_ff_from_tlb_ETC___d399)
	$write("[%2d]DCACHE: FB: Detected NC Write", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  NOT_wr_cache_enable_wget__18_85_OR_ff_from_tlb_ETC___d399)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d406)
	begin
	  TASK_testplusargs___d407 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d406)
	begin
	  TASK_testplusargs___d408 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d406)
	begin
	  TASK_testplusargs___d409 = $test$plusargs("l1");
	  #0;
	end
    m_fillbuffer_mav_polling_response_67_BIT_1_89__ETC___d412 =
	m_fillbuffer_mav_polling_response[1] &&
	(TASK_testplusargs___d407 ||
	 TASK_testplusargs___d408 && TASK_testplusargs___d409);
    wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d413 =
	(ma_cache_enable_c &&
	 !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386 ||
	 ff_core_request_D_OUT[74:73] == 2'd0) &&
	m_fillbuffer_mav_polling_response_67_BIT_1_89__ETC___d412;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d406)
	begin
	  v__h35720 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d413)
	$write("[%10d", v__h35720, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d413)
	$write("[%2d]DCACHE: FB: Hit in Line:%b for Addr:%h",
	       id,
	       m_fillbuffer_mav_polling_response[9:2],
	       ff_from_tlb_rv_port1__read[39:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d413)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d417)
	begin
	  TASK_testplusargs___d423 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d417)
	begin
	  TASK_testplusargs___d424 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d417)
	begin
	  TASK_testplusargs___d425 = $test$plusargs("l1");
	  #0;
	end
    m_fillbuffer_mav_polling_response_67_BIT_0_90__ETC___d428 =
	m_fillbuffer_mav_polling_response[0] &&
	(TASK_testplusargs___d423 ||
	 TASK_testplusargs___d424 && TASK_testplusargs___d425);
    wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d430 =
	(ma_cache_enable_c &&
	 !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386 ||
	 ff_core_request_D_OUT[74:73] == 2'd0) &&
	m_fillbuffer_mav_polling_response[1] &&
	m_fillbuffer_mav_polling_response_67_BIT_0_90__ETC___d428;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d417)
	begin
	  v__h36101 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d430)
	$write("[%10d", v__h36101, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d430)
	$write("[%2d]DCACHE: FB: Required Word found", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d430)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d432)
	begin
	  TASK_testplusargs___d433 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d432)
	begin
	  TASK_testplusargs___d434 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d432)
	begin
	  TASK_testplusargs___d435 = $test$plusargs("l1");
	  #0;
	end
    NOT_m_fillbuffer_mav_polling_response_67_BIT_0_ETC___d438 =
	!m_fillbuffer_mav_polling_response[0] &&
	(TASK_testplusargs___d433 ||
	 TASK_testplusargs___d434 && TASK_testplusargs___d435);
    wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d440 =
	(ma_cache_enable_c &&
	 !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386 ||
	 ff_core_request_D_OUT[74:73] == 2'd0) &&
	m_fillbuffer_mav_polling_response[1] &&
	NOT_m_fillbuffer_mav_polling_response_67_BIT_0_ETC___d438;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d432)
	begin
	  v__h36276 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d440)
	$write("[%10d", v__h36276, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d440)
	$write("[%2d]DCACHE: FB: Required word not available yet", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d440)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d443)
	begin
	  TASK_testplusargs___d444 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d443)
	begin
	  TASK_testplusargs___d445 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d443)
	begin
	  TASK_testplusargs___d446 = $test$plusargs("l1");
	  #0;
	end
    NOT_m_fillbuffer_mav_polling_response_67_BIT_1_ETC___d449 =
	!m_fillbuffer_mav_polling_response[1] &&
	(TASK_testplusargs___d444 ||
	 TASK_testplusargs___d445 && TASK_testplusargs___d446);
    wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d450 =
	(ma_cache_enable_c &&
	 !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386 ||
	 ff_core_request_D_OUT[74:73] == 2'd0) &&
	NOT_m_fillbuffer_mav_polling_response_67_BIT_1_ETC___d449;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d443)
	begin
	  v__h36391 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d450)
	$write("[%10d", v__h36391, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d450)
	$write("[%2d]DCACHE: FB: Miss", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fillbuffer_check &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d450)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  TASK_testplusargs___d1466 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  TASK_testplusargs___d1467 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  TASK_testplusargs___d1468 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_466_OR_TASK_testplusargs_467_ETC___d1474 =
	(TASK_testplusargs___d1466 ||
	 TASK_testplusargs___d1467 && TASK_testplusargs___d1468) &&
	ff_read_mem_response_rv_port1__read[1];
    TASK_testplusargs_466_OR_TASK_testplusargs_467_ETC___d1476 =
	(TASK_testplusargs___d1466 ||
	 TASK_testplusargs___d1467 && TASK_testplusargs___d1468) &&
	!ff_read_mem_response_rv_port1__read[1];
    TASK_testplusargs_466_OR_TASK_testplusargs_467_ETC___d1478 =
	(TASK_testplusargs___d1466 ||
	 TASK_testplusargs___d1467 && TASK_testplusargs___d1468) &&
	ff_read_mem_response_rv_port1__read[0];
    TASK_testplusargs_466_OR_TASK_testplusargs_467_ETC___d1480 =
	(TASK_testplusargs___d1466 ||
	 TASK_testplusargs___d1467 && TASK_testplusargs___d1468) &&
	!ff_read_mem_response_rv_port1__read[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory)
	begin
	  v__h102670 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1466 ||
	   TASK_testplusargs___d1467 && TASK_testplusargs___d1468))
	$write("[%10d", v__h102670, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1466 ||
	   TASK_testplusargs___d1467 && TASK_testplusargs___d1468))
	$write("[%2d]DCACHE: FILL: Response from Memory:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1466 ||
	   TASK_testplusargs___d1467 && TASK_testplusargs___d1468))
	$write("DCache_mem_readresp { ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1466 ||
	   TASK_testplusargs___d1467 && TASK_testplusargs___d1468))
	$write("'h%h", ff_read_mem_response_rv_port1__read[65:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1466 ||
	   TASK_testplusargs___d1467 && TASK_testplusargs___d1468))
	$write(", ", "last: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  TASK_testplusargs_466_OR_TASK_testplusargs_467_ETC___d1474)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  TASK_testplusargs_466_OR_TASK_testplusargs_467_ETC___d1476)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1466 ||
	   TASK_testplusargs___d1467 && TASK_testplusargs___d1468))
	$write(", ", "err: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  TASK_testplusargs_466_OR_TASK_testplusargs_467_ETC___d1478)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  TASK_testplusargs_466_OR_TASK_testplusargs_467_ETC___d1480)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1466 ||
	   TASK_testplusargs___d1467 && TASK_testplusargs___d1468))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fill_from_memory &&
	  (TASK_testplusargs___d1466 ||
	   TASK_testplusargs___d1467 && TASK_testplusargs___d1468))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386)
	begin
	  TASK_testplusargs___d1434 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386)
	begin
	  TASK_testplusargs___d1435 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386)
	begin
	  TASK_testplusargs___d1436 = $test$plusargs("l0");
	  #0;
	end
    wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d1439 =
	ma_cache_enable_c &&
	!ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386 &&
	(TASK_testplusargs___d1434 ||
	 TASK_testplusargs___d1435 && TASK_testplusargs___d1436);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386)
	begin
	  v__h101894 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d1439)
	$write("[%10d", v__h101894, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d1439)
	$write("[%2d]DCACHE: MemReq: Allocating Fbindex:%d",
	       id,
	       m_fillbuffer_mav_allocate_line);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d1439)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  (!ma_cache_enable_c ||
	   ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386))
	begin
	  TASK_testplusargs___d1443 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  (!ma_cache_enable_c ||
	   ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386))
	begin
	  TASK_testplusargs___d1444 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  (!ma_cache_enable_c ||
	   ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386))
	begin
	  TASK_testplusargs___d1445 = $test$plusargs("l0");
	  #0;
	end
    NOT_wr_cache_enable_wget__18_85_OR_ff_from_tlb_ETC___d1448 =
	(!ma_cache_enable_c ||
	 ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386) &&
	(TASK_testplusargs___d1443 ||
	 TASK_testplusargs___d1444 && TASK_testplusargs___d1445);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  (!ma_cache_enable_c ||
	   ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386))
	begin
	  v__h102122 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  NOT_wr_cache_enable_wget__18_85_OR_ff_from_tlb_ETC___d1448)
	$write("[%10d", v__h102122, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  NOT_wr_cache_enable_wget__18_85_OR_ff_from_tlb_ETC___d1448)
	$write("[%2d]DCACHE: MemReq: Sending NC Request for Addr:%h",
	       id,
	       phyaddr__h101688);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  NOT_wr_cache_enable_wget__18_85_OR_ff_from_tlb_ETC___d1448)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386)
	begin
	  TASK_testplusargs___d1450 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386)
	begin
	  TASK_testplusargs___d1451 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386)
	begin
	  TASK_testplusargs___d1452 = $test$plusargs("l0");
	  #0;
	end
    wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d1455 =
	ma_cache_enable_c &&
	!ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386 &&
	(TASK_testplusargs___d1450 ||
	 TASK_testplusargs___d1451 && TASK_testplusargs___d1452);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request && ma_cache_enable_c &&
	  !ff_from_tlb_rv_port1__read__13_BITS_39_TO_8_44_ETC___d386)
	begin
	  v__h102394 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d1455)
	$write("[%10d", v__h102394, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d1455)
	$write("[%2d]DCACHE: MemReq: Sending Line Request for Addr:%h",
	       id,
	       phyaddr__h101688);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_memory_request &&
	  wr_cache_enable_wget__18_AND_NOT_ff_from_tlb_r_ETC___d1455)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response)
	begin
	  TASK_testplusargs___d1488 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response)
	begin
	  TASK_testplusargs___d1489 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response)
	begin
	  TASK_testplusargs___d1490 = $test$plusargs("l2");
	  #0;
	end
    TASK_testplusargs_488_OR_TASK_testplusargs_489_ETC___d1494 =
	(TASK_testplusargs___d1488 ||
	 TASK_testplusargs___d1489 && TASK_testplusargs___d1490) &&
	ff_read_mem_response_rv_port1__read[1];
    TASK_testplusargs_488_OR_TASK_testplusargs_489_ETC___d1495 =
	(TASK_testplusargs___d1488 ||
	 TASK_testplusargs___d1489 && TASK_testplusargs___d1490) &&
	!ff_read_mem_response_rv_port1__read[1];
    TASK_testplusargs_488_OR_TASK_testplusargs_489_ETC___d1496 =
	(TASK_testplusargs___d1488 ||
	 TASK_testplusargs___d1489 && TASK_testplusargs___d1490) &&
	ff_read_mem_response_rv_port1__read[0];
    TASK_testplusargs_488_OR_TASK_testplusargs_489_ETC___d1497 =
	(TASK_testplusargs___d1488 ||
	 TASK_testplusargs___d1489 && TASK_testplusargs___d1490) &&
	!ff_read_mem_response_rv_port1__read[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response)
	begin
	  v__h103002 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1488 ||
	   TASK_testplusargs___d1489 && TASK_testplusargs___d1490))
	$write("[%10d", v__h103002, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1488 ||
	   TASK_testplusargs___d1489 && TASK_testplusargs___d1490))
	$write("[%2d]DCACHE: NC Response from Memory: ", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1488 ||
	   TASK_testplusargs___d1489 && TASK_testplusargs___d1490))
	$write("DCache_mem_readresp { ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1488 ||
	   TASK_testplusargs___d1489 && TASK_testplusargs___d1490))
	$write("'h%h", ff_read_mem_response_rv_port1__read[65:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1488 ||
	   TASK_testplusargs___d1489 && TASK_testplusargs___d1490))
	$write(", ", "last: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  TASK_testplusargs_488_OR_TASK_testplusargs_489_ETC___d1494)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  TASK_testplusargs_488_OR_TASK_testplusargs_489_ETC___d1495)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1488 ||
	   TASK_testplusargs___d1489 && TASK_testplusargs___d1490))
	$write(", ", "err: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  TASK_testplusargs_488_OR_TASK_testplusargs_489_ETC___d1496)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  TASK_testplusargs_488_OR_TASK_testplusargs_489_ETC___d1497)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1488 ||
	   TASK_testplusargs___d1489 && TASK_testplusargs___d1490))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_capture_io_response &&
	  (TASK_testplusargs___d1488 ||
	   TASK_testplusargs___d1489 && TASK_testplusargs___d1490))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d26 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d27 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d28 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  v__h16658 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d26 ||
	   TASK_testplusargs___d27 && TASK_testplusargs___d28))
	$write("[%10d", v__h16658, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d26 ||
	   TASK_testplusargs___d27 && TASK_testplusargs___d28))
	$write("[%2d]DCACHE : Fence operation in progress", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d26 ||
	   TASK_testplusargs___d27 && TASK_testplusargs___d28))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d32 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d33 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  TASK_testplusargs___d34 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation)
	begin
	  v__h16824 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d32 ||
	   TASK_testplusargs___d33 && TASK_testplusargs___d34))
	$write("[%10d", v__h16824, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d32 ||
	   TASK_testplusargs___d33 && TASK_testplusargs___d34))
	$write("[%2d]DCACHE: Fence: CurrWay:%2d CurrSet:%2d Valid:%b Dirty:%b Addr:%h Data:%h",
	       id,
	       rg_fence_way,
	       rg_fence_set,
	       SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d106,
	       SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d173,
	       final_address__h16755,
	       m_data_mv_read_response[575:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  (TASK_testplusargs___d32 ||
	   TASK_testplusargs___d33 && TASK_testplusargs___d34))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d173 &&
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d106)
	begin
	  TASK_testplusargs___d182 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d173 &&
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d106)
	begin
	  TASK_testplusargs___d183 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d173 &&
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d106)
	begin
	  TASK_testplusargs___d184 = $test$plusargs("l2");
	  #0;
	end
    SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187 =
	SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d173 &&
	SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d106 &&
	(TASK_testplusargs___d182 ||
	 TASK_testplusargs___d183 && TASK_testplusargs___d184);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d173 &&
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d106)
	begin
	  v__h21208 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write("[%10d", v__h21208, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write("[%2d]DCACHE: Fence: Evicting to Memory:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write("DCache_mem_writereq { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write("'h%h", final_address__h16755);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write("'h%h", m_data_mv_read_response[575:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write(", ", "burst_len: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write("'h%h", 8'd7);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write(", ", "burst_size: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write("'h%h", 3'd3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write(", ", "io: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write("False", " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fence_operation &&
	  SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d187)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  TASK_testplusargs___d485 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  TASK_testplusargs___d486 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  TASK_testplusargs___d487 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core)
	begin
	  v__h36672 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d485 ||
	   TASK_testplusargs___d486 && TASK_testplusargs___d487))
	$write("[%10d", v__h36672, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d485 ||
	   TASK_testplusargs___d486 && TASK_testplusargs___d487))
	$write("[%2d]DCACHE: Response: Storemask:%h Storedata:%h",
	       id,
	       m_storebuffer_mav_check_sb_hit[127:64],
	       m_storebuffer_mav_check_sb_hit[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  (TASK_testplusargs___d485 ||
	   TASK_testplusargs___d486 && TASK_testplusargs___d487))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core && !wr_fault_whas &&
	  x__h36809 + y__h36810 != 2'd1)
	$display("Dynamic assertion failed: \"caches_mmu/src/dcache/dcache1rw.bsv\", line 768, column 51\nMore than one data structure shows a hit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core && !wr_fault_whas &&
	  x__h36809 + y__h36810 != 2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core && wr_ram_state_whas &&
	  wr_ram_state_wget == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d509 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core && wr_ram_state_whas &&
	  wr_ram_state_wget == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d510 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core && wr_ram_state_whas &&
	  wr_ram_state_wget == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d511 = $test$plusargs("l0");
	  #0;
	end
    wr_ram_state_whas__73_AND_wr_ram_state_wget__7_ETC___d514 =
	wr_ram_state_whas && wr_ram_state_wget == 2'd1 && !wr_fault_whas &&
	(TASK_testplusargs___d509 ||
	 TASK_testplusargs___d510 && TASK_testplusargs___d511);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core && wr_ram_state_whas &&
	  wr_ram_state_wget == 2'd1 &&
	  !wr_fault_whas)
	begin
	  v__h37106 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  wr_ram_state_whas__73_AND_wr_ram_state_wget__7_ETC___d514)
	$write("[%10d", v__h37106, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  wr_ram_state_whas__73_AND_wr_ram_state_wget__7_ETC___d514)
	$write("[%2d]DCACHE: Response: Hit from SRAM", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  wr_ram_state_whas__73_AND_wr_ram_state_wget__7_ETC___d514)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  CAN_FIRE_RL_rl_fillbuffer_check &&
	  wr_fb_state_wget == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d516 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  CAN_FIRE_RL_rl_fillbuffer_check &&
	  wr_fb_state_wget == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d517 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  CAN_FIRE_RL_rl_fillbuffer_check &&
	  wr_fb_state_wget == 2'd1 &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d518 = $test$plusargs("l0");
	  #0;
	end
    wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d521 =
	CAN_FIRE_RL_rl_fillbuffer_check && wr_fb_state_wget == 2'd1 &&
	!wr_fault_whas &&
	(TASK_testplusargs___d516 ||
	 TASK_testplusargs___d517 && TASK_testplusargs___d518);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  CAN_FIRE_RL_rl_fillbuffer_check &&
	  wr_fb_state_wget == 2'd1 &&
	  !wr_fault_whas)
	begin
	  v__h37343 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d521)
	$write("[%10d", v__h37343, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d521)
	$write("[%2d]DCACHE: Response: Hit from Fillbuffer", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  wr_fb_state_whas__78_AND_wr_fb_state_wget__79__ETC___d521)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  CAN_FIRE_RL_rl_capture_io_response &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d531 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  CAN_FIRE_RL_rl_capture_io_response &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d532 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  CAN_FIRE_RL_rl_capture_io_response &&
	  !wr_fault_whas)
	begin
	  TASK_testplusargs___d533 = $test$plusargs("l0");
	  #0;
	end
    wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d536 =
	CAN_FIRE_RL_rl_capture_io_response && !wr_fault_whas &&
	(TASK_testplusargs___d531 ||
	 TASK_testplusargs___d532 && TASK_testplusargs___d533);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  CAN_FIRE_RL_rl_capture_io_response &&
	  !wr_fault_whas)
	begin
	  v__h37805 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d536)
	$write("[%10d", v__h37805, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d536)
	$write("[%2d]DCACHE: Response: Hit from NC", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d536)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core && !ff_from_tlb_rv_port1__read[0])
	begin
	  TASK_testplusargs___d1364 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core && !ff_from_tlb_rv_port1__read[0])
	begin
	  TASK_testplusargs___d1365 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core && !ff_from_tlb_rv_port1__read[0])
	begin
	  TASK_testplusargs___d1366 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_364_OR_TASK_testplusargs_365_ETC___d1391 =
	(TASK_testplusargs___d1364 ||
	 TASK_testplusargs___d1365 && TASK_testplusargs___d1366) &&
	NOT_wr_nc_state_whas__68_371_OR_NOT_wr_nc_stat_ETC___d1376 &&
	NOT_wr_fb_state_whas__78_377_OR_NOT_wr_fb_stat_ETC___d1382 &&
	NOT_wr_ram_state_whas__73_383_OR_NOT_wr_ram_st_ETC___d1388;
    TASK_testplusargs_364_OR_TASK_testplusargs_365_ETC___d1393 =
	(TASK_testplusargs___d1364 ||
	 TASK_testplusargs___d1365 && TASK_testplusargs___d1366) &&
	wr_nc_state_whas__68_AND_wr_nc_state_wget__69__ETC___d557;
    NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1369 =
	!ff_from_tlb_rv_port1__read[0] &&
	(TASK_testplusargs___d1364 ||
	 TASK_testplusargs___d1365 && TASK_testplusargs___d1366);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core && !ff_from_tlb_rv_port1__read[0])
	begin
	  v__h101290 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1369)
	$write("[%10d", v__h101290, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1369)
	$write("[%2d]DCACHE: Responding to Core:", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1369)
	$write("DMem_core_response { ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1369)
	$write("'h%h", lv_response_word__h38277);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1369)
	$write(", ", "trap: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  !ff_from_tlb_rv_port1__read[0] &&
	  TASK_testplusargs_364_OR_TASK_testplusargs_365_ETC___d1391)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  !ff_from_tlb_rv_port1__read[0] &&
	  TASK_testplusargs_364_OR_TASK_testplusargs_365_ETC___d1393)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1369)
	$write(", ", "cause: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1369)
	$write("'h%h", lv_response_cause__h38279);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1369)
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1369)
	$write("'h%h", lv_response_epochs__h38280, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_from_tlb_rv_port1__read__13_BIT_0_50_52_ETC___d1369)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1395 &&
	  !ff_from_tlb_rv_port1__read[0])
	begin
	  TASK_testplusargs___d1403 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1395 &&
	  !ff_from_tlb_rv_port1__read[0])
	begin
	  TASK_testplusargs___d1404 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1395 &&
	  !ff_from_tlb_rv_port1__read[0])
	begin
	  TASK_testplusargs___d1405 = $test$plusargs("l0");
	  #0;
	end
    NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1408 =
	NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1395 &&
	!ff_from_tlb_rv_port1__read[0] &&
	(TASK_testplusargs___d1403 ||
	 TASK_testplusargs___d1404 && TASK_testplusargs___d1405);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1395 &&
	  !ff_from_tlb_rv_port1__read[0])
	begin
	  v__h101613 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1408)
	$write("[%10d", v__h101613, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1408)
	$write("[%2d]DCACHE: Response: Allocating Store Buffer", id);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1408)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  WILL_FIRE_RL_rl_send_memory_request &&
	  NOT_ff_core_request_first__1_BITS_74_TO_73_79__ETC___d1223 &&
	  _mav_allocate_line_RL_rl_send_memory_request_EN_m_fillbuffer_wget)
	$display("Error: \"caches_mmu/src/dcache/dcache1rw.bsv\", line 735, column 10: (R0002)\n  Conflict-free rules RL_rl_response_to_core and RL_rl_send_memory_request\n  called conflicting methods mav_allocate_line and mav_allocate_line of module\n  instance m_fillbuffer.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_response_to_core &&
	  WILL_FIRE_RL_rl_send_memory_request &&
	  wr_fb_state_wget == 2'd1 &&
	  (ff_core_request_D_OUT[74:73] == 2'd2 ||
	   ff_core_request_D_OUT[74:73] == 2'd1 ||
	   ff_core_request_D_OUT[74:73] == 2'd0) &&
	  CAN_FIRE_RL_rl_fillbuffer_check &&
	  !wr_fault_whas)
	$display("Error: \"caches_mmu/src/dcache/dcache1rw.bsv\", line 735, column 10: (R0002)\n  Conflict-free rules RL_rl_response_to_core and RL_rl_send_memory_request\n  called conflicting methods read and write of module instance\n  rg_handling_miss.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay)
	begin
	  TASK_testplusargs___d1499 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay)
	begin
	  TASK_testplusargs___d1500 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay)
	begin
	  TASK_testplusargs___d1501 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay)
	begin
	  v__h103214 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay &&
	  (TASK_testplusargs___d1499 ||
	   TASK_testplusargs___d1500 && TASK_testplusargs___d1501))
	$write("[%10d", v__h103214, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay &&
	  (TASK_testplusargs___d1499 ||
	   TASK_testplusargs___d1500 && TASK_testplusargs___d1501))
	$write("[%2d]DCACHE: Replaying Req. Index:%d", id, rg_recent_req);
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_performing_replay &&
	  (TASK_testplusargs___d1499 ||
	   TASK_testplusargs___d1500 && TASK_testplusargs___d1501))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer)
	begin
	  TASK_testplusargs___d1532 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer)
	begin
	  TASK_testplusargs___d1533 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer)
	begin
	  TASK_testplusargs___d1534 = $test$plusargs("l2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer)
	begin
	  v__h105956 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  (TASK_testplusargs___d1532 ||
	   TASK_testplusargs___d1533 && TASK_testplusargs___d1534))
	$write("[%10d", v__h105956, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  (TASK_testplusargs___d1532 ||
	   TASK_testplusargs___d1533 && TASK_testplusargs___d1534))
	$write("[%2d]DCACHE: Release: set%d way:%d valid:%b dirty:%b",
	       id,
	       m_fillbuffer_mv_release_info[13:8],
	       v__h103311,
	       SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1631,
	       SEL_ARR_v_reg_dirty_0_07_v_reg_dirty_1_08_v_re_ETC___d1632);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  (TASK_testplusargs___d1532 ||
	   TASK_testplusargs___d1533 && TASK_testplusargs___d1534))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 &&
	  !rg_release_readphase)
	begin
	  TASK_testplusargs___d1642 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 &&
	  !rg_release_readphase)
	begin
	  TASK_testplusargs___d1643 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 &&
	  !rg_release_readphase)
	begin
	  TASK_testplusargs___d1644 = $test$plusargs("l0");
	  #0;
	end
    SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1647 =
	SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 &&
	!rg_release_readphase &&
	(TASK_testplusargs___d1642 ||
	 TASK_testplusargs___d1643 && TASK_testplusargs___d1644);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 &&
	  !rg_release_readphase)
	begin
	  v__h107050 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1647)
	$write("[%10d", v__h107050, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1647)
	$write("[%2d]DCACHE: Release: Reading dirty set:%d way:%d",
	       id,
	       m_fillbuffer_mv_release_info[13:8],
	       v__h103311);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1647)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  rg_release_readphase)
	begin
	  TASK_testplusargs___d1651 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  rg_release_readphase)
	begin
	  TASK_testplusargs___d1652 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  rg_release_readphase)
	begin
	  TASK_testplusargs___d1653 = $test$plusargs("l0");
	  #0;
	end
    rg_release_readphase_31_AND_TASK_testplusargs__ETC___d1656 =
	rg_release_readphase &&
	(TASK_testplusargs___d1651 ||
	 TASK_testplusargs___d1652 && TASK_testplusargs___d1653);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  rg_release_readphase)
	begin
	  v__h106674 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  rg_release_readphase_31_AND_TASK_testplusargs__ETC___d1656)
	$write("[%10d", v__h106674, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  rg_release_readphase_31_AND_TASK_testplusargs__ETC___d1656)
	$write("[%2d]DCACHE: Evicting Addr:%h set_index:%d tag:%h data:%h",
	       id,
	       lv_evict_address__h106549,
	       m_fillbuffer_mv_release_info[13:8],
	       m_tag_mv_read_response[31:12],
	       m_data_mv_read_response[575:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  rg_release_readphase_31_AND_TASK_testplusargs__ETC___d1656)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	   rg_release_readphase))
	begin
	  TASK_testplusargs___d1801 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	   rg_release_readphase))
	begin
	  TASK_testplusargs___d1802 = $test$plusargs("mdcache");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	   rg_release_readphase))
	begin
	  TASK_testplusargs___d1803 = $test$plusargs("l0");
	  #0;
	end
    NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1806 =
	(!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	 rg_release_readphase) &&
	(TASK_testplusargs___d1801 ||
	 TASK_testplusargs___d1802 && TASK_testplusargs___d1803);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  (!SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v_reg__ETC___d1634 ||
	   rg_release_readphase))
	begin
	  v__h113942 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1806)
	$write("[%10d", v__h113942, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1806)
	$write("[%2d]DCACHE: Release: Upd Addr:%h set:%d way:%d dirty:%b data:%h",
	       id,
	       m_fillbuffer_mv_release_info[33:2],
	       m_fillbuffer_mv_release_info[13:8],
	       v__h103311,
	       m_fillbuffer_mv_release_info[0],
	       m_fillbuffer_mv_release_info[545:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  !m_fillbuffer_mv_release_info[1] &&
	  NOT_SEL_ARR_v_reg_valid_0_0_v_reg_valid_1_1_v__ETC___d1806)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_release_from_fillbuffer &&
	  WILL_FIRE_RL_rl_response_to_core &&
	  !m_fillbuffer_mv_fbfull &&
	  !rg_fence_stall &&
	  !m_fillbuffer_mv_release_info__94_BITS_13_TO_8__ETC___d1515 &&
	  !rg_performing_replay &&
	  !m_fillbuffer_mv_fbempty &&
	  m_fillbuffer_mv_fbhead_valid &&
	  (!CAN_FIRE_RL_rl_fillbuffer_check ||
	   !(ff_core_request_D_OUT[74:73] != 2'd0)) &&
	  !EN_put_core_req_put &&
	  ff_write_mem_request_FULL_N &&
	  m_storebuffer_mv_sb_empty)
	$display("Error: \"caches_mmu/src/dcache/dcache1rw.bsv\", line 966, column 10: (R0002)\n  Conflict-free rules RL_rl_release_from_fillbuffer and RL_rl_response_to_core\n  called conflicting methods notEmpty and deq of module instance\n  ff_core_request.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ram_check &&
	  WILL_FIRE_RL_rl_release_from_fillbuffer)
	$display("Error: \"caches_mmu/src/dcache/dcache1rw.bsv\", line 215, column 53: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_rl_ram_check] and\n  [RL_rl_release_from_fillbuffer] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkdcache

