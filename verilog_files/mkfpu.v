//
// Generated by Bluespec Compiler (build 8d454e4)
//
// On Fri Oct  9 13:13:22 IST 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY__start                     O     1
// get_result                     O    70 reg
// RDY_get_result                 O     1 const
// RDY_flush                      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// _start_operand1                I    64 reg
// _start_operand2                I    64 reg
// _start_operand3                I    64 reg
// _start_opcode                  I     4 reg
// _start_funct7                  I     7 reg
// _start_funct3                  I     3 reg
// _start_imm                     I     2 reg
// _start_issp                    I     1 reg
// EN__start                      I     1
// EN_flush                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfpu(CLK,
	     RST_N,

	     _start_operand1,
	     _start_operand2,
	     _start_operand3,
	     _start_opcode,
	     _start_funct7,
	     _start_funct3,
	     _start_imm,
	     _start_issp,
	     EN__start,
	     RDY__start,

	     get_result,
	     RDY_get_result,

	     EN_flush,
	     RDY_flush);
  input  CLK;
  input  RST_N;

  // action method _start
  input  [63 : 0] _start_operand1;
  input  [63 : 0] _start_operand2;
  input  [63 : 0] _start_operand3;
  input  [3 : 0] _start_opcode;
  input  [6 : 0] _start_funct7;
  input  [2 : 0] _start_funct3;
  input  [1 : 0] _start_imm;
  input  _start_issp;
  input  EN__start;
  output RDY__start;

  // value method get_result
  output [69 : 0] get_result;
  output RDY_get_result;

  // action method flush
  input  EN_flush;
  output RDY_flush;

  // signals for module outputs
  wire [69 : 0] get_result;
  wire RDY__start, RDY_flush, RDY_get_result;

  // inlined wires
  reg [171 : 0] inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget;
  reg [84 : 0] inst_spfpu_divider_int_div_wfn_divide_step_arg_wget;
  reg [69 : 0] rg_result_1_wget;
  wire [191 : 0] getMant64_arg_wget, setCanonicalNaN_arg_wget;
  wire [188 : 0] condFlags64_arg_wget;
  wire [169 : 0] inst_dpfpu_divider_int_div_wr_final_out_wget;
  wire [155 : 0] getMant64_res_wget;
  wire [95 : 0] getMant32_arg_wget, setCanonicalNaN_res_wget;
  wire [92 : 0] condFlags32_arg_wget;
  wire [82 : 0] inst_spfpu_divider_int_div_wr_final_out_wget;
  wire [69 : 0] inst_dpfpu_sqrt_ff_final_out_1_wget;
  wire [68 : 0] getMant32_res_wget,
		inst_dpfm_add_sub_ff_final_out_wget,
		inst_dpfpu_divider_wr_final_out_wget;
  wire [67 : 0] inst_fpu_int_to_fp_fcvt_s_llu_arg_wget;
  wire [37 : 0] inst_spfpu_sqrt_ff_final_out_1_wget;
  wire [36 : 0] inst_fpu_int_to_fp_fcvt_s_llu_res_wget,
		inst_fpu_int_to_fp_fcvt_s_wwu_res_wget,
		inst_spfm_add_sub_ff_final_out_wget,
		inst_spfpu_divider_wr_final_out_wget;
  wire [35 : 0] inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget;
  wire [32 : 0] getExp64_res_wget;
  wire [23 : 0] getExp32_res_wget;
  wire [14 : 0] condFlags32_res_wget, condFlags64_res_wget;
  wire inst_dpfpu_sqrt_ff_final_out_1_whas,
       inst_spfpu_sqrt_ff_final_out_1_whas,
       rg_result_1_whas;

  // register inst_dpfm_add_sub_ff_input_register
  reg [200 : 0] inst_dpfm_add_sub_ff_input_register;
  wire [200 : 0] inst_dpfm_add_sub_ff_input_register_D_IN;
  wire inst_dpfm_add_sub_ff_input_register_EN;

  // register inst_dpfm_add_sub_ff_stage2
  reg [203 : 0] inst_dpfm_add_sub_ff_stage2;
  wire [203 : 0] inst_dpfm_add_sub_ff_stage2_D_IN;
  wire inst_dpfm_add_sub_ff_stage2_EN;

  // register inst_dpfm_add_sub_ff_stage4
  reg [348 : 0] inst_dpfm_add_sub_ff_stage4;
  wire [348 : 0] inst_dpfm_add_sub_ff_stage4_D_IN;
  wire inst_dpfm_add_sub_ff_stage4_EN;

  // register inst_dpfm_add_sub_ff_stage5
  reg [196 : 0] inst_dpfm_add_sub_ff_stage5;
  wire [196 : 0] inst_dpfm_add_sub_ff_stage5_D_IN;
  wire inst_dpfm_add_sub_ff_stage5_EN;

  // register inst_dpfm_add_sub_rg_state_handler
  reg [2 : 0] inst_dpfm_add_sub_rg_state_handler;
  reg [2 : 0] inst_dpfm_add_sub_rg_state_handler_D_IN;
  wire inst_dpfm_add_sub_rg_state_handler_EN;

  // register inst_dpfpu_divider_int_div_rg_inter_stage
  reg [169 : 0] inst_dpfpu_divider_int_div_rg_inter_stage;
  wire [169 : 0] inst_dpfpu_divider_int_div_rg_inter_stage_D_IN;
  wire inst_dpfpu_divider_int_div_rg_inter_stage_EN;

  // register inst_dpfpu_divider_int_div_rg_state
  reg [5 : 0] inst_dpfpu_divider_int_div_rg_state;
  reg [5 : 0] inst_dpfpu_divider_int_div_rg_state_D_IN;
  wire inst_dpfpu_divider_int_div_rg_state_EN;

  // register inst_dpfpu_divider_rg_stage1
  reg [127 : 0] inst_dpfpu_divider_rg_stage1;
  wire [127 : 0] inst_dpfpu_divider_rg_stage1_D_IN;
  wire inst_dpfpu_divider_rg_stage1_EN;

  // register inst_dpfpu_divider_rg_stage2
  reg [21 : 0] inst_dpfpu_divider_rg_stage2;
  wire [21 : 0] inst_dpfpu_divider_rg_stage2_D_IN;
  wire inst_dpfpu_divider_rg_stage2_EN;

  // register inst_dpfpu_divider_rg_stage3
  reg [138 : 0] inst_dpfpu_divider_rg_stage3;
  wire [138 : 0] inst_dpfpu_divider_rg_stage3_D_IN;
  wire inst_dpfpu_divider_rg_stage3_EN;

  // register inst_dpfpu_divider_rg_state_handler
  reg [1 : 0] inst_dpfpu_divider_rg_state_handler;
  reg [1 : 0] inst_dpfpu_divider_rg_state_handler_D_IN;
  wire inst_dpfpu_divider_rg_state_handler_EN;

  // register inst_dpfpu_sqrt_ff_final_out
  reg [69 : 0] inst_dpfpu_sqrt_ff_final_out;
  wire [69 : 0] inst_dpfpu_sqrt_ff_final_out_D_IN;
  wire inst_dpfpu_sqrt_ff_final_out_EN;

  // register inst_dpfpu_sqrt_rg_inter_stage
  reg [293 : 0] inst_dpfpu_sqrt_rg_inter_stage;
  wire [293 : 0] inst_dpfpu_sqrt_rg_inter_stage_D_IN;
  wire inst_dpfpu_sqrt_rg_inter_stage_EN;

  // register inst_dpfpu_sqrt_rg_state
  reg [5 : 0] inst_dpfpu_sqrt_rg_state;
  reg [5 : 0] inst_dpfpu_sqrt_rg_state_D_IN;
  wire inst_dpfpu_sqrt_rg_state_EN;

  // register inst_spfm_add_sub_ff_input_register
  reg [107 : 0] inst_spfm_add_sub_ff_input_register;
  wire [107 : 0] inst_spfm_add_sub_ff_input_register_D_IN;
  wire inst_spfm_add_sub_ff_input_register_EN;

  // register inst_spfm_add_sub_ff_stage2
  reg [110 : 0] inst_spfm_add_sub_ff_stage2;
  wire [110 : 0] inst_spfm_add_sub_ff_stage2_D_IN;
  wire inst_spfm_add_sub_ff_stage2_EN;

  // register inst_spfm_add_sub_ff_stage4
  reg [171 : 0] inst_spfm_add_sub_ff_stage4;
  wire [171 : 0] inst_spfm_add_sub_ff_stage4_D_IN;
  wire inst_spfm_add_sub_ff_stage4_EN;

  // register inst_spfm_add_sub_ff_stage5
  reg [105 : 0] inst_spfm_add_sub_ff_stage5;
  wire [105 : 0] inst_spfm_add_sub_ff_stage5_D_IN;
  wire inst_spfm_add_sub_ff_stage5_EN;

  // register inst_spfm_add_sub_rg_state_handler
  reg [2 : 0] inst_spfm_add_sub_rg_state_handler;
  reg [2 : 0] inst_spfm_add_sub_rg_state_handler_D_IN;
  wire inst_spfm_add_sub_rg_state_handler_EN;

  // register inst_spfpu_divider_int_div_rg_inter_stage
  reg [82 : 0] inst_spfpu_divider_int_div_rg_inter_stage;
  wire [82 : 0] inst_spfpu_divider_int_div_rg_inter_stage_D_IN;
  wire inst_spfpu_divider_int_div_rg_inter_stage_EN;

  // register inst_spfpu_divider_int_div_rg_state
  reg [5 : 0] inst_spfpu_divider_int_div_rg_state;
  reg [5 : 0] inst_spfpu_divider_int_div_rg_state_D_IN;
  wire inst_spfpu_divider_int_div_rg_state_EN;

  // register inst_spfpu_divider_rg_stage1
  reg [66 : 0] inst_spfpu_divider_rg_stage1;
  wire [66 : 0] inst_spfpu_divider_rg_stage1_D_IN;
  wire inst_spfpu_divider_rg_stage1_EN;

  // register inst_spfpu_divider_rg_stage2
  reg [18 : 0] inst_spfpu_divider_rg_stage2;
  wire [18 : 0] inst_spfpu_divider_rg_stage2_D_IN;
  wire inst_spfpu_divider_rg_stage2_EN;

  // register inst_spfpu_divider_rg_stage3
  reg [77 : 0] inst_spfpu_divider_rg_stage3;
  wire [77 : 0] inst_spfpu_divider_rg_stage3_D_IN;
  wire inst_spfpu_divider_rg_stage3_EN;

  // register inst_spfpu_divider_rg_state_handler
  reg [1 : 0] inst_spfpu_divider_rg_state_handler;
  reg [1 : 0] inst_spfpu_divider_rg_state_handler_D_IN;
  wire inst_spfpu_divider_rg_state_handler_EN;

  // register inst_spfpu_sqrt_ff_final_out
  reg [37 : 0] inst_spfpu_sqrt_ff_final_out;
  wire [37 : 0] inst_spfpu_sqrt_ff_final_out_D_IN;
  wire inst_spfpu_sqrt_ff_final_out_EN;

  // register inst_spfpu_sqrt_rg_inter_stage
  reg [145 : 0] inst_spfpu_sqrt_rg_inter_stage;
  wire [145 : 0] inst_spfpu_sqrt_rg_inter_stage_D_IN;
  wire inst_spfpu_sqrt_rg_inter_stage_EN;

  // register inst_spfpu_sqrt_rg_state
  reg [5 : 0] inst_spfpu_sqrt_rg_state;
  reg [5 : 0] inst_spfpu_sqrt_rg_state_D_IN;
  wire inst_spfpu_sqrt_rg_state_EN;

  // register rg_multicycle_op
  reg rg_multicycle_op;
  wire rg_multicycle_op_D_IN, rg_multicycle_op_EN;

  // register rg_result
  reg [69 : 0] rg_result;
  wire [69 : 0] rg_result_D_IN;
  wire rg_result_EN;

  // ports of submodule ff_input
  wire [208 : 0] ff_input_D_IN, ff_input_D_OUT;
  wire ff_input_CLR,
       ff_input_DEQ,
       ff_input_EMPTY_N,
       ff_input_ENQ,
       ff_input_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_flush_fifo,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_flush,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3,
       CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush,
       CAN_FIRE_RL_inst_dpfpu_divider_int_div_stage_1,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_flush,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3,
       CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4,
       CAN_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_flush,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage,
       CAN_FIRE_RL_inst_dpfpu_sqrt_rl_stage2,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_flush,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3,
       CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_rl_flush,
       CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1,
       CAN_FIRE_RL_inst_spfpu_divider_rl_flush,
       CAN_FIRE_RL_inst_spfpu_divider_rl_stage2,
       CAN_FIRE_RL_inst_spfpu_divider_rl_stage3,
       CAN_FIRE_RL_inst_spfpu_divider_rl_stage4,
       CAN_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_flush,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage,
       CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2,
       CAN_FIRE_RL_rg_result__dreg_update,
       CAN_FIRE_RL_rl_get_output_from_dpfm_add_sub,
       CAN_FIRE_RL_rl_get_output_from_dpfpu_divider,
       CAN_FIRE_RL_rl_get_output_from_dpfpu_sqrt,
       CAN_FIRE_RL_rl_get_output_from_fm_add_sub,
       CAN_FIRE_RL_rl_get_output_from_spfpu_divider,
       CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt,
       CAN_FIRE_RL_start_stage,
       CAN_FIRE___me_check_1,
       CAN_FIRE___me_check_10,
       CAN_FIRE___me_check_11,
       CAN_FIRE___me_check_12,
       CAN_FIRE___me_check_19,
       CAN_FIRE___me_check_2,
       CAN_FIRE___me_check_20,
       CAN_FIRE___me_check_21,
       CAN_FIRE___me_check_23,
       CAN_FIRE___me_check_24,
       CAN_FIRE___me_check_28,
       CAN_FIRE___me_check_29,
       CAN_FIRE___me_check_3,
       CAN_FIRE___me_check_30,
       CAN_FIRE___me_check_38,
       CAN_FIRE___me_check_39,
       CAN_FIRE___me_check_40,
       CAN_FIRE___me_check_41,
       CAN_FIRE___me_check_42,
       CAN_FIRE___me_check_5,
       CAN_FIRE___me_check_6,
       CAN_FIRE__start,
       CAN_FIRE_flush,
       WILL_FIRE_RL_flush_fifo,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_flush,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3,
       WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush,
       WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_flush,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3,
       WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4,
       WILL_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_flush,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage,
       WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_flush,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3,
       WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_rl_flush,
       WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1,
       WILL_FIRE_RL_inst_spfpu_divider_rl_flush,
       WILL_FIRE_RL_inst_spfpu_divider_rl_stage2,
       WILL_FIRE_RL_inst_spfpu_divider_rl_stage3,
       WILL_FIRE_RL_inst_spfpu_divider_rl_stage4,
       WILL_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_flush,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage,
       WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2,
       WILL_FIRE_RL_rg_result__dreg_update,
       WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub,
       WILL_FIRE_RL_rl_get_output_from_dpfpu_divider,
       WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt,
       WILL_FIRE_RL_rl_get_output_from_fm_add_sub,
       WILL_FIRE_RL_rl_get_output_from_spfpu_divider,
       WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt,
       WILL_FIRE_RL_start_stage,
       WILL_FIRE___me_check_1,
       WILL_FIRE___me_check_10,
       WILL_FIRE___me_check_11,
       WILL_FIRE___me_check_12,
       WILL_FIRE___me_check_19,
       WILL_FIRE___me_check_2,
       WILL_FIRE___me_check_20,
       WILL_FIRE___me_check_21,
       WILL_FIRE___me_check_23,
       WILL_FIRE___me_check_24,
       WILL_FIRE___me_check_28,
       WILL_FIRE___me_check_29,
       WILL_FIRE___me_check_3,
       WILL_FIRE___me_check_30,
       WILL_FIRE___me_check_38,
       WILL_FIRE___me_check_39,
       WILL_FIRE___me_check_40,
       WILL_FIRE___me_check_41,
       WILL_FIRE___me_check_42,
       WILL_FIRE___me_check_5,
       WILL_FIRE___me_check_6,
       WILL_FIRE__start,
       WILL_FIRE_flush;

  // inputs to muxes for submodule ports
  reg [69 : 0] MUX_rg_result_1_wset_1__VAL_1;
  wire [293 : 0] MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_1,
		 MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_2;
  wire [171 : 0] MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1,
		 MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2,
		 MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
  wire [145 : 0] MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_1,
		 MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_2;
  wire [84 : 0] MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1,
		MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2,
		MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
  wire [69 : 0] MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_1,
		MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_2,
		MUX_rg_result_1_wset_1__VAL_2,
		MUX_rg_result_1_wset_1__VAL_3,
		MUX_rg_result_1_wset_1__VAL_4,
		MUX_rg_result_1_wset_1__VAL_5,
		MUX_rg_result_1_wset_1__VAL_6,
		MUX_rg_result_1_wset_1__VAL_7;
  wire [37 : 0] MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_1,
		MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_2;
  wire [5 : 0] MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_5,
	       MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1,
	       MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2,
	       MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
  wire MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1,
       MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1,
       MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1,
       MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__SEL_1,
       MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__SEL_1,
       MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1,
       MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1,
       MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1,
       MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1,
       MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__SEL_1,
       MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__SEL_1,
       MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1,
       MUX_rg_multicycle_op_write_1__SEL_1,
       MUX_rg_result_1_wset_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d6005;
  reg TASK_testplusargs___d6006;
  reg TASK_testplusargs___d6007;
  reg [63 : 0] v__h293004;
  reg TASK_testplusargs___d6011;
  reg TASK_testplusargs___d6012;
  reg TASK_testplusargs___d6013;
  reg [63 : 0] v__h293150;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3511;
  reg [31 : 0] CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q2,
	       IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3434;
  reg CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q8,
      CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q44,
      IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5031,
      IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5155,
      IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3712,
      IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3944,
      IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d4112,
      IF_inst_dpfm_add_sub_ff_stage5_read__165_BITS__ETC___d3229,
      IF_inst_dpfpu_divider_rg_stage3_679_BITS_4_TO__ETC___d1724,
      IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_BI_ETC___d1842,
      IF_inst_spfm_add_sub_ff_stage5_read__177_BITS__ETC___d1241,
      IF_inst_spfpu_divider_rg_stage3_71_BITS_4_TO_2_ETC___d316,
      IF_inst_spfpu_sqrt_rg_inter_stage_read__80_BIT_ETC___d434,
      _theResult_____4___1__h228666;
  wire [211 : 0] _0_CONCAT_INV_IF_condFlags64_res_whas__438_THEN_ETC___d5298;
  wire [169 : 0] inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16,
		 x__h63179;
  wire [159 : 0] IF_IF_inst_dpfm_add_sub_ff_stage2_read__382_BI_ETC___d2423,
		 IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208,
		 _theResult____h102118,
		 _theResult____h148339,
		 _theResult___snd_fst__h171482,
		 _theResult___snd_fst__h171484,
		 add_mantissa__h148335,
		 mantissa2__h102105,
		 mantissa2__h102127,
		 mantissa2__h102148,
		 mantissa3___1__h121838,
		 mantissa3__h102149,
		 mantissa_to_shift___1__h102146,
		 mantissa_to_shift__h102141,
		 resultant_mantissa___1__h171237,
		 resultant_mantissa_norm_expo__h170931,
		 resultant_mantissa_norm_zerosMSB__h170932,
		 sub_mantissa1__h148336,
		 sub_mantissa2__h148337,
		 sub_mantissa__h148338;
  wire [125 : 0] IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d4794,
		 IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4793,
		 IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4796;
  wire [115 : 0] _1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC___d4037,
		 final_man__h218405;
  wire [113 : 0] IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1405,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1383,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1406,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q19,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q21,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q22,
		 inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q17,
		 inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q18;
  wire [112 : 0] IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1388,
		 IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1356;
  wire [109 : 0] IF_IF_IF_condFlags64_res_whas__438_THEN_condFl_ETC___d5934,
		 mantissa___1__h284815,
		 mantissa__h268737,
		 mantissa__h268739,
		 mantissa__h268749,
		 mantissa__h78093;
  wire [106 : 0] IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2118,
		 _theResult_____1_snd__h94460,
		 _theResult_____1_snd__h94463,
		 _theResult___snd_fst__h94500,
		 lv_product_mantissa___1__h94431,
		 lv_product_mantissa___1__h94446,
		 lv_product_mantissa__h79315,
		 lv_product_mantissa__h94401,
		 lv_product_mantissa_shiftL_expo__h94409,
		 lv_product_mantissa_shiftL_zerosMSB__h94411,
		 x_lv_product_mantissa__h79383;
  wire [95 : 0] _0_CONCAT_INV_IF_condFlags32_res_whas__353_THEN_ETC___d5218;
  wire [86 : 0] _1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC___d3868,
		final_man__h215905;
  wire [82 : 0] inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9,
		x__h4761;
  wire [72 : 0] IF_IF_inst_spfm_add_sub_ff_stage2_read__42_BIT_ETC___d783,
		IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220,
		_theResult____h25812,
		_theResult____h47412,
		_theResult___snd_fst__h58375,
		_theResult___snd_fst__h58377,
		add_mantissa__h47408,
		mantissa2__h25799,
		mantissa2__h25821,
		mantissa2__h25842,
		mantissa3___1__h35034,
		mantissa3__h25843,
		mantissa_to_shift___1__h25840,
		mantissa_to_shift__h25835,
		resultant_mantissa___1__h58130,
		resultant_mantissa_norm_expo__h57824,
		resultant_mantissa_norm_zerosMSB__h57825,
		sub_mantissa1__h47409,
		sub_mantissa2__h47410,
		sub_mantissa__h47411;
  wire [69 : 0] IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4468,
		IF_ff_input_first__319_BIT_0_351_THEN_0xFFFFFF_ETC___d4460,
		IF_ff_input_first__319_BIT_0_351_THEN_42949672_ETC___d3812,
		IF_ff_input_first__319_BIT_0_351_THEN_IF_NOT_I_ETC___d4264,
		IF_ff_input_first__319_BIT_0_351_THEN_IF_ff_in_ETC___d3531;
  wire [68 : 0] IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d4453,
		IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d4454,
		IF_inst_dpfpu_divider_rg_stage3_679_BIT_10_686_ETC___d1767;
  wire [63 : 0] IF_0b0_CONCAT_IF_getExp64_res_whas__996_THEN_g_ETC___d4063,
		IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d3493,
		IF_IF_getExp32_res_whas__828_THEN_getExp32_res_ETC___d3895,
		IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5006,
		IF_NOT_ff_input_first__319_BIT_1_544_558_AND_f_ETC___d3692,
		IF_NOT_ff_input_first__319_BIT_3_372_373_AND_I_ETC___d3491,
		IF_ff_input_first__319_BIT_1_544_THEN_0_ELSE_1_ETC___d3893,
		IF_ff_input_first__319_BIT_3_372_AND_IF_condFl_ETC___d3490,
		_theResult_____1_fst__h76523,
		_theResult_____1_snd__h217574,
		_theResult_____1_snd__h220073,
		_theResult_____2_snd__h217249,
		_theResult_____2_snd__h217356,
		_theResult_____2_snd__h217408,
		_theResult_____2_snd__h217459,
		_theResult_____2_snd__h217462,
		_theResult_____2_snd__h219750,
		_theResult_____2_snd__h219855,
		_theResult_____2_snd__h219907,
		_theResult_____2_snd__h219958,
		_theResult_____2_snd__h219961,
		_theResult_____3_snd__h199367,
		_theResult_____3_snd__h199919,
		_theResult_____3_snd_snd__h171134,
		_theResult_____3_snd_snd__h171184,
		_theResult_____3_snd_snd__h171725,
		_theResult_____3_snd_snd_fst__h216477,
		_theResult_____3_snd_snd_fst__h218980,
		_theResult_____3_snd_snd_snd__h171077,
		_theResult____h184853,
		_theResult____h194409,
		_theResult___snd__h216956,
		_theResult___snd__h216960,
		_theResult___snd__h217030,
		_theResult___snd__h217100,
		_theResult___snd__h217104,
		_theResult___snd__h217175,
		_theResult___snd__h219457,
		_theResult___snd__h219461,
		_theResult___snd__h219531,
		_theResult___snd__h219601,
		_theResult___snd__h219605,
		_theResult___snd__h219676,
		_theResult___snd_final_result__h194417,
		_theResult___snd_snd__h216841,
		_theResult___snd_snd__h219344,
		_theResult___snd_snd_snd_fst__h216891,
		_theResult___snd_snd_snd_fst__h216893,
		_theResult___snd_snd_snd_fst__h216897,
		_theResult___snd_snd_snd_fst__h216925,
		_theResult___snd_snd_snd_fst__h216974,
		_theResult___snd_snd_snd_fst__h216999,
		_theResult___snd_snd_snd_fst__h217037,
		_theResult___snd_snd_snd_fst__h217041,
		_theResult___snd_snd_snd_fst__h217068,
		_theResult___snd_snd_snd_fst__h217118,
		_theResult___snd_snd_snd_fst__h217143,
		_theResult___snd_snd_snd_fst__h219392,
		_theResult___snd_snd_snd_fst__h219394,
		_theResult___snd_snd_snd_fst__h219398,
		_theResult___snd_snd_snd_fst__h219426,
		_theResult___snd_snd_snd_fst__h219475,
		_theResult___snd_snd_snd_fst__h219500,
		_theResult___snd_snd_snd_fst__h219538,
		_theResult___snd_snd_snd_fst__h219542,
		_theResult___snd_snd_snd_fst__h219569,
		_theResult___snd_snd_snd_fst__h219619,
		_theResult___snd_snd_snd_fst__h219644,
		_theResult___snd_snd_snd_snd_fst__h216835,
		_theResult___snd_snd_snd_snd_fst__h219338,
		final_result___1__h216238,
		final_result___1__h216270,
		final_result___1__h216359,
		final_result___1__h216901,
		final_result___1__h217500,
		final_result___1__h217530,
		final_result___1__h218741,
		final_result___1__h218773,
		final_result___1__h218862,
		final_result___1__h219402,
		final_result___1__h219999,
		final_result___1__h220029,
		final_result___2__h216520,
		final_result___2__h217461,
		final_result___2__h219022,
		final_result___2__h219960,
		final_result___3__h216472,
		final_result___3__h218975,
		final_result__h215913,
		final_result__h218413,
		final_result__h229340,
		final_result__h229363,
		final_result__h269182,
		final_result__h78431,
		getMant64_argwget_BITS_127_TO_64__q26,
		getMant64_argwget_BITS_191_TO_128__q25,
		getMant64_argwget_BITS_63_TO_0__q27,
		inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q24,
		lv_final_output__h171078,
		lv_final_output__h171135,
		lv_final_output__h171185,
		lv_final_output__h76501,
		lv_result__h199963,
		lv_result__h200004,
		new_value_final_result__h170983,
		res__h194401,
		setCanonicalNaN_argwget_BITS_127_TO_64__q40,
		setCanonicalNaN_argwget_BITS_191_TO_128__q39,
		setCanonicalNaN_argwget_BITS_63_TO_0__q41,
		wr_final_out_final_result__h194415,
		x_data__h197458,
		x_data__h199336,
		x_data__h200255,
		x_data__h200411,
		x_data__h214468,
		x_data__h214706,
		x_data__h215936,
		x_data__h218436,
		x_data__h229264,
		x_data__h229336,
		x_data__h292496,
		x_data__h292627,
		x_data__h292749;
  wire [62 : 0] IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d4450,
		IF_NOT_IF_inst_dpfm_add_sub_ff_stage5_read__16_ETC___d3256,
		IF_NOT_inst_dpfpu_divider_rg_stage3_679_BITS_8_ETC___d1757,
		IF_inst_dpfpu_divider_rg_stage3_679_BIT_7_735__ETC___d1756;
  wire [61 : 0] IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d4655,
		IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4657;
  wire [57 : 0] IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q20,
		_remainder___1__h61531,
		_remainder__h61359,
		_theResult_____3__h268747,
		_theResult____h78091,
		lv_remainder__h78198,
		lv_remainder__h78288,
		lv_remainder__h78843,
		lv_remainder_temp__h78088,
		lv_root_rem__h78419,
		lv_root_temp_1__h78089,
		lv_root_temp_2__h78090,
		x__h78821;
  wire [55 : 0] IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d84,
		IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_ETC__q7,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d62,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d85,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q12,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q14,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q15,
		_denominator__h63117,
		_dividend___1__h61532,
		_dividend__h60772,
		_dividend__h60868,
		_dividend__h61361,
		_dividend__h61362,
		_numerator__h63118,
		_theResult___fst__h64505,
		_theResult___fst__h64524,
		_theResult___fst__h76191,
		_theResult___fst__h76195,
		inst_dpfpu_divider_int_div_wr_final_out_wget___ETC___d1578,
		inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q10,
		inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q11,
		lv_extended_mantissa___1__h78908,
		lv_extended_mantissa__h78427,
		lv_quotient___1__h64541,
		lv_quotient_shiftL_expo__h64517,
		lv_quotient_shiftL_zerosMSB__h64519,
		x_lv_quotient__h64407;
  wire [54 : 0] IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__438_ETC___d5941,
		IF_IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas___ETC__q38,
		IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67,
		IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35,
		result_mantissa__h78418,
		x__h284844,
		x__h78128,
		x__h78391;
  wire [53 : 0] IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3253,
		IF_IF_IF_inst_dpfpu_divider_rg_stage3_679_BITS_ETC___d1732,
		IF_IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0_ETC___d3716,
		_theResult_____4__h76408,
		_theResult_____5__h170953,
		lv_man___1__h214367,
		lv_man__h205117,
		lv_rounded_mantissa___1__h171637,
		lv_rounded_mantissa__h171667,
		lv_rounded_quotient___1__h76766,
		lv_rounded_quotient__h76407,
		lv_rounded_quotient__h76796;
  wire [52 : 0] man1__h243108,
		man2__h243109,
		x__h232411,
		x__h232475,
		x__h258017,
		x__h258045;
  wire [51 : 0] IF_IF_IF_condFlags32_res_whas__353_THEN_condFl_ETC___d5810,
		IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4050,
		_theResult___fst__h218635,
		_theResult___fst__h218645,
		_theResult___fst__h218692,
		_theResult___fst__h218733,
		_theResult___fst__h218752,
		_theResult___fst__h218794,
		_theResult___fst__h218813,
		_theResult___fst__h218841,
		_theResult___fst__h218883,
		_theResult___fst__h218901,
		_theResult___fst__h218943,
		condFlags64_argwget_BITS_125_TO_74__q31,
		condFlags64_argwget_BITS_188_TO_137__q30,
		condFlags64_argwget_BITS_62_TO_11__q32,
		getMant64_reswget_BITS_103_TO_52__q35,
		getMant64_reswget_BITS_155_TO_104__q28,
		man__h223556,
		mant__h223496,
		mantissa___1__h267693,
		mantissa__h13731,
		mantissa__h194400,
		mantissa__h259734,
		mantissa__h259736,
		mantissa__h259746;
  wire [48 : 0] IF_IF_getExp64_res_whas__996_THEN_getExp64_res_ETC___d4320,
		IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d594,
		_theResult_____1_snd__h22040,
		_theResult_____1_snd__h22043,
		_theResult___snd_fst__h22080,
		lv_product_mantissa___1__h22011,
		lv_product_mantissa___1__h22026,
		lv_product_mantissa__h14957,
		lv_product_mantissa__h21981,
		lv_product_mantissa_shiftL_expo__h21989,
		lv_product_mantissa_shiftL_zerosMSB__h21991,
		man__h228296,
		man__h228395,
		x_lv_product_mantissa__h15025,
		y_avValue_snd_snd_fst__h228724;
  wire [36 : 0] IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4386,
		IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4388,
		IF_inst_spfpu_divider_rg_stage3_71_BIT_10_78_T_ETC___d359,
		y_avValue__h228062,
		y_avValue__h228211;
  wire [31 : 0] IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3414,
		IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5130,
		IF_NOT_ff_input_first__319_BIT_3_372_373_AND_I_ETC___d3410,
		IF_NOT_ff_input_first__319_BIT_3_372_373_AND_I_ETC___d3412,
		IF_ff_input_first__319_BIT_3_372_AND_IF_condFl_ETC___d3411,
		_1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC__q49,
		_1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC__q29,
		_theResult_____1_fst__h12160,
		_theResult_____3_snd__h197514,
		_theResult_____3_snd__h198072,
		_theResult_____3_snd_snd__h58027,
		_theResult_____3_snd_snd__h58077,
		_theResult_____3_snd_snd__h58618,
		_theResult_____3_snd_snd_snd__h57970,
		_theResult____h179813,
		_theResult____h194396,
		_theResult___snd_fst__h229175,
		ff_inputD_OUT_BITS_176_TO_145__q1,
		final_result___216520_BITS_31_TO_0__q57,
		final_result___217461_BITS_31_TO_0__q56,
		final_result___219022_BITS_31_TO_0__q37,
		final_result___219960_BITS_31_TO_0__q36,
		final_result__h14069,
		final_result__h260180,
		getMant32_argwget_BITS_31_TO_0__q47,
		getMant32_argwget_BITS_63_TO_32__q46,
		getMant32_argwget_BITS_95_TO_64__q45,
		inp32___1__h200863,
		inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q23,
		lv_final_output__h12138,
		lv_final_output__h57971,
		lv_final_output__h58028,
		lv_final_output__h58078,
		lv_result__h198116,
		lv_result__h198157,
		new_value_final_result__h57876,
		res___1__h229177,
		res__h179718,
		res__h228536,
		setCanonicalNaN_reswget_BITS_31_TO_0__q59,
		setCanonicalNaN_reswget_BITS_63_TO_32__q43,
		setCanonicalNaN_reswget_BITS_95_TO_64__q42,
		theResult__94396_SL_x00483_BITS_4_TO_0__q3,
		x1_avValue_final_result__h179723,
		x1_avValue_final_result__h184750,
		x1_avValue_final_result__h194294,
		x1_avValue_final_result__h194302,
		x1_avValue_final_result__h214457,
		x1_avValue_snd_fst__h229172,
		x__h194490,
		x__h194559,
		x__h194599,
		y_avValue_snd_fst__h229169;
  wire [30 : 0] IF_NOT_IF_inst_spfm_add_sub_ff_stage5_read__17_ETC___d1268,
		IF_NOT_inst_spfpu_divider_rg_stage3_71_BITS_50_ETC___d349,
		IF_inst_spfpu_divider_rg_stage3_71_BIT_7_27_OR_ETC___d348;
  wire [28 : 0] IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13,
		_remainder___1__h3107,
		_remainder__h2935,
		_theResult_____3__h259744,
		_theResult____h13729,
		lv_remainder__h13836,
		lv_remainder__h13926,
		lv_remainder__h14481,
		lv_remainder_temp__h13726,
		lv_root_rem__h14057,
		lv_root_temp_1__h13727,
		lv_root_temp_2__h13728,
		x__h14459;
  wire [26 : 0] IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__80__ETC__q5,
		_denominator__h4699,
		_dividend___1__h3108,
		_dividend__h2348,
		_dividend__h2444,
		_dividend__h2937,
		_dividend__h2938,
		_numerator__h4700,
		_theResult___fst__h11828,
		_theResult___fst__h11832,
		_theResult___fst__h6087,
		_theResult___fst__h6106,
		inst_spfpu_divider_int_div_wr_final_out_wget___ETC___d199,
		lv_extended_mantissa___1__h14546,
		lv_extended_mantissa__h14065,
		lv_quotient___1__h6123,
		lv_quotient_shiftL_expo__h6099,
		lv_quotient_shiftL_zerosMSB__h6101,
		x_lv_quotient__h5989;
  wire [25 : 0] IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__353_ETC___d5817,
		IF_IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas___ETC__q58,
		result_mantissa__h14056,
		x__h13766,
		x__h14029,
		x__h267722;
  wire [24 : 0] IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5035,
		IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5159,
		IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1265,
		IF_IF_IF_inst_spfpu_divider_rg_stage3_71_BITS__ETC___d324,
		_theResult_____4__h12045,
		_theResult_____5__h57846,
		lv_man___1__h184656,
		lv_man___1__h194195,
		lv_man__h179828,
		lv_man__h184868,
		lv_rounded_mantissa___1__h58530,
		lv_rounded_mantissa__h58560,
		lv_rounded_quotient___1__h12403,
		lv_rounded_quotient__h12044,
		lv_rounded_quotient__h12433;
  wire [23 : 0] IF_IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0_ETC___d4365,
		fman___1__h229198,
		fman__h228865,
		man1__h234880,
		man2__h234881,
		x__h230955,
		x__h231019,
		x__h241727,
		x__h241755;
  wire [22 : 0] IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3881,
		_theResult___fst__h216132,
		_theResult___fst__h216142,
		_theResult___fst__h216189,
		_theResult___fst__h216230,
		_theResult___fst__h216249,
		_theResult___fst__h216291,
		_theResult___fst__h216310,
		_theResult___fst__h216338,
		_theResult___fst__h216380,
		_theResult___fst__h216398,
		_theResult___fst__h216440,
		condFlags32_argwget_BITS_30_TO_8__q52,
		condFlags32_argwget_BITS_61_TO_39__q51,
		condFlags32_argwget_BITS_92_TO_70__q50,
		getMant32_reswget_BITS_45_TO_23__q55,
		getMant32_reswget_BITS_68_TO_46__q48,
		value__h226808;
  wire [12 : 0] IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3240,
		IF_NOT_inst_dpfpu_divider_rg_stage3_679_BIT_13_ETC___d1744,
		_0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3183,
		_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1880,
		_1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1454,
		_theResult_____1_fst__h94459,
		_theResult_____1_fst__h94462,
		_theResult_____4_snd_fst__h102347,
		_theResult___fst__h171265,
		_theResult___fst__h171269,
		_theResult___fst__h94415,
		_theResult___snd_fst__h76275,
		_theResult___snd_fst__h76285,
		_theResult___snd_fst__h76293,
		_theResult___snd_fst__h76303,
		_theResult___snd_fst__h76305,
		exp1__h243116,
		exp1_temp__h232367,
		exp2__h243117,
		exp2_temp__h232368,
		exponent2__h102128,
		exponent3__h102107,
		exponent3__h102119,
		exponent_difference__h102142,
		inst_dpfm_add_sub_ff_input_register_read__867__ETC___d1871,
		inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1451,
		lv_exponent___1__h76795,
		lv_exponent___1__h76882,
		lv_exponent__h243118,
		lv_exponent__h76410,
		lv_exponent_inc_shift__h64515,
		lv_exponent_sub_shift__h64518,
		lv_exponent_sub_zerosMSB__h64520,
		lv_minuend__h102138,
		lv_product_exponent___1__h94432,
		lv_product_exponent__h94399,
		lv_product_exponent_inc_shift__h94407,
		lv_product_exponent_sub_shift__h94410,
		lv_product_exponent_sub_zerosMSB__h94412,
		lv_summed_exponent__h232369,
		resultant_exponent___1__h171666,
		resultant_exponent__h170935,
		resultant_exponent_inc__h170930,
		resultant_exponent_sub__h170928,
		resultant_exponent_sub_zerosMSB__h170933,
		shift_neg__h64516,
		shift_neg__h94408,
		x__h232548,
		x__h232550,
		x__h232552,
		x__h243171,
		x__h94495,
		x_lv_exponent__h64408,
		x_lv_product_exponent__h79382,
		y__h232549,
		y__h232551,
		y__h243170,
		y__h243172,
		y__h243173,
		y__h250598,
		y__h94494;
  wire [11 : 0] IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d5927,
		IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_ETC__q6,
		_theResult_____1_fst__h78909,
		exponent___1__h269375,
		lv_exp__h218402,
		result_exponent___1__h78931,
		result_exponent__h268746,
		x__h218516,
		x__h269346,
		x__h269377,
		x__h285088,
		x__h285090,
		y__h269347,
		y__h285089;
  wire [10 : 0] expo__h194399,
		expo__h194412,
		expo__h223495,
		expo__h223554,
		local_expo___1__h214390,
		shiftDist__h228295,
		x__h228416;
  wire [9 : 0] IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1252,
	       IF_NOT_inst_spfpu_divider_rg_stage3_71_BIT_77__ETC___d336,
	       _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1195,
	       _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d472,
	       _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133,
	       _theResult_____1_fst__h22039,
	       _theResult_____1_fst__h22042,
	       _theResult_____4_snd_fst__h26041,
	       _theResult___fst__h21995,
	       _theResult___fst__h58158,
	       _theResult___fst__h58162,
	       _theResult___snd_fst__h11912,
	       _theResult___snd_fst__h11922,
	       _theResult___snd_fst__h11930,
	       _theResult___snd_fst__h11940,
	       _theResult___snd_fst__h11942,
	       exp1__h234888,
	       exp1_temp__h230911,
	       exp2__h234889,
	       exp2_temp__h230912,
	       exponent2__h25822,
	       exponent3__h25801,
	       exponent3__h25813,
	       exponent_difference__h25836,
	       inst_spfm_add_sub_ff_input_register_read__59_B_ETC___d463,
	       inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d130,
	       lv_exponent___1__h12432,
	       lv_exponent___1__h12519,
	       lv_exponent__h12047,
	       lv_exponent__h234890,
	       lv_exponent_inc_shift__h6097,
	       lv_exponent_sub_shift__h6100,
	       lv_exponent_sub_zerosMSB__h6102,
	       lv_minuend__h25832,
	       lv_product_exponent___1__h22012,
	       lv_product_exponent__h21979,
	       lv_product_exponent_inc_shift__h21987,
	       lv_product_exponent_sub_shift__h21990,
	       lv_product_exponent_sub_zerosMSB__h21992,
	       lv_summed_exponent__h230913,
	       resultant_exponent___1__h58559,
	       resultant_exponent__h57828,
	       resultant_exponent_inc__h57823,
	       resultant_exponent_sub__h57821,
	       resultant_exponent_sub_zerosMSB__h57826,
	       shift_neg__h21988,
	       shift_neg__h6098,
	       x__h22075,
	       x__h221152,
	       x__h222057,
	       x__h231092,
	       x__h231094,
	       x__h231096,
	       x__h234943,
	       x_lv_exponent__h5990,
	       x_lv_product_exponent__h15024,
	       y__h22074,
	       y__h231093,
	       y__h231095,
	       y__h234942,
	       y__h234944,
	       y__h234945,
	       y__h238339;
  wire [8 : 0] IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d5803,
	       IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__80__ETC__q4,
	       IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d5273,
	       IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d5347,
	       _theResult_____1_fst__h14547,
	       exponent___1__h260373,
	       exponent__h259730,
	       result_exponent___1__h14569,
	       result_exponent__h259743,
	       x__h260344,
	       x__h260375,
	       x__h267966,
	       x__h267968,
	       y__h260345,
	       y__h267967;
  wire [7 : 0] IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832,
	       _theResult_____2__h228912,
	       expo___1__h229201,
	       expo__h179815,
	       expo__h184855,
	       expo__h228531,
	       local_expo___1__h184681,
	       local_expo___1__h194220,
	       lv_zeros_on_left__h148341,
	       x__h137214,
	       x__h171514;
  wire [6 : 0] lsb_zeros__h94405,
	       lv_leading_zeros__h268738,
	       lv_zeros_on_left__h47414,
	       msb_zeros___1__h94434,
	       msb_zeros__h79334,
	       msb_zeros__h94403,
	       x__h185033,
	       x__h205213,
	       x__h284818,
	       x__h42116,
	       x__h58407,
	       x__h94469;
  wire [5 : 0] IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d5271,
	       IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d5345,
	       lsb_zeros__h21985,
	       lsb_zeros__h64513,
	       lv_leading_zeros__h259735,
	       msb_zeros___1__h22014,
	       msb_zeros__h14976,
	       msb_zeros__h21983,
	       msb_zeros__h64365,
	       x__h179975,
	       x__h200483,
	       x__h22049,
	       x__h243178,
	       x__h250599,
	       x__h267696;
  wire [4 : 0] IF_NOT_IF_getExp64_res_whas__996_THEN_getExp64_ETC___d4338,
	       IF_ff_input_first__319_BIT_0_351_THEN_IF_NOT_I_ETC___d4263,
	       _theResult_____1_snd__h12139,
	       _theResult_____1_snd__h12150,
	       _theResult_____1_snd__h12161,
	       _theResult_____1_snd__h12178,
	       _theResult_____1_snd__h12288,
	       _theResult_____1_snd__h12528,
	       _theResult_____1_snd__h12546,
	       _theResult_____1_snd__h76502,
	       _theResult_____1_snd__h76513,
	       _theResult_____1_snd__h76524,
	       _theResult_____1_snd__h76541,
	       _theResult_____1_snd__h76651,
	       _theResult_____1_snd__h76891,
	       _theResult_____1_snd__h76909,
	       _theResult_____3_fst__h197513,
	       _theResult_____3_fst__h197654,
	       _theResult_____3_fst__h198071,
	       _theResult_____3_fst__h199366,
	       _theResult_____3_fst__h199507,
	       _theResult_____3_fst__h199918,
	       condFlags32_reswget_BITS_14_TO_10__q53,
	       condFlags32_reswget_BITS_9_TO_5__q54,
	       condFlags64_reswget_BITS_14_TO_10__q33,
	       condFlags64_reswget_BITS_9_TO_5__q34,
	       exception__h228529,
	       fflags__h14104,
	       fflags__h170974,
	       fflags__h179830,
	       fflags__h184870,
	       fflags__h259979,
	       fflags__h268981,
	       fflags__h57867,
	       fflags__h78466,
	       lsb_zeros__h6095,
	       msb_zeros__h5947,
	       result__h223367,
	       result__h227933,
	       result__h228939,
	       result__h228970,
	       wr_final_out_fflags__h194416,
	       x1_avValue_fflags__h179724,
	       x1_avValue_fflags__h184751,
	       x1_avValue_fflags__h194295,
	       x__h215489,
	       x__h215649,
	       x__h215746,
	       x__h217988,
	       x__h218148,
	       x__h218245,
	       x__h223559,
	       x__h234950,
	       x__h238340,
	       x_fflags__h197460,
	       x_fflags__h199338,
	       x_fflags__h200257,
	       x_fflags__h200413;
  wire [1 : 0] IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d5773,
	       IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d5868,
	       IF_inst_dpfm_add_sub_ff_stage2_read__382_BITS__ETC___d2798,
	       IF_inst_spfm_add_sub_ff_stage2_read__42_BITS_9_ETC___d984,
	       _theResult_____6_snd_snd__h148082,
	       _theResult_____6_snd_snd__h47155,
	       _theResult_____6_snd_snd_snd__h148129,
	       _theResult_____6_snd_snd_snd__h47202,
	       _theResult____h197671,
	       _theResult____h199524,
	       lv_compare_result__h197442,
	       lv_compare_result__h199321,
	       lv_result_is_infinity___1__h148083,
	       lv_result_is_infinity___1__h148145,
	       lv_result_is_infinity___1__h47156,
	       lv_result_is_infinity___1__h47218,
	       lv_result_is_zero___1__h148178,
	       lv_result_is_zero___1__h148182,
	       lv_result_is_zero___1__h47251,
	       lv_result_is_zero___1__h47255,
	       x__h148125,
	       x__h148166,
	       x__h148416,
	       x__h47198,
	       x__h47239,
	       x__h47489;
  wire IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_BI_ETC___d3286,
       IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_BI_ETC___d3302,
       IF_IF_inst_spfm_add_sub_ff_stage5_read__177_BI_ETC___d1298,
       IF_IF_inst_spfm_add_sub_ff_stage5_read__177_BI_ETC___d1314,
       IF_NOT_IF_condFlags32_res_whas__353_THEN_condF_ETC___d4194,
       IF_NOT_IF_condFlags32_res_whas__353_THEN_condF_ETC___d4246,
       IF_NOT_IF_condFlags64_res_whas__438_THEN_condF_ETC___d4230,
       IF_NOT_IF_condFlags64_res_whas__438_THEN_condF_ETC___d4260,
       IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359,
       IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3837,
       IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d4243,
       IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d5235,
       IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444,
       IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d4006,
       IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d4257,
       IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d5313,
       IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d5228,
       IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d3847,
       IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d3852,
       IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d4017,
       IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d4022,
       IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3843,
       IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3845,
       IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3848,
       IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3850,
       IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d4164,
       IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4309,
       IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4310,
       IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4312,
       IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2339,
       IF_inst_dpfm_add_sub_ff_stage2_read__382_BIT_5_ETC___d2399,
       IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3191,
       IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d699,
       IF_inst_spfm_add_sub_ff_stage2_read__42_BIT_5__ETC___d759,
       IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1203,
       INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2100,
       INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d576,
       INV_1_MINUS_inst_dpfpu_divider_rg_stage2_449_B_ETC___d1573,
       INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d194,
       NOT_0b0_CONCAT_IF_getExp64_res_whas__996_THEN__ETC___d4255,
       NOT_IF_condFlags32_res_whas__353_THEN_condFlag_ETC___d3854,
       NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d4024,
       NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d5173,
       NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d5179,
       NOT_IF_getExp32_res_whas__828_THEN_getExp32_re_ETC___d4241,
       NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5360,
       NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5362,
       NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5481,
       NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5483,
       NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5741,
       NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5766,
       NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5768,
       NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5837,
       NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5862,
       NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5864,
       NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5196,
       NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5207,
       NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5287,
       NOT_ff_input_first__319_BIT_2_533_537_AND_NOT__ETC___d3951,
       NOT_ff_input_first__319_BIT_2_533_537_AND_NOT__ETC___d4118,
       NOT_ff_input_first__319_BIT_2_533_537_AND_ff_i_ETC___d3958,
       NOT_ff_input_first__319_BIT_2_533_537_AND_ff_i_ETC___d4124,
       NOT_inst_dpfpu_divider_rg_stage2_449_BITS_21_T_ETC___d1653,
       NOT_inst_dpfpu_divider_rg_stage3_679_BITS_82_T_ETC___d1702,
       NOT_inst_spfpu_divider_rg_stage2_28_BITS_18_TO_ETC___d245,
       NOT_inst_spfpu_divider_rg_stage3_71_BITS_50_TO_ETC___d294,
       _0_CONCAT_IF_IF_IF_inst_dpfm_add_sub_ff_stage2__ETC___d2751,
       _0_CONCAT_IF_IF_IF_inst_spfm_add_sub_ff_stage2__ETC___d937,
       _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3185,
       _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1197,
       _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4013,
       _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4015,
       _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4018,
       _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4020,
       _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4200,
       _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1881,
       _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d473,
       _1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1455,
       _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134,
       _theResult_____1__h102152,
       _theResult_____1__h25846,
       _theResult_____1_fst__h171801,
       _theResult_____1_fst__h217573,
       _theResult_____1_fst__h220072,
       _theResult_____1_fst__h58694,
       _theResult_____1_snd__h217641,
       _theResult_____1_snd__h220140,
       _theResult_____1_snd_snd_fst__h171829,
       _theResult_____1_snd_snd_fst__h58722,
       _theResult_____1_snd_snd_snd__h171830,
       _theResult_____1_snd_snd_snd__h58723,
       _theResult_____2_fst__h217248,
       _theResult_____2_fst__h219749,
       _theResult_____3_fst__h171072,
       _theResult_____3_fst__h171722,
       _theResult_____3_fst__h216474,
       _theResult_____3_fst__h218977,
       _theResult_____3_fst__h57965,
       _theResult_____3_fst__h58615,
       _theResult_____3_snd_fst__h171074,
       _theResult_____3_snd_fst__h171724,
       _theResult_____3_snd_fst__h57967,
       _theResult_____3_snd_fst__h58617,
       _theResult_____3_snd_snd_fst__h171076,
       _theResult_____3_snd_snd_fst__h57969,
       _theResult_____6__h170952,
       _theResult_____6__h57845,
       _theResult_____6_fst__h148079,
       _theResult_____6_fst__h47152,
       _theResult____h12042,
       _theResult____h179825,
       _theResult____h184865,
       _theResult____h205114,
       _theResult____h76405,
       _theResult___fst__h216838,
       _theResult___fst__h216959,
       _theResult___fst__h217029,
       _theResult___fst__h217103,
       _theResult___fst__h217174,
       _theResult___fst__h219341,
       _theResult___fst__h219460,
       _theResult___fst__h219530,
       _theResult___fst__h219604,
       _theResult___fst__h219675,
       _theResult___fst__h231333,
       _theResult___fst__h231341,
       _theResult___fst__h232785,
       _theResult___fst__h232793,
       _theResult___snd_fst__h216096,
       _theResult___snd_fst__h216134,
       _theResult___snd_fst__h216144,
       _theResult___snd_fst__h216191,
       _theResult___snd_fst__h216251,
       _theResult___snd_fst__h216312,
       _theResult___snd_fst__h216340,
       _theResult___snd_fst__h216400,
       _theResult___snd_fst__h218599,
       _theResult___snd_fst__h218637,
       _theResult___snd_fst__h218647,
       _theResult___snd_fst__h218694,
       _theResult___snd_fst__h218754,
       _theResult___snd_fst__h218815,
       _theResult___snd_fst__h218843,
       _theResult___snd_fst__h218903,
       and_sign__h197440,
       and_sign__h199319,
       ex_overflow__h170943,
       ex_overflow__h57836,
       expo3_zero__h102116,
       expo3_zero__h25810,
       ff_input_first__319_BITS_12_TO_8_320_EQ_0b100__ETC___d3345,
       ff_input_first__319_BITS_12_TO_8_320_EQ_0b10_5_ETC___d4544,
       ff_input_first__319_BITS_12_TO_8_320_EQ_0b10_5_ETC___d4730,
       ff_input_first__319_BITS_12_TO_8_320_EQ_0b1100_ETC___d4607,
       ff_input_first__319_BIT_0_351_AND_NOT_IF_condF_ETC___d5170,
       ff_input_first__319_BIT_208_457_XOR_ff_input_f_ETC___d3820,
       ff_input_first__319_BIT_2_533_AND_NOT_ff_input_ETC___d3965,
       ff_input_first__319_BIT_2_533_AND_NOT_ff_input_ETC___d4130,
       ff_input_first__319_BIT_2_533_AND_ff_input_fir_ETC___d3971,
       ff_input_first__319_BIT_2_533_AND_ff_input_fir_ETC___d4135,
       inexact__h179826,
       inexact__h184866,
       inexact__h205115,
       inst_dpfm_add_sub_ff_input_register_read__867__ETC___d1872,
       inst_dpfm_add_sub_ff_stage2_read__382_BIT_15_4_ETC___d2407,
       inst_dpfm_add_sub_ff_stage5_read__165_BIT_15_1_ETC___d3292,
       inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1452,
       inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1453,
       inst_spfm_add_sub_ff_input_register_read__59_B_ETC___d464,
       inst_spfm_add_sub_ff_stage2_read__42_BIT_15_65_ETC___d767,
       inst_spfm_add_sub_ff_stage5_read__177_BIT_14_1_ETC___d1304,
       inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131,
       inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132,
       lv_inexact1__h215918,
       lv_inexact1__h218418,
       lv_inexact___1__h216469,
       lv_inexact___1__h218972,
       lv_inexact__h14064,
       lv_inexact__h170951,
       lv_inexact__h215911,
       lv_inexact__h218411,
       lv_inexact__h57844,
       lv_inexact__h78426,
       lv_invalid___2__h216471,
       lv_invalid___2__h218974,
       lv_invalid__h215893,
       lv_invalid__h215909,
       lv_invalid__h215920,
       lv_invalid__h218392,
       lv_invalid__h218409,
       lv_invalid__h218420,
       lv_op1_subnormal__h230902,
       lv_op1_subnormal__h232358,
       lv_op2_Nan__h197438,
       lv_op2_Nan__h199317,
       lv_op2_subnormal__h230903,
       lv_op2_subnormal__h232359,
       lv_round_up___1__h12332,
       lv_round_up___1__h12368,
       lv_round_up___1__h171383,
       lv_round_up___1__h171605,
       lv_round_up___1__h216554,
       lv_round_up___1__h217211,
       lv_round_up___1__h219057,
       lv_round_up___1__h219712,
       lv_round_up___1__h228686,
       lv_round_up___1__h228825,
       lv_round_up___1__h58276,
       lv_round_up___1__h58498,
       lv_round_up___1__h76695,
       lv_round_up___1__h76731,
       lv_roundup___1__h14127,
       lv_roundup___1__h14509,
       lv_roundup___1__h184584,
       lv_roundup___1__h184621,
       lv_roundup___1__h194123,
       lv_roundup___1__h194160,
       lv_roundup___1__h214296,
       lv_roundup___1__h214332,
       lv_roundup___1__h78489,
       lv_roundup___1__h78871,
       lv_sign__h194392,
       lv_sticky___1__h6124,
       lv_sticky___1__h64542,
       lv_sticky__h14062,
       lv_sticky__h170949,
       lv_sticky__h215916,
       lv_sticky__h218416,
       lv_sticky__h228192,
       lv_sticky__h228538,
       lv_sticky__h57842,
       lv_sticky__h78424,
       op_xor_sign3__h102117,
       op_xor_sign3__h25811,
       or_sign__h197439,
       or_sign__h199318,
       quiet_nan_two__h230907,
       quiet_nan_two__h232363,
       sign2__h102104,
       sign2__h25798,
       sign3__h102106,
       sign3__h25800,
       sign__h205112,
       x__h101858,
       x__h101889,
       x__h101919,
       x__h102258,
       x__h102270,
       x__h11970,
       x__h11975,
       x__h12195,
       x__h12345,
       x__h12380,
       x__h12382,
       x__h14418,
       x__h14533,
       x__h148002,
       x__h148009,
       x__h148117,
       x__h148157,
       x__h148159,
       x__h148161,
       x__h148162,
       x__h148190,
       x__h148202,
       x__h148232,
       x__h171535,
       x__h171617,
       x__h179844,
       x__h184597,
       x__h184884,
       x__h194136,
       x__h205133,
       x__h214309,
       x__h216812,
       x__h217223,
       x__h219315,
       x__h219724,
       x__h228736,
       x__h228837,
       x__h228839,
       x__h231147,
       x__h231410,
       x__h231416,
       x__h231465,
       x__h231478,
       x__h231568,
       x__h232599,
       x__h232862,
       x__h232868,
       x__h232916,
       x__h232929,
       x__h233019,
       x__h241785,
       x__h241849,
       x__h241863,
       x__h241868,
       x__h25552,
       x__h25583,
       x__h25613,
       x__h258127,
       x__h258141,
       x__h258146,
       x__h25952,
       x__h25964,
       x__h290760,
       x__h47075,
       x__h47082,
       x__h47190,
       x__h47230,
       x__h47232,
       x__h47234,
       x__h47235,
       x__h47263,
       x__h47275,
       x__h47305,
       x__h58428,
       x__h58510,
       x__h76333,
       x__h76338,
       x__h76558,
       x__h76708,
       x__h76743,
       x__h76745,
       x__h78780,
       x__h78895,
       y__h102271,
       y__h12344,
       y__h12381,
       y__h14139,
       y__h14521,
       y__h148158,
       y__h148160,
       y__h148203,
       y__h171395,
       y__h171631,
       y__h184596,
       y__h184634,
       y__h194135,
       y__h194173,
       y__h214308,
       y__h214345,
       y__h216566,
       y__h217236,
       y__h219069,
       y__h219737,
       y__h228698,
       y__h231479,
       y__h231481,
       y__h231525,
       y__h232930,
       y__h232932,
       y__h232976,
       y__h25965,
       y__h259993,
       y__h260014,
       y__h268995,
       y__h269016,
       y__h47231,
       y__h47233,
       y__h47276,
       y__h58288,
       y__h58524,
       y__h76707,
       y__h76744,
       y__h78501,
       y__h78883,
       y_avValue_snd_snd_snd__h228772,
       y_avValue_snd_snd_snd_snd_snd_snd__h228768;

  // action method _start
  assign RDY__start = !rg_multicycle_op && ff_input_FULL_N ;
  assign CAN_FIRE__start = !rg_multicycle_op && ff_input_FULL_N ;
  assign WILL_FIRE__start = EN__start ;

  // value method get_result
  assign get_result = rg_result ;
  assign RDY_get_result = 1'd1 ;

  // action method flush
  assign RDY_flush = 1'd1 ;
  assign CAN_FIRE_flush = 1'd1 ;
  assign WILL_FIRE_flush = EN_flush ;

  // submodule ff_input
  FIFO1 #(.width(32'd209), .guarded(32'd1)) ff_input(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ff_input_D_IN),
						     .ENQ(ff_input_ENQ),
						     .DEQ(ff_input_DEQ),
						     .CLR(ff_input_CLR),
						     .D_OUT(ff_input_D_OUT),
						     .FULL_N(ff_input_FULL_N),
						     .EMPTY_N(ff_input_EMPTY_N));

  // rule RL_rl_get_output_from_spfpu_sqrt
  assign CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt =
	     inst_spfpu_sqrt_ff_final_out[37] && !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt =
	     CAN_FIRE_RL_rl_get_output_from_spfpu_sqrt ;

  // rule RL_rl_get_output_from_dpfpu_sqrt
  assign CAN_FIRE_RL_rl_get_output_from_dpfpu_sqrt =
	     inst_dpfpu_sqrt_ff_final_out[69] && !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt =
	     CAN_FIRE_RL_rl_get_output_from_dpfpu_sqrt ;

  // rule RL_flush_fifo
  assign CAN_FIRE_RL_flush_fifo = EN_flush ;
  assign WILL_FIRE_RL_flush_fifo = EN_flush ;

  // rule RL_inst_spfpu_divider_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_flush = EN_flush ;

  // rule RL_inst_spfpu_divider_rl_stage2
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_stage2 =
	     inst_spfpu_divider_int_div_rg_state == 6'd0 &&
	     inst_spfpu_divider_rg_state_handler == 2'd1 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage2 ;

  // rule RL_inst_spfpu_divider_rl_stage4
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_stage4 =
	     inst_spfpu_divider_rg_state_handler == 2'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_stage4 =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage4 ;

  // rule RL_rl_get_output_from_spfpu_divider
  assign CAN_FIRE_RL_rl_get_output_from_spfpu_divider =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage4 && !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_spfpu_divider =
	     CAN_FIRE_RL_rl_get_output_from_spfpu_divider ;

  // rule RL_inst_spfpu_divider_int_div_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_rl_flush = EN_flush ;

  // rule RL_inst_spfpu_divider_int_div_stage_1
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1 =
	     inst_spfpu_divider_int_div_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;

  // rule RL_inst_spfpu_divider_int_div_recursive_stage
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage =
	     inst_spfpu_divider_int_div_rg_state > 6'd1 &&
	     inst_spfpu_divider_int_div_rg_state <= 6'd12 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ;

  // rule RL_inst_spfpu_divider_int_div_end_stage
  assign CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage =
	     inst_spfpu_divider_int_div_rg_state == 6'd13 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage ;

  // rule __me_check_1
  assign CAN_FIRE___me_check_1 = 1'b1 ;
  assign WILL_FIRE___me_check_1 = 1'b1 ;

  // rule __me_check_2
  assign CAN_FIRE___me_check_2 = 1'b1 ;
  assign WILL_FIRE___me_check_2 = 1'b1 ;

  // rule __me_check_3
  assign CAN_FIRE___me_check_3 = 1'b1 ;
  assign WILL_FIRE___me_check_3 = 1'b1 ;

  // rule RL_inst_spfpu_divider_rl_stage3
  assign CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_spfpu_divider_int_div_end_stage &&
	     inst_spfpu_divider_rg_state_handler == 2'd2 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 ;

  // rule __me_check_5
  assign CAN_FIRE___me_check_5 = 1'b1 ;
  assign WILL_FIRE___me_check_5 = 1'b1 ;

  // rule __me_check_6
  assign CAN_FIRE___me_check_6 = 1'b1 ;
  assign WILL_FIRE___me_check_6 = 1'b1 ;

  // rule RL_inst_spfpu_sqrt_rl_flush
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_flush = EN_flush ;

  // rule RL_inst_spfpu_sqrt_rl_stage2
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2 =
	     inst_spfpu_sqrt_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ;

  // rule RL_inst_spfpu_sqrt_rl_inter_stage
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage =
	     inst_spfpu_sqrt_rg_state > 6'd1 &&
	     inst_spfpu_sqrt_rg_state < 6'd25 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ;

  // rule RL_inst_spfpu_sqrt_rl_final_stage
  assign CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage =
	     inst_spfpu_sqrt_rg_state == 6'd25 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage =
	     CAN_FIRE_RL_inst_spfpu_sqrt_rl_final_stage ;

  // rule __me_check_10
  assign CAN_FIRE___me_check_10 = 1'b1 ;
  assign WILL_FIRE___me_check_10 = 1'b1 ;

  // rule __me_check_11
  assign CAN_FIRE___me_check_11 = 1'b1 ;
  assign WILL_FIRE___me_check_11 = 1'b1 ;

  // rule __me_check_12
  assign CAN_FIRE___me_check_12 = 1'b1 ;
  assign WILL_FIRE___me_check_12 = 1'b1 ;

  // rule RL_inst_spfm_add_sub_rl_flush
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_flush = EN_flush ;

  // rule RL_inst_spfm_add_sub_rl_stage1_after_input_stage
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage =
	     inst_spfm_add_sub_rg_state_handler == 3'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage ;

  // rule RL_inst_spfm_add_sub_rl_stage_3
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3 =
	     inst_spfm_add_sub_rg_state_handler == 3'd2 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3 =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3 ;

  // rule RL_inst_spfm_add_sub_rl_stage4
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4 =
	     inst_spfm_add_sub_rg_state_handler == 3'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4 =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4 ;

  // rule RL_inst_spfm_add_sub_rl_stage_5_final_stage
  assign CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage =
	     inst_spfm_add_sub_rg_state_handler == 3'd4 && !EN_flush ;
  assign WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage ;

  // rule RL_rl_get_output_from_fm_add_sub
  assign CAN_FIRE_RL_rl_get_output_from_fm_add_sub =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage &&
	     !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_fm_add_sub =
	     CAN_FIRE_RL_rl_get_output_from_fm_add_sub ;

  // rule RL_inst_dpfpu_divider_rl_flush
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_flush = EN_flush ;

  // rule RL_inst_dpfpu_divider_rl_stage2
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2 =
	     inst_dpfpu_divider_int_div_rg_state == 6'd0 &&
	     inst_dpfpu_divider_rg_state_handler == 2'd1 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2 ;

  // rule RL_inst_dpfpu_divider_rl_stage4
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4 =
	     inst_dpfpu_divider_rg_state_handler == 2'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4 =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4 ;

  // rule RL_rl_get_output_from_dpfpu_divider
  assign CAN_FIRE_RL_rl_get_output_from_dpfpu_divider =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage4 && !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_dpfpu_divider =
	     CAN_FIRE_RL_rl_get_output_from_dpfpu_divider ;

  // rule RL_inst_dpfpu_divider_int_div_rl_flush
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_rl_flush = EN_flush ;

  // rule RL_inst_dpfpu_divider_int_div_stage_1
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 =
	     inst_dpfpu_divider_int_div_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ;

  // rule RL_inst_dpfpu_divider_int_div_recursive_stage
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage =
	     inst_dpfpu_divider_int_div_rg_state > 6'd1 &&
	     inst_dpfpu_divider_int_div_rg_state <= 6'd26 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ;

  // rule RL_inst_dpfpu_divider_int_div_end_stage
  assign CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage =
	     inst_dpfpu_divider_int_div_rg_state == 6'd27 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage ;

  // rule __me_check_19
  assign CAN_FIRE___me_check_19 = 1'b1 ;
  assign WILL_FIRE___me_check_19 = 1'b1 ;

  // rule __me_check_20
  assign CAN_FIRE___me_check_20 = 1'b1 ;
  assign WILL_FIRE___me_check_20 = 1'b1 ;

  // rule __me_check_21
  assign CAN_FIRE___me_check_21 = 1'b1 ;
  assign WILL_FIRE___me_check_21 = 1'b1 ;

  // rule RL_inst_dpfpu_divider_rl_stage3
  assign CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_dpfpu_divider_int_div_end_stage &&
	     inst_dpfpu_divider_rg_state_handler == 2'd2 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3 =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3 ;

  // rule __me_check_23
  assign CAN_FIRE___me_check_23 = 1'b1 ;
  assign WILL_FIRE___me_check_23 = 1'b1 ;

  // rule __me_check_24
  assign CAN_FIRE___me_check_24 = 1'b1 ;
  assign WILL_FIRE___me_check_24 = 1'b1 ;

  // rule RL_inst_dpfpu_sqrt_rl_flush
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_flush = EN_flush ;

  // rule RL_inst_dpfpu_sqrt_rl_stage2
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 =
	     inst_dpfpu_sqrt_rg_state == 6'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 =
	     CAN_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 ;

  // rule RL_inst_dpfpu_sqrt_rl_inter_stage
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage =
	     inst_dpfpu_sqrt_rg_state > 6'd1 &&
	     inst_dpfpu_sqrt_rg_state < 6'd54 &&
	     !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage =
	     CAN_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage ;

  // rule RL_inst_dpfpu_sqrt_rl_final_stage
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage =
	     inst_dpfpu_sqrt_rg_state == 6'd54 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage =
	     CAN_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage ;

  // rule __me_check_28
  assign CAN_FIRE___me_check_28 = 1'b1 ;
  assign WILL_FIRE___me_check_28 = 1'b1 ;

  // rule __me_check_29
  assign CAN_FIRE___me_check_29 = 1'b1 ;
  assign WILL_FIRE___me_check_29 = 1'b1 ;

  // rule __me_check_30
  assign CAN_FIRE___me_check_30 = 1'b1 ;
  assign WILL_FIRE___me_check_30 = 1'b1 ;

  // rule RL_inst_dpfm_add_sub_rl_flush
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_flush = EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_flush = EN_flush ;

  // rule RL_inst_dpfm_add_sub_rl_stage1_after_input_stage
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage =
	     inst_dpfm_add_sub_rg_state_handler == 3'd1 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage ;

  // rule RL_inst_dpfm_add_sub_rl_stage_3
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 =
	     inst_dpfm_add_sub_rg_state_handler == 3'd2 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 ;

  // rule RL_inst_dpfm_add_sub_rl_stage4
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4 =
	     inst_dpfm_add_sub_rg_state_handler == 3'd3 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4 =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4 ;

  // rule RL_inst_dpfm_add_sub_rl_stage_5_final_stage
  assign CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage =
	     inst_dpfm_add_sub_rg_state_handler == 3'd4 && !EN_flush ;
  assign WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage ;

  // rule RL_rl_get_output_from_dpfm_add_sub
  assign CAN_FIRE_RL_rl_get_output_from_dpfm_add_sub =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage &&
	     !EN_flush &&
	     rg_multicycle_op ;
  assign WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub =
	     CAN_FIRE_RL_rl_get_output_from_dpfm_add_sub ;

  // rule __me_check_38
  assign CAN_FIRE___me_check_38 = 1'b1 ;
  assign WILL_FIRE___me_check_38 = 1'b1 ;

  // rule __me_check_39
  assign CAN_FIRE___me_check_39 = 1'b1 ;
  assign WILL_FIRE___me_check_39 = 1'b1 ;

  // rule __me_check_40
  assign CAN_FIRE___me_check_40 = 1'b1 ;
  assign WILL_FIRE___me_check_40 = 1'b1 ;

  // rule __me_check_41
  assign CAN_FIRE___me_check_41 = 1'b1 ;
  assign WILL_FIRE___me_check_41 = 1'b1 ;

  // rule __me_check_42
  assign CAN_FIRE___me_check_42 = 1'b1 ;
  assign WILL_FIRE___me_check_42 = 1'b1 ;

  // rule RL_start_stage
  assign CAN_FIRE_RL_start_stage =
	     ff_input_EMPTY_N && inst_spfpu_sqrt_rg_state == 6'd0 &&
	     inst_dpfpu_sqrt_rg_state == 6'd0 ;
  assign WILL_FIRE_RL_start_stage = CAN_FIRE_RL_start_stage ;

  // rule RL_rg_result__dreg_update
  assign CAN_FIRE_RL_rg_result__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_result__dreg_update = 1'd1 ;

  // rule RL_inst_spfpu_sqrt_ff_final_out__dreg_update
  assign CAN_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inst_spfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;

  // rule RL_inst_dpfpu_sqrt_ff_final_out__dreg_update
  assign CAN_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_inst_dpfpu_sqrt_ff_final_out__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5287 ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 =
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ;
  assign MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5483 ;
  assign MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5837 ;
  assign MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5864 ;
  assign MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5862 ;
  assign MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5207 ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 =
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;
  assign MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5362 ;
  assign MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5741 ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5768 ;
  assign MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5766 ;
  assign MUX_rg_multicycle_op_write_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5196 ;
  assign MUX_rg_result_1_wset_1__SEL_1 =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] == 5'b10100 ||
	      ff_input_D_OUT[12:8] == 5'b00101 ||
	      ff_input_D_OUT[12:8] == 5'b11010 ||
	      ff_input_first__319_BITS_12_TO_8_320_EQ_0b100__ETC___d3345) &&
	     ff_input_D_OUT[16:13] == 4'b0100 ;
  assign MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_5 =
	     inst_dpfpu_divider_int_div_rg_state + 6'd1 ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 =
	     { inst_dpfpu_divider_int_div_rg_inter_stage, 2'd0 } ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 =
	     { inst_dpfpu_divider_int_div_rg_inter_stage, 2'd2 } ;
  assign MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3 =
	     { x__h63179, 2'd0 } ;
  assign MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_1 =
	     (IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 ||
	      ff_input_D_OUT[208] &&
	      (IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 ||
	       condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	       !condFlags64_reswget_BITS_14_TO_10__q33[3])) ?
	       { 65'h17FF8000000000000, fflags__h268981 } :
	       ((condFlags64_reswget_BITS_14_TO_10__q33[1] &&
		 !ff_input_D_OUT[208]) ?
		  70'h2FFE00000000000000 :
		  { 1'd1, final_result__h269182, 5'd0 }) ;
  assign MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_2 =
	     { 1'd1, final_result__h78431, fflags__h78466 } ;
  assign MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_1 =
	     { mantissa__h268749,
	       x__h284844,
	       result_exponent__h268746,
	       ff_input_D_OUT[208],
	       _theResult_____3__h268747,
	       IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__438_ETC___d5941,
	       ff_input_D_OUT[5:3] } ;
  assign MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_2 =
	     { mantissa__h78093,
	       x__h78128,
	       inst_dpfpu_sqrt_rg_inter_stage[128:116],
	       _theResult____h78091,
	       x__h78391,
	       inst_dpfpu_sqrt_rg_inter_stage[2:0] } ;
  assign MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1 =
	     inst_dpfpu_sqrt_rg_state + 6'd1 ;
  assign MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2 =
	     inst_spfpu_divider_int_div_rg_state + 6'd1 ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 =
	     { inst_spfpu_divider_int_div_rg_inter_stage, 2'd0 } ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 =
	     { inst_spfpu_divider_int_div_rg_inter_stage, 2'd3 } ;
  assign MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3 =
	     { x__h4761, 2'd0 } ;
  assign MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_1 =
	     (IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 ||
	      ff_input_D_OUT[176] &&
	      (IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 ||
	       condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	       !condFlags32_reswget_BITS_14_TO_10__q53[3])) ?
	       { 33'h17FC00000, fflags__h259979 } :
	       ((condFlags32_reswget_BITS_14_TO_10__q53[1] &&
		 !ff_input_D_OUT[176]) ?
		  38'h2FF0000000 :
		  { 1'd1, final_result__h260180, 5'd0 }) ;
  assign MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_2 =
	     { 1'd1, final_result__h14069, fflags__h14104 } ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_1 =
	     { mantissa__h259746,
	       x__h267722,
	       result_exponent__h259743,
	       ff_input_D_OUT[176],
	       _theResult_____3__h259744,
	       IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__353_ETC___d5817,
	       ff_input_D_OUT[5:3] } ;
  assign MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_2 =
	     { mantissa__h13731,
	       x__h13766,
	       inst_spfpu_sqrt_rg_inter_stage[67:58],
	       _theResult____h13729,
	       x__h14029,
	       inst_spfpu_sqrt_rg_inter_stage[2:0] } ;
  assign MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1 =
	     inst_spfpu_sqrt_rg_state + 6'd1 ;
  always@(ff_input_D_OUT or
	  IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4468 or
	  x_data__h214468 or
	  x_data__h214706 or
	  IF_ff_input_first__319_BIT_0_351_THEN_IF_ff_in_ETC___d3531 or
	  IF_ff_input_first__319_BIT_0_351_THEN_IF_NOT_I_ETC___d4264 or
	  IF_ff_input_first__319_BIT_0_351_THEN_42949672_ETC___d3812)
  begin
    case (ff_input_D_OUT[12:8])
      5'b00100:
	  MUX_rg_result_1_wset_1__VAL_1 =
	      { ff_input_D_OUT[0] ? x_data__h214468 : x_data__h214706,
		6'd32 };
      5'b00101, 5'b10100:
	  MUX_rg_result_1_wset_1__VAL_1 =
	      IF_ff_input_first__319_BIT_0_351_THEN_IF_ff_in_ETC___d3531;
      5'b11000:
	  MUX_rg_result_1_wset_1__VAL_1 =
	      IF_ff_input_first__319_BIT_0_351_THEN_IF_NOT_I_ETC___d4264;
      5'b11010:
	  MUX_rg_result_1_wset_1__VAL_1 =
	      IF_ff_input_first__319_BIT_0_351_THEN_42949672_ETC___d3812;
      default: MUX_rg_result_1_wset_1__VAL_1 =
		   IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4468;
    endcase
  end
  assign MUX_rg_result_1_wset_1__VAL_2 =
	     { inst_dpfm_add_sub_ff_final_out_wget[68:5],
	       1'd1,
	       inst_dpfm_add_sub_ff_final_out_wget[4:0] } ;
  assign MUX_rg_result_1_wset_1__VAL_3 =
	     { inst_dpfpu_divider_wr_final_out_wget[68:5],
	       1'd1,
	       inst_dpfpu_divider_wr_final_out_wget[4:0] } ;
  assign MUX_rg_result_1_wset_1__VAL_4 =
	     { x_data__h292749,
	       1'd1,
	       inst_spfm_add_sub_ff_final_out_wget[4:0] } ;
  assign MUX_rg_result_1_wset_1__VAL_5 =
	     { x_data__h292496,
	       1'd1,
	       inst_spfpu_divider_wr_final_out_wget[4:0] } ;
  assign MUX_rg_result_1_wset_1__VAL_6 =
	     { inst_dpfpu_sqrt_ff_final_out[68:5],
	       1'd1,
	       inst_dpfpu_sqrt_ff_final_out[4:0] } ;
  assign MUX_rg_result_1_wset_1__VAL_7 =
	     { x_data__h292627, 1'd1, inst_spfpu_sqrt_ff_final_out[4:0] } ;

  // inlined wires
  always@(MUX_rg_result_1_wset_1__SEL_1 or
	  MUX_rg_result_1_wset_1__VAL_1 or
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub or
	  MUX_rg_result_1_wset_1__VAL_2 or
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_divider or
	  MUX_rg_result_1_wset_1__VAL_3 or
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub or
	  MUX_rg_result_1_wset_1__VAL_4 or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_divider or
	  MUX_rg_result_1_wset_1__VAL_5 or
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt or
	  MUX_rg_result_1_wset_1__VAL_6 or
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt or
	  MUX_rg_result_1_wset_1__VAL_7)
  case (1'b1)
    MUX_rg_result_1_wset_1__SEL_1:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_1;
    WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_2;
    WILL_FIRE_RL_rl_get_output_from_dpfpu_divider:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_3;
    WILL_FIRE_RL_rl_get_output_from_fm_add_sub:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_4;
    WILL_FIRE_RL_rl_get_output_from_spfpu_divider:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_5;
    WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_6;
    WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt:
	rg_result_1_wget = MUX_rg_result_1_wset_1__VAL_7;
    default: rg_result_1_wget =
		 70'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_result_1_whas =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] == 5'b10100 ||
	      ff_input_D_OUT[12:8] == 5'b00101 ||
	      ff_input_D_OUT[12:8] == 5'b11010 ||
	      ff_input_first__319_BITS_12_TO_8_320_EQ_0b100__ETC___d3345) &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_divider ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_divider ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_fm_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub ;
  assign inst_spfpu_divider_int_div_wr_final_out_wget =
	     { inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[82:56],
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d85 } ;
  always@(MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 or
	  MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 or
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage or
	  MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 or
	  MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1:
	  inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1;
      WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage:
	  inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2;
      WILL_FIRE_RL_inst_spfpu_divider_rl_stage2:
	  inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_spfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
      default: inst_spfpu_divider_int_div_wfn_divide_step_arg_wget =
		   85'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign inst_spfpu_divider_wr_final_out_wget =
	     inst_spfpu_divider_rg_stage3[11] ?
	       { lv_final_output__h12138, _theResult_____1_snd__h12139 } :
	       IF_inst_spfpu_divider_rg_stage3_71_BIT_10_78_T_ETC___d359 ;
  assign inst_spfpu_sqrt_ff_final_out_1_wget =
	     MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__SEL_1 ?
	       MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_1 :
	       MUX_inst_spfpu_sqrt_ff_final_out_1_wset_1__VAL_2 ;
  assign inst_spfpu_sqrt_ff_final_out_1_whas =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5741 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage ;
  assign inst_spfm_add_sub_ff_final_out_wget =
	     { new_value_final_result__h57876, fflags__h57867 } ;
  assign inst_dpfpu_divider_int_div_wr_final_out_wget =
	     { inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[169:114],
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1406 } ;
  always@(MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1 or
	  MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1 or
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage or
	  MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 or
	  MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__SEL_1:
	  inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_1;
      WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage:
	  inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_2;
      WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2:
	  inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
	      MUX_inst_dpfpu_divider_int_div_wfn_divide_step_arg_wset_1__VAL_3;
      default: inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget =
		   172'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign inst_dpfpu_divider_wr_final_out_wget =
	     inst_dpfpu_divider_rg_stage3[11] ?
	       { lv_final_output__h76501, _theResult_____1_snd__h76502 } :
	       IF_inst_dpfpu_divider_rg_stage3_679_BIT_10_686_ETC___d1767 ;
  assign inst_dpfpu_sqrt_ff_final_out_1_wget =
	     MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__SEL_1 ?
	       MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_1 :
	       MUX_inst_dpfpu_sqrt_ff_final_out_1_wset_1__VAL_2 ;
  assign inst_dpfpu_sqrt_ff_final_out_1_whas =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5837 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage ;
  assign inst_dpfm_add_sub_ff_final_out_wget =
	     { new_value_final_result__h170983, fflags__h170974 } ;
  assign inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget =
	     { ff_input_D_OUT[176:145],
	       ff_input_D_OUT[1],
	       ff_input_D_OUT[5:3] } ;
  assign inst_fpu_int_to_fp_fcvt_s_wwu_res_wget =
	     { fflags__h179830,
	       !inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q23[31],
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5159[23] ?
		 local_expo___1__h184681 :
		 expo__h179815,
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5159[22:0] } ;
  assign inst_fpu_int_to_fp_fcvt_s_llu_arg_wget =
	     { ff_input_D_OUT[208:145],
	       ff_input_D_OUT[1],
	       ff_input_D_OUT[5:3] } ;
  assign inst_fpu_int_to_fp_fcvt_s_llu_res_wget =
	     { fflags__h184870,
	       !inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q24[63],
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5035[23] ?
		 local_expo___1__h194220 :
		 expo__h184855,
	       IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5035[22:0] } ;
  assign condFlags32_arg_wget =
	     { getMant32_res_wget[68:46],
	       getExp32_res_wget[23:16],
	       IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4657 } ;
  assign condFlags32_res_wget = { x__h215489, x__h215649, x__h215746 } ;
  assign getMant32_arg_wget =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { setCanonicalNaN_res_wget[95:32], 32'd0 } :
	       (ff_input_first__319_BITS_12_TO_8_320_EQ_0b1100_ETC___d4607 ?
		  { setCanonicalNaN_res_wget[95:64], 64'd0 } :
		  (((ff_input_D_OUT[12:8] == 5'b0 ||
		     ff_input_D_OUT[12:8] == 5'b00001) &&
		    ff_input_D_OUT[16:13] == 4'b0100) ?
		     { 32'h3F800000, setCanonicalNaN_res_wget[95:32] } :
		     ((ff_input_D_OUT[12:8] == 5'b00011 &&
		       ff_input_D_OUT[16:13] == 4'b0100) ?
			setCanonicalNaN_res_wget :
			((ff_input_D_OUT[12:8] == 5'b01011 &&
			  ff_input_D_OUT[16:13] == 4'b0100) ?
			   { setCanonicalNaN_res_wget[95:64], 64'd0 } :
			   ((ff_input_D_OUT[12:8] == 5'b00010 &&
			     ff_input_D_OUT[16:13] == 4'b0100) ?
			      { setCanonicalNaN_res_wget[95:32], 32'd0 } :
			      setCanonicalNaN_res_wget))))) ;
  assign getMant32_res_wget =
	     { getMant32_argwget_BITS_95_TO_64__q45[22:0],
	       getMant32_argwget_BITS_63_TO_32__q46[22:0],
	       getMant32_argwget_BITS_31_TO_0__q47[22:0] } ;
  assign getExp32_res_wget =
	     { getMant32_argwget_BITS_95_TO_64__q45[30:23],
	       getMant32_argwget_BITS_63_TO_32__q46[30:23],
	       getMant32_argwget_BITS_31_TO_0__q47[30:23] } ;
  assign condFlags64_arg_wget =
	     { getMant64_res_wget[155:104],
	       getExp64_res_wget[32:22],
	       IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4796 } ;
  assign condFlags64_res_wget = { x__h217988, x__h218148, x__h218245 } ;
  assign getMant64_arg_wget =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { ff_input_D_OUT[208:81], 64'd0 } :
	       (ff_input_first__319_BITS_12_TO_8_320_EQ_0b1100_ETC___d4607 ?
		  { ff_input_D_OUT[208:145], 128'd0 } :
		  (((ff_input_D_OUT[12:8] == 5'b0 ||
		     ff_input_D_OUT[12:8] == 5'b00001) &&
		    ff_input_D_OUT[16:13] == 4'b0100) ?
		     { 64'h3FF0000000000000, ff_input_D_OUT[208:81] } :
		     ((ff_input_D_OUT[12:8] == 5'b00011 &&
		       ff_input_D_OUT[16:13] == 4'b0100) ?
			{ ff_input_D_OUT[208:81], 64'd0 } :
			((ff_input_D_OUT[12:8] == 5'b01011 &&
			  ff_input_D_OUT[16:13] == 4'b0100) ?
			   { ff_input_D_OUT[208:145], 128'd0 } :
			   ((ff_input_D_OUT[12:8] == 5'b00010 &&
			     ff_input_D_OUT[16:13] == 4'b0100) ?
			      { ff_input_D_OUT[208:81], 64'd0 } :
			      ff_input_D_OUT[208:17]))))) ;
  assign getMant64_res_wget =
	     { getMant64_argwget_BITS_191_TO_128__q25[51:0],
	       getMant64_argwget_BITS_127_TO_64__q26[51:0],
	       getMant64_argwget_BITS_63_TO_0__q27[51:0] } ;
  assign getExp64_res_wget =
	     { getMant64_argwget_BITS_191_TO_128__q25[62:52],
	       getMant64_argwget_BITS_127_TO_64__q26[62:52],
	       getMant64_argwget_BITS_63_TO_0__q27[62:52] } ;
  assign setCanonicalNaN_arg_wget =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101 ||
	       ff_input_D_OUT[12:8] == 5'b00100) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { ff_input_D_OUT[208:81], 64'hFFFFFFFFFFFFFFFF } :
	       ((ff_input_D_OUT[12:8] == 5'b11000 &&
		 ff_input_D_OUT[16:13] == 4'b0100) ?
		  { ff_input_D_OUT[208:145], 128'd0 } :
		  (((ff_input_D_OUT[12:8] == 5'b11100 &&
		     ff_input_D_OUT[5:3] == 3'b001 ||
		     ff_input_D_OUT[12:8] == 5'b01000) &&
		    ff_input_D_OUT[16:13] == 4'b0100) ?
		     { ff_input_D_OUT[208:145],
		       128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF } :
		     (((ff_input_D_OUT[12:8] == 5'b0 ||
			ff_input_D_OUT[12:8] == 5'b00001 ||
			ff_input_D_OUT[12:8] == 5'b00011) &&
		       ff_input_D_OUT[16:13] == 4'b0100) ?
			{ ff_input_D_OUT[208:81], 64'hFFFFFFFFFFFFFFFF } :
			((ff_input_D_OUT[12:8] == 5'b01011 &&
			  ff_input_D_OUT[16:13] == 4'b0100) ?
			   { ff_input_D_OUT[208:145],
			     128'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF } :
			   ((ff_input_D_OUT[12:8] == 5'b00010 &&
			     ff_input_D_OUT[16:13] == 4'b0100) ?
			      { ff_input_D_OUT[208:81],
				64'hFFFFFFFFFFFFFFFF } :
			      ff_input_D_OUT[208:17]))))) ;
  assign setCanonicalNaN_res_wget = { x__h194490, x__h194559, x__h194599 } ;

  // register inst_dpfm_add_sub_ff_input_register
  assign inst_dpfm_add_sub_ff_input_register_D_IN =
	     { _0_CONCAT_INV_IF_condFlags64_res_whas__438_THEN_ETC___d5298[105:0],
	       lv_summed_exponent__h232369,
	       ((ff_input_D_OUT[12:8] == 5'b0 ||
		 ff_input_D_OUT[12:8] == 5'b00001) &&
		ff_input_D_OUT[16:13] == 4'b0100) ?
		 ff_input_D_OUT[208] :
		 ff_input_first__319_BIT_208_457_XOR_ff_input_f_ETC___d3820,
	       ((ff_input_D_OUT[12:8] == 5'b0 ||
		 ff_input_D_OUT[12:8] == 5'b00001) &&
		ff_input_D_OUT[16:13] == 4'b0100) ?
		 ff_input_D_OUT[144] :
		 (ff_input_D_OUT[12:8] != 5'b00010 ||
		  ff_input_D_OUT[16:13] != 4'b0100) &&
		 ff_input_D_OUT[80],
	       getExp64_res_wget[10:0],
	       getMant64_res_wget[51:0],
	       x__h232599,
	       x__h232862,
	       x__h232868,
	       condFlags64_res_wget[4:0],
	       IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d5347 } ;
  assign inst_dpfm_add_sub_ff_input_register_EN =
	     MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1 ;

  // register inst_dpfm_add_sub_ff_stage2
  assign inst_dpfm_add_sub_ff_stage2_D_IN =
	     { inst_dpfm_add_sub_ff_input_register[81],
	       inst_dpfm_add_sub_ff_input_register[4],
	       x_lv_product_exponent__h79382,
	       x_lv_product_mantissa__h79383,
	       inst_dpfm_add_sub_ff_input_register[80:17],
	       inst_dpfm_add_sub_ff_input_register[13:9],
	       inst_dpfm_add_sub_ff_input_register[5],
	       inst_dpfm_add_sub_ff_input_register[3:2],
	       inst_dpfm_add_sub_ff_input_register[8:6],
	       inst_dpfm_add_sub_ff_input_register[16],
	       inst_dpfm_add_sub_ff_input_register[14],
	       inst_dpfm_add_sub_ff_input_register[15],
	       x__h101858,
	       x__h101919,
	       inst_dpfm_add_sub_ff_input_register[1:0] } ;
  assign inst_dpfm_add_sub_ff_stage2_EN =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage ;

  // register inst_dpfm_add_sub_ff_stage4
  assign inst_dpfm_add_sub_ff_stage4_D_IN =
	     { x__h148117,
	       x__h102258,
	       _theResult_____1__h102152,
	       lv_minuend__h102138,
	       mantissa2__h102148,
	       mantissa3__h102149,
	       inst_dpfm_add_sub_ff_stage2[9:7],
	       x__h148009,
	       x__h148125,
	       x__h148166,
	       inst_dpfm_add_sub_ff_stage2[3:2],
	       x__h148190,
	       x__h148232,
	       inst_dpfm_add_sub_ff_stage2[5] } ;
  assign inst_dpfm_add_sub_ff_stage4_EN =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 ;

  // register inst_dpfm_add_sub_ff_stage5
  assign inst_dpfm_add_sub_ff_stage5_D_IN =
	     { inst_dpfm_add_sub_ff_stage4[345:333],
	       _theResult____h148339,
	       inst_dpfm_add_sub_ff_stage4[347],
	       inst_dpfm_add_sub_ff_stage4[12:10],
	       x__h148416,
	       inst_dpfm_add_sub_ff_stage4[9:0],
	       lv_zeros_on_left__h148341 } ;
  assign inst_dpfm_add_sub_ff_stage5_EN =
	     CAN_FIRE_RL_inst_dpfm_add_sub_rl_stage4 ;

  // register inst_dpfm_add_sub_rg_state_handler
  always@(MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4 or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 or
	  WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage or
	  EN_flush)
  case (1'b1)
    MUX_inst_dpfm_add_sub_rg_state_handler_write_1__SEL_1:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd1;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd0;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd4;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd3;
    WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage:
	inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd2;
    EN_flush: inst_dpfm_add_sub_rg_state_handler_D_IN = 3'd0;
    default: inst_dpfm_add_sub_rg_state_handler_D_IN =
		 3'bxxx /* unspecified value */ ;
  endcase
  assign inst_dpfm_add_sub_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5287 ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_5_final_stage ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage1_after_input_stage ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage_3 ||
	     WILL_FIRE_RL_inst_dpfm_add_sub_rl_stage4 ;

  // register inst_dpfpu_divider_int_div_rg_inter_stage
  assign inst_dpfpu_divider_int_div_rg_inter_stage_D_IN =
	     inst_dpfpu_divider_int_div_wr_final_out_wget ;
  assign inst_dpfpu_divider_int_div_rg_inter_stage_EN =
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ;

  // register inst_dpfpu_divider_int_div_rg_state
  always@(WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage or
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage or
	  MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_5 or
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 or
	  EN_flush or WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2)
  case (1'b1)
    WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage:
	inst_dpfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage:
	inst_dpfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_5;
    WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1:
	inst_dpfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_5;
    EN_flush: inst_dpfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2:
	inst_dpfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_dpfpu_divider_int_div_rg_state_write_1__VAL_5;
    default: inst_dpfpu_divider_int_div_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_dpfpu_divider_int_div_rg_state_EN =
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage ||
	     EN_flush ;

  // register inst_dpfpu_divider_rg_stage1
  assign inst_dpfpu_divider_rg_stage1_D_IN =
	     { lv_exponent__h243118,
	       x__h258017,
	       x__h258045,
	       ff_input_first__319_BIT_208_457_XOR_ff_input_f_ETC___d3820,
	       IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 ||
	       lv_op2_Nan__h199317 ||
	       condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	       condFlags64_reswget_BITS_9_TO_5__q34[1] ||
	       condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	       condFlags64_reswget_BITS_9_TO_5__q34[3],
	       x__h258127,
	       x__h258141,
	       x__h258146,
	       ff_input_D_OUT[5:3],
	       quiet_nan_two__h232363 } ;
  assign inst_dpfpu_divider_rg_stage1_EN =
	     MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1 ;

  // register inst_dpfpu_divider_rg_stage2
  assign inst_dpfpu_divider_rg_stage2_D_IN =
	     { inst_dpfpu_divider_rg_stage1[127:115],
	       inst_dpfpu_divider_rg_stage1[8],
	       inst_dpfpu_divider_rg_stage1[6],
	       inst_dpfpu_divider_rg_stage1[7],
	       inst_dpfpu_divider_rg_stage1[5:0] } ;
  assign inst_dpfpu_divider_rg_stage2_EN =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage2 ;

  // register inst_dpfpu_divider_rg_stage3
  assign inst_dpfpu_divider_rg_stage3_D_IN =
	     { x_lv_quotient__h64407,
	       inst_dpfpu_divider_int_div_wr_final_out_wget[113:57],
	       x_lv_exponent__h64408,
	       inst_dpfpu_divider_rg_stage2[8:5],
	       x__h76333,
	       !inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1452,
	       x__h76338,
	       inst_dpfpu_divider_rg_stage2[4:1],
	       inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1452 &&
	       NOT_inst_dpfpu_divider_rg_stage2_449_BITS_21_T_ETC___d1653,
	       inst_dpfpu_divider_rg_stage2[0] } ;
  assign inst_dpfpu_divider_rg_stage3_EN =
	     CAN_FIRE_RL_inst_dpfpu_divider_rl_stage3 ;

  // register inst_dpfpu_divider_rg_state_handler
  always@(MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4 or
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_dpfpu_divider_rg_state_handler_write_1__SEL_1:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd1;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd3;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd0;
    WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2:
	inst_dpfpu_divider_rg_state_handler_D_IN = 2'd2;
    EN_flush: inst_dpfpu_divider_rg_state_handler_D_IN = 2'd0;
    default: inst_dpfpu_divider_rg_state_handler_D_IN =
		 2'bxx /* unspecified value */ ;
  endcase
  assign inst_dpfpu_divider_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5483 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage4 ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3 ;

  // register inst_dpfpu_sqrt_ff_final_out
  assign inst_dpfpu_sqrt_ff_final_out_D_IN =
	     { inst_dpfpu_sqrt_ff_final_out_1_whas &&
	       inst_dpfpu_sqrt_ff_final_out_1_wget[69],
	       inst_dpfpu_sqrt_ff_final_out_1_wget[68:0] } ;
  assign inst_dpfpu_sqrt_ff_final_out_EN = 1'd1 ;

  // register inst_dpfpu_sqrt_rg_inter_stage
  assign inst_dpfpu_sqrt_rg_inter_stage_D_IN =
	     MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__SEL_1 ?
	       MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_1 :
	       MUX_inst_dpfpu_sqrt_rg_inter_stage_write_1__VAL_2 ;
  assign inst_dpfpu_sqrt_rg_inter_stage_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5864 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 ;

  // register inst_dpfpu_sqrt_rg_state
  always@(MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1 or
	  MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1 or
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage or
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage or
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_dpfpu_sqrt_rg_state_write_1__SEL_1:
	inst_dpfpu_sqrt_rg_state_D_IN =
	    MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage:
	inst_dpfpu_sqrt_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage:
	inst_dpfpu_sqrt_rg_state_D_IN =
	    MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2:
	inst_dpfpu_sqrt_rg_state_D_IN =
	    MUX_inst_dpfpu_sqrt_rg_state_write_1__VAL_1;
    EN_flush: inst_dpfpu_sqrt_rg_state_D_IN = 6'd0;
    default: inst_dpfpu_sqrt_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_dpfpu_sqrt_rg_state_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5862 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 ||
	     WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage ||
	     EN_flush ;

  // register inst_spfm_add_sub_ff_input_register
  assign inst_spfm_add_sub_ff_input_register_D_IN =
	     { _0_CONCAT_INV_IF_condFlags32_res_whas__353_THEN_ETC___d5218[47:0],
	       lv_summed_exponent__h230913,
	       IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d5228,
	       ((ff_input_D_OUT[12:8] == 5'b0 ||
		 ff_input_D_OUT[12:8] == 5'b00001) &&
		ff_input_D_OUT[16:13] == 4'b0100) ?
		 setCanonicalNaN_reswget_BITS_63_TO_32__q43[31] :
		 (ff_input_D_OUT[12:8] != 5'b00010 ||
		  ff_input_D_OUT[16:13] != 4'b0100) &&
		 setCanonicalNaN_reswget_BITS_31_TO_0__q59[31],
	       getExp32_res_wget[7:0],
	       getMant32_res_wget[22:0],
	       x__h231147,
	       x__h231410,
	       x__h231416,
	       condFlags32_res_wget[4:0],
	       IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d5273 } ;
  assign inst_spfm_add_sub_ff_input_register_EN =
	     MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1 ;

  // register inst_spfm_add_sub_ff_stage2
  assign inst_spfm_add_sub_ff_stage2_D_IN =
	     { inst_spfm_add_sub_ff_input_register[49],
	       inst_spfm_add_sub_ff_input_register[4],
	       x_lv_product_exponent__h15024,
	       x_lv_product_mantissa__h15025,
	       inst_spfm_add_sub_ff_input_register[48:17],
	       inst_spfm_add_sub_ff_input_register[13:9],
	       inst_spfm_add_sub_ff_input_register[5],
	       inst_spfm_add_sub_ff_input_register[3:2],
	       inst_spfm_add_sub_ff_input_register[8:6],
	       inst_spfm_add_sub_ff_input_register[16],
	       inst_spfm_add_sub_ff_input_register[14],
	       inst_spfm_add_sub_ff_input_register[15],
	       x__h25552,
	       x__h25613,
	       inst_spfm_add_sub_ff_input_register[1:0] } ;
  assign inst_spfm_add_sub_ff_stage2_EN =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage ;

  // register inst_spfm_add_sub_ff_stage4
  assign inst_spfm_add_sub_ff_stage4_D_IN =
	     { x__h47190,
	       x__h25952,
	       _theResult_____1__h25846,
	       lv_minuend__h25832,
	       mantissa2__h25842,
	       mantissa3__h25843,
	       inst_spfm_add_sub_ff_stage2[9:7],
	       x__h47082,
	       x__h47198,
	       x__h47239,
	       inst_spfm_add_sub_ff_stage2[3:2],
	       x__h47263,
	       x__h47305,
	       inst_spfm_add_sub_ff_stage2[5] } ;
  assign inst_spfm_add_sub_ff_stage4_EN =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage_3 ;

  // register inst_spfm_add_sub_ff_stage5
  assign inst_spfm_add_sub_ff_stage5_D_IN =
	     { inst_spfm_add_sub_ff_stage4[168:159],
	       _theResult____h47412,
	       inst_spfm_add_sub_ff_stage4[170],
	       inst_spfm_add_sub_ff_stage4[12:10],
	       x__h47489,
	       inst_spfm_add_sub_ff_stage4[9:0],
	       lv_zeros_on_left__h47414 } ;
  assign inst_spfm_add_sub_ff_stage5_EN =
	     CAN_FIRE_RL_inst_spfm_add_sub_rl_stage4 ;

  // register inst_spfm_add_sub_rg_state_handler
  always@(MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4 or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3 or
	  WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage or
	  EN_flush)
  case (1'b1)
    MUX_inst_spfm_add_sub_rg_state_handler_write_1__SEL_1:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd1;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd0;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd4;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd3;
    WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage:
	inst_spfm_add_sub_rg_state_handler_D_IN = 3'd2;
    EN_flush: inst_spfm_add_sub_rg_state_handler_D_IN = 3'd0;
    default: inst_spfm_add_sub_rg_state_handler_D_IN =
		 3'bxxx /* unspecified value */ ;
  endcase
  assign inst_spfm_add_sub_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5207 ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_5_final_stage ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage1_after_input_stage ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage_3 ||
	     WILL_FIRE_RL_inst_spfm_add_sub_rl_stage4 ;

  // register inst_spfpu_divider_int_div_rg_inter_stage
  assign inst_spfpu_divider_int_div_rg_inter_stage_D_IN =
	     inst_spfpu_divider_int_div_wr_final_out_wget ;
  assign inst_spfpu_divider_int_div_rg_inter_stage_EN =
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ;

  // register inst_spfpu_divider_int_div_rg_state
  always@(WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage or
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage or
	  MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2 or
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 or
	  EN_flush or WILL_FIRE_RL_inst_spfpu_divider_rl_stage2)
  case (1'b1)
    WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage:
	inst_spfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage:
	inst_spfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2;
    WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1:
	inst_spfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2;
    EN_flush: inst_spfpu_divider_int_div_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage2:
	inst_spfpu_divider_int_div_rg_state_D_IN =
	    MUX_inst_spfpu_divider_int_div_rg_state_write_1__VAL_2;
    default: inst_spfpu_divider_int_div_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_spfpu_divider_int_div_rg_state_EN =
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 ||
	     WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage ||
	     EN_flush ;

  // register inst_spfpu_divider_rg_stage1
  assign inst_spfpu_divider_rg_stage1_D_IN =
	     { lv_exponent__h234890,
	       x__h241727,
	       x__h241755,
	       x__h241785,
	       IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 ||
	       lv_op2_Nan__h197438 ||
	       condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	       condFlags32_reswget_BITS_9_TO_5__q54[1] ||
	       condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	       condFlags32_reswget_BITS_9_TO_5__q54[3],
	       x__h241849,
	       x__h241863,
	       x__h241868,
	       ff_input_D_OUT[5:3],
	       quiet_nan_two__h230907 } ;
  assign inst_spfpu_divider_rg_stage1_EN =
	     MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1 ;

  // register inst_spfpu_divider_rg_stage2
  assign inst_spfpu_divider_rg_stage2_D_IN =
	     { inst_spfpu_divider_rg_stage1[66:57],
	       inst_spfpu_divider_rg_stage1[8],
	       inst_spfpu_divider_rg_stage1[6],
	       inst_spfpu_divider_rg_stage1[7],
	       inst_spfpu_divider_rg_stage1[5:0] } ;
  assign inst_spfpu_divider_rg_stage2_EN =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage2 ;

  // register inst_spfpu_divider_rg_stage3
  assign inst_spfpu_divider_rg_stage3_D_IN =
	     { x_lv_quotient__h5989,
	       inst_spfpu_divider_int_div_wr_final_out_wget[55:28],
	       x_lv_exponent__h5990,
	       inst_spfpu_divider_rg_stage2[8:5],
	       x__h11970,
	       !inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131,
	       x__h11975,
	       inst_spfpu_divider_rg_stage2[4:1],
	       inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 &&
	       NOT_inst_spfpu_divider_rg_stage2_28_BITS_18_TO_ETC___d245,
	       inst_spfpu_divider_rg_stage2[0] } ;
  assign inst_spfpu_divider_rg_stage3_EN =
	     CAN_FIRE_RL_inst_spfpu_divider_rl_stage3 ;

  // register inst_spfpu_divider_rg_state_handler
  always@(MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage4 or
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_spfpu_divider_rg_state_handler_write_1__SEL_1:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd1;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage3:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd3;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage4:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd0;
    WILL_FIRE_RL_inst_spfpu_divider_rl_stage2:
	inst_spfpu_divider_rg_state_handler_D_IN = 2'd2;
    EN_flush: inst_spfpu_divider_rg_state_handler_D_IN = 2'd0;
    default: inst_spfpu_divider_rg_state_handler_D_IN =
		 2'bxx /* unspecified value */ ;
  endcase
  assign inst_spfpu_divider_rg_state_handler_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5362 ||
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage4 ||
	     EN_flush ||
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_divider_rl_stage3 ;

  // register inst_spfpu_sqrt_ff_final_out
  assign inst_spfpu_sqrt_ff_final_out_D_IN =
	     { inst_spfpu_sqrt_ff_final_out_1_whas &&
	       inst_spfpu_sqrt_ff_final_out_1_wget[37],
	       inst_spfpu_sqrt_ff_final_out_1_wget[36:0] } ;
  assign inst_spfpu_sqrt_ff_final_out_EN = 1'd1 ;

  // register inst_spfpu_sqrt_rg_inter_stage
  assign inst_spfpu_sqrt_rg_inter_stage_D_IN =
	     MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__SEL_1 ?
	       MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_1 :
	       MUX_inst_spfpu_sqrt_rg_inter_stage_write_1__VAL_2 ;
  assign inst_spfpu_sqrt_rg_inter_stage_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5768 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ;

  // register inst_spfpu_sqrt_rg_state
  always@(MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1 or
	  MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1 or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage or
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 or EN_flush)
  case (1'b1)
    MUX_inst_spfpu_sqrt_rg_state_write_1__SEL_1:
	inst_spfpu_sqrt_rg_state_D_IN =
	    MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage:
	inst_spfpu_sqrt_rg_state_D_IN = 6'd0;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage:
	inst_spfpu_sqrt_rg_state_D_IN =
	    MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
    WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2:
	inst_spfpu_sqrt_rg_state_D_IN =
	    MUX_inst_spfpu_sqrt_rg_state_write_1__VAL_1;
    EN_flush: inst_spfpu_sqrt_rg_state_D_IN = 6'd0;
    default: inst_spfpu_sqrt_rg_state_D_IN =
		 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign inst_spfpu_sqrt_rg_state_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0) &&
	     NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5766 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 ||
	     WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage ||
	     EN_flush ;

  // register rg_multicycle_op
  assign rg_multicycle_op_D_IN = MUX_rg_multicycle_op_write_1__SEL_1 ;
  assign rg_multicycle_op_EN =
	     WILL_FIRE_RL_start_stage &&
	     (ff_input_D_OUT[12:8] != 5'b10100 &&
	      ff_input_D_OUT[12:8] != 5'b00101 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5196 ||
	     EN_flush ||
	     WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_fm_add_sub ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt ||
	     WILL_FIRE_RL_rl_get_output_from_dpfpu_divider ||
	     WILL_FIRE_RL_rl_get_output_from_spfpu_divider ;

  // register rg_result
  assign rg_result_D_IN =
	     rg_result_1_whas ?
	       rg_result_1_wget :
	       { 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
		 6'd0 } ;
  assign rg_result_EN = 1'd1 ;

  // submodule ff_input
  assign ff_input_D_IN =
	     { _start_operand1,
	       _start_operand2,
	       _start_operand3,
	       _start_opcode,
	       _start_funct7,
	       _start_funct3,
	       _start_imm,
	       _start_issp } ;
  assign ff_input_ENQ = EN__start ;
  assign ff_input_DEQ = CAN_FIRE_RL_start_stage ;
  assign ff_input_CLR = 1'b0 ;

  // remaining internal signals
  assign IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__353_ETC___d5817 =
	     _theResult_____3__h259744[28] ? 26'd0 : 26'd1 ;
  assign IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__438_ETC___d5941 =
	     _theResult_____3__h268747[57] ? 55'd0 : 55'd1 ;
  assign IF_0b0_CONCAT_IF_getExp64_res_whas__996_THEN_g_ETC___d4063 =
	     (x__h218516[10:0] == 11'd2047 &&
	      (ff_input_D_OUT[5:3] == 3'b100 ||
	       ff_input_D_OUT[5:3] == 3'b0 &&
	       getMant64_res_wget[155:104] != 52'd0)) ?
	       (ff_input_D_OUT[208] ?
		  IF_ff_input_first__319_BIT_1_544_THEN_0_ELSE_1_ETC___d3893 :
		  64'd1) :
	       64'd0 ;
  assign IF_IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas___ETC__q58 =
	     IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas__353_ETC___d5817[0] ?
	       26'd1 :
	       26'd0 ;
  assign IF_IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas___ETC__q38 =
	     IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas__438_ETC___d5941[0] ?
	       55'd1 :
	       55'd0 ;
  assign IF_IF_IF_condFlags32_res_whas__353_THEN_condFl_ETC___d5810 =
	     IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d5803[0] ?
	       mantissa__h259736 :
	       mantissa___1__h267693 ;
  assign IF_IF_IF_condFlags64_res_whas__438_THEN_condFl_ETC___d5934 =
	     IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d5927[0] ?
	       mantissa__h268739 :
	       mantissa___1__h284815 ;
  assign IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3240 =
	     (_theResult_____5__h170953[53] ||
	      IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208[159:158] ==
	      2'b0 &&
	      _theResult_____5__h170953[52]) ?
	       resultant_exponent___1__h171666 :
	       resultant_exponent__h170935 ;
  assign IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3253 =
	     _theResult_____5__h170953[53] ?
	       lv_rounded_mantissa__h171667 :
	       _theResult_____5__h170953 ;
  assign IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1388 =
	     IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q20[57] ?
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q21[113:1] :
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q22[113:1] ;
  assign IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1405 =
	     _remainder__h61359[57] ?
	       { _remainder___1__h61531, _dividend___1__h61532 } :
	       { _remainder__h61359, _dividend__h61362 } ;
  assign IF_IF_IF_inst_dpfpu_divider_rg_stage3_679_BITS_ETC___d1732 =
	     _theResult_____4__h76408[53] ?
	       lv_rounded_quotient__h76796 :
	       _theResult_____4__h76408 ;
  assign IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_wha_ETC___d5035 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5031 ?
	       lv_man___1__h194195 :
	       lv_man__h184868 ;
  assign IF_IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_wha_ETC___d5159 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5155 ?
	       lv_man___1__h184656 :
	       lv_man__h179828 ;
  assign IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1252 =
	     (_theResult_____5__h57846[24] ||
	      IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220[72:71] ==
	      2'b0 &&
	      _theResult_____5__h57846[23]) ?
	       resultant_exponent___1__h58559 :
	       resultant_exponent__h57828 ;
  assign IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1265 =
	     _theResult_____5__h57846[24] ?
	       lv_rounded_mantissa__h58560 :
	       _theResult_____5__h57846 ;
  assign IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67 =
	     IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13[28] ?
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q14[55:1] :
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q15[55:1] ;
  assign IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d84 =
	     _remainder__h2935[28] ?
	       { _remainder___1__h3107, _dividend___1__h3108 } :
	       { _remainder__h2935, _dividend__h2938 } ;
  assign IF_IF_IF_inst_spfpu_divider_rg_stage3_71_BITS__ETC___d324 =
	     _theResult_____4__h12045[24] ?
	       lv_rounded_quotient__h12433 :
	       _theResult_____4__h12045 ;
  assign IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3414 =
	     IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 ?
	       setCanonicalNaN_res_wget[63:32] :
	       (lv_op2_Nan__h197438 ?
		  setCanonicalNaN_res_wget[95:64] :
		  IF_NOT_ff_input_first__319_BIT_3_372_373_AND_I_ETC___d3412) ;
  assign IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3881 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[3] ||
	      condFlags32_reswget_BITS_14_TO_10__q53[4] ||
	      IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832[7] &&
	      !IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3837) ?
	       getMant32_res_wget[68:46] :
	       _theResult___fst__h216132 ;
  assign IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d4450 =
	     condFlags32_reswget_BITS_14_TO_10__q53[4] ?
	       { expo__h223554, man__h223556 } :
	       { expo__h223495, mant__h223496 } ;
  assign IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d4453 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[2] ||
	      condFlags32_reswget_BITS_14_TO_10__q53[0]) ?
	       { result__h223367, 64'h7FF8000000000000 } :
	       { 5'd0,
		 setCanonicalNaN_reswget_BITS_95_TO_64__q42[31],
		 condFlags32_reswget_BITS_14_TO_10__q53[1] ?
		   63'h7FF0000000000000 :
		   IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d4450 } ;
  assign IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d4454 =
	     condFlags32_reswget_BITS_14_TO_10__q53[3] ?
	       { 5'b0,
		 setCanonicalNaN_reswget_BITS_95_TO_64__q42[31],
		 63'b0 } :
	       IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d4453 ;
  assign IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d5773 =
	     condFlags32_reswget_BITS_14_TO_10__q53[4] ? 2'd0 : 2'd1 ;
  assign IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d5803 =
	     x__h260344 - y__h260345 ;
  assign IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d3493 =
	     IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 ?
	       ff_input_D_OUT[144:81] :
	       (lv_op2_Nan__h199317 ?
		  ff_input_D_OUT[208:145] :
		  IF_NOT_ff_input_first__319_BIT_3_372_373_AND_I_ETC___d3491) ;
  assign IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4050 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[3] ||
	      condFlags64_reswget_BITS_14_TO_10__q33[4] ||
	      x__h218516[10] &&
	      !IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d4006) ?
	       getMant64_res_wget[155:104] :
	       _theResult___fst__h218635 ;
  assign IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4386 =
	     condFlags64_reswget_BITS_14_TO_10__q33[1] ?
	       { 5'd0, ff_input_D_OUT[208], 31'h7F800000 } :
	       (IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4309 ?
		  y_avValue__h228211 :
		  y_avValue__h228062) ;
  assign IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4388 =
	     condFlags64_reswget_BITS_14_TO_10__q33[3] ?
	       { 5'b0, ff_input_D_OUT[208], 31'b0 } :
	       ((condFlags64_reswget_BITS_14_TO_10__q33[2] ||
		 condFlags64_reswget_BITS_14_TO_10__q33[0]) ?
		  { result__h227933, 32'h7FC00000 } :
		  IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4386) ;
  assign IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d5868 =
	     condFlags64_reswget_BITS_14_TO_10__q33[4] ? 2'd0 : 2'd1 ;
  assign IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d5927 =
	     x__h269346 - y__h269347 ;
  assign IF_IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0_ETC___d3716 =
	     IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3712 ?
	       lv_man___1__h214367 :
	       lv_man__h205117 ;
  assign IF_IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0_ETC___d4365 =
	     _theResult_____4___1__h228666 ?
	       fman___1__h229198 :
	       fman__h228865 ;
  assign IF_IF_getExp32_res_whas__828_THEN_getExp32_res_ETC___d3895 =
	     (getExp32_res_wget[23:16] == 8'd126 &&
	      (ff_input_D_OUT[5:3] == 3'b100 ||
	       ff_input_D_OUT[5:3] == 3'b0 &&
	       getMant32_res_wget[68:46] != 23'd0)) ?
	       (setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ?
		  IF_ff_input_first__319_BIT_1_544_THEN_0_ELSE_1_ETC___d3893 :
		  64'd1) :
	       64'd0 ;
  assign IF_IF_getExp64_res_whas__996_THEN_getExp64_res_ETC___d4320 =
	     IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4310 ?
	       49'd0 :
	       y_avValue_snd_snd_fst__h228724 ;
  assign IF_IF_inst_dpfm_add_sub_ff_stage2_read__382_BI_ETC___d2423 =
	     mantissa_to_shift__h102141 >> exponent_difference__h102142 ;
  assign IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_BI_ETC___d3286 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3191 ?
	       (!resultant_exponent__h170935[12] ||
		inst_dpfm_add_sub_ff_stage5[8]) &&
	       !inst_dpfm_add_sub_ff_stage5[11] :
	       !inst_dpfm_add_sub_ff_stage5[11] ;
  assign IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_BI_ETC___d3302 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3191 ?
	       resultant_exponent__h170935[12] &&
	       !inst_dpfm_add_sub_ff_stage5[8] ||
	       inst_dpfm_add_sub_ff_stage5[11] :
	       inst_dpfm_add_sub_ff_stage5[11] ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1356 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[113] ?
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q17[113:1] :
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q18[113:1] ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1383 =
	     { IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q19[112:0],
	       1'd0 } ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1406 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[1] ?
	       IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1405 :
	       { IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1388,
		 !IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q20[57] } ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q19 =
	     { IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1356,
	       !inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[113] } ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q20 =
	     IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1356[112:55] ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q21 =
	     IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1383 +
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[169:114],
	       57'd0 } ;
  assign IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q22 =
	     IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1383 -
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[169:114],
	       57'd0 } ;
  assign IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_ETC__q6 =
	     IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_BI_ETC___d1842 ?
	       _theResult_____1_fst__h78909 :
	       inst_dpfpu_sqrt_rg_inter_stage[128:117] ;
  assign IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_ETC__q7 =
	     IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_BI_ETC___d1842 ?
	       lv_extended_mantissa___1__h78908 :
	       lv_extended_mantissa__h78427 ;
  assign IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5006 =
	     _theResult____h184853 << x__h185033[5:0] ;
  assign IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5130 =
	     _theResult____h179813 << x__h179975[4:0] ;
  assign IF_IF_inst_spfm_add_sub_ff_stage2_read__42_BIT_ETC___d783 =
	     mantissa_to_shift__h25835 >> exponent_difference__h25836 ;
  assign IF_IF_inst_spfm_add_sub_ff_stage5_read__177_BI_ETC___d1298 =
	     IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1203 ?
	       (!resultant_exponent__h57828[9] ||
		inst_spfm_add_sub_ff_stage5[7]) &&
	       !inst_spfm_add_sub_ff_stage5[10] :
	       !inst_spfm_add_sub_ff_stage5[10] ;
  assign IF_IF_inst_spfm_add_sub_ff_stage5_read__177_BI_ETC___d1314 =
	     IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1203 ?
	       resultant_exponent__h57828[9] &&
	       !inst_spfm_add_sub_ff_stage5[7] ||
	       inst_spfm_add_sub_ff_stage5[10] :
	       inst_spfm_add_sub_ff_stage5[10] ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[55] ?
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q10[55:1] :
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q11[55:1] ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d62 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q12[54:0],
	       1'd0 } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d85 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[1] ?
	       IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d84 :
	       { IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67,
		 !IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13[28] } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q12 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35,
	       !inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[55] } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13 =
	     IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35[54:26] ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q14 =
	     IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d62 +
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[82:56],
	       28'd0 } ;
  assign IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q15 =
	     IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d62 -
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[82:56],
	       28'd0 } ;
  assign IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__80__ETC__q4 =
	     IF_inst_spfpu_sqrt_rg_inter_stage_read__80_BIT_ETC___d434 ?
	       _theResult_____1_fst__h14547 :
	       inst_spfpu_sqrt_rg_inter_stage[67:59] ;
  assign IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__80__ETC__q5 =
	     IF_inst_spfpu_sqrt_rg_inter_stage_read__80_BIT_ETC___d434 ?
	       lv_extended_mantissa___1__h14546 :
	       lv_extended_mantissa__h14065 ;
  assign IF_NOT_IF_condFlags32_res_whas__353_THEN_condF_ETC___d4194 =
	     lv_invalid__h215920 | condFlags32_reswget_BITS_14_TO_10__q53[1] ;
  assign IF_NOT_IF_condFlags32_res_whas__353_THEN_condF_ETC___d4246 =
	     (!condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	      NOT_IF_condFlags32_res_whas__353_THEN_condFlag_ETC___d3854) ?
	       lv_inexact___1__h216469 :
	       lv_inexact__h215911 ;
  assign IF_NOT_IF_condFlags64_res_whas__438_THEN_condF_ETC___d4230 =
	     lv_invalid__h218420 | condFlags64_reswget_BITS_14_TO_10__q33[1] ;
  assign IF_NOT_IF_condFlags64_res_whas__438_THEN_condF_ETC___d4260 =
	     (!condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	      NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d4024) ?
	       lv_inexact___1__h218972 :
	       lv_inexact__h218411 ;
  assign IF_NOT_IF_getExp64_res_whas__996_THEN_getExp64_ETC___d4338 =
	     (!IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4310 &&
	      IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4312 &&
	      x__h228837) ?
	       result__h228970 :
	       exception__h228529 ;
  assign IF_NOT_IF_inst_dpfm_add_sub_ff_stage5_read__16_ETC___d3256 =
	     (ex_overflow__h170943 || inst_dpfm_add_sub_ff_stage5[12] ||
	      IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3240[10:0] ==
	      11'd2047) ?
	       ((inst_dpfm_add_sub_ff_stage5[22:20] == 3'b001 ||
		 inst_dpfm_add_sub_ff_stage5[22:20] == 3'b010 &&
		 !inst_dpfm_add_sub_ff_stage5[23] ||
		 inst_dpfm_add_sub_ff_stage5[22:20] == 3'b011 &&
		 inst_dpfm_add_sub_ff_stage5[23]) ?
		  63'h7FEFFFFFFFFFFFFF :
		  63'h7FF0000000000000) :
	       { IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3240[10:0],
		 IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3253[51:0] } ;
  assign IF_NOT_IF_inst_spfm_add_sub_ff_stage5_read__17_ETC___d1268 =
	     (ex_overflow__h57836 || inst_spfm_add_sub_ff_stage5[11] ||
	      IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1252[7:0] ==
	      8'd255) ?
	       ((inst_spfm_add_sub_ff_stage5[21:19] == 3'b001 ||
		 inst_spfm_add_sub_ff_stage5[21:19] == 3'b010 &&
		 !inst_spfm_add_sub_ff_stage5[22] ||
		 inst_spfm_add_sub_ff_stage5[21:19] == 3'b011 &&
		 inst_spfm_add_sub_ff_stage5[22]) ?
		  31'h7F7FFFFF :
		  31'h7F800000) :
	       { IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1252[7:0],
		 IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1265[22:0] } ;
  assign IF_NOT_ff_input_first__319_BIT_1_544_558_AND_f_ETC___d3692 =
	     _theResult____h194409 << x__h205213[5:0] ;
  assign IF_NOT_ff_input_first__319_BIT_3_372_373_AND_I_ETC___d3410 =
	     (!ff_input_D_OUT[3] && lv_compare_result__h197442 == 2'b01 ||
	      ff_input_D_OUT[3] && lv_compare_result__h197442 == 2'b10) ?
	       setCanonicalNaN_res_wget[95:64] :
	       setCanonicalNaN_res_wget[63:32] ;
  assign IF_NOT_ff_input_first__319_BIT_3_372_373_AND_I_ETC___d3412 =
	     (!ff_input_D_OUT[3] &&
	      condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	      condFlags32_reswget_BITS_9_TO_5__q54[3]) ?
	       lv_result__h198116 :
	       IF_ff_input_first__319_BIT_3_372_AND_IF_condFl_ETC___d3411 ;
  assign IF_NOT_ff_input_first__319_BIT_3_372_373_AND_I_ETC___d3491 =
	     (!ff_input_D_OUT[3] &&
	      condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	      condFlags64_reswget_BITS_9_TO_5__q34[3]) ?
	       lv_result__h199963 :
	       IF_ff_input_first__319_BIT_3_372_AND_IF_condFl_ETC___d3490 ;
  assign IF_NOT_inst_dpfpu_divider_rg_stage3_679_BITS_8_ETC___d1757 =
	     (NOT_inst_dpfpu_divider_rg_stage3_679_BITS_82_T_ETC___d1702 &&
	      inst_dpfpu_divider_rg_stage3[1] ||
	      inst_dpfpu_divider_rg_stage3[8]) ?
	       { 11'd0,
		 IF_IF_IF_inst_dpfpu_divider_rg_stage3_679_BITS_ETC___d1732[51:0] } :
	       IF_inst_dpfpu_divider_rg_stage3_679_BIT_7_735__ETC___d1756 ;
  assign IF_NOT_inst_dpfpu_divider_rg_stage3_679_BIT_13_ETC___d1744 =
	     (!inst_dpfpu_divider_rg_stage3[138] &&
	      IF_IF_IF_inst_dpfpu_divider_rg_stage3_679_BITS_ETC___d1732[52]) ?
	       lv_exponent___1__h76882 :
	       lv_exponent__h76410 ;
  assign IF_NOT_inst_spfpu_divider_rg_stage3_71_BITS_50_ETC___d349 =
	     (NOT_inst_spfpu_divider_rg_stage3_71_BITS_50_TO_ETC___d294 &&
	      inst_spfpu_divider_rg_stage3[1] ||
	      inst_spfpu_divider_rg_stage3[8]) ?
	       { 8'd0,
		 IF_IF_IF_inst_spfpu_divider_rg_stage3_71_BITS__ETC___d324[22:0] } :
	       IF_inst_spfpu_divider_rg_stage3_71_BIT_7_27_OR_ETC___d348 ;
  assign IF_NOT_inst_spfpu_divider_rg_stage3_71_BIT_77__ETC___d336 =
	     (!inst_spfpu_divider_rg_stage3[77] &&
	      IF_IF_IF_inst_spfpu_divider_rg_stage3_71_BITS__ETC___d324[23]) ?
	       lv_exponent___1__h12519 :
	       lv_exponent__h12047 ;
  assign IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 =
	     condFlags32_reswget_BITS_14_TO_10__q53[2] |
	     condFlags32_reswget_BITS_14_TO_10__q53[0] ;
  assign IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3837 =
	     condFlags32_reswget_BITS_14_TO_10__q53[1] | lv_invalid__h215893 ;
  assign IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d4243 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[4] ||
	      IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832[7] &&
	      !IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3837) &&
	     (!setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ||
	      !ff_input_D_OUT[1] ||
	      NOT_IF_getExp32_res_whas__828_THEN_getExp32_re_ETC___d4241) ;
  assign IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d5235 =
	     condFlags32_reswget_BITS_9_TO_5__q54[0] |
	     condFlags32_reswget_BITS_9_TO_5__q54[2] ;
  assign IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 =
	     condFlags64_reswget_BITS_14_TO_10__q33[2] |
	     condFlags64_reswget_BITS_14_TO_10__q33[0] ;
  assign IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d4006 =
	     condFlags64_reswget_BITS_14_TO_10__q33[1] | lv_invalid__h218392 ;
  assign IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d4257 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[4] ||
	      x__h218516[10] &&
	      !IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d4006) &&
	     (!ff_input_D_OUT[208] || !ff_input_D_OUT[1] ||
	      NOT_0b0_CONCAT_IF_getExp64_res_whas__996_THEN__ETC___d4255) ;
  assign IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d5313 =
	     condFlags64_reswget_BITS_9_TO_5__q34[0] |
	     condFlags64_reswget_BITS_9_TO_5__q34[2] ;
  assign IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d4655 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001 ||
	       ff_input_D_OUT[12:8] == 5'b00011) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant32_res_wget[45:23],
		 getExp32_res_wget[15:8],
		 getMant32_res_wget[22:0],
		 getExp32_res_wget[7:0] } :
	       ((ff_input_D_OUT[12:8] == 5'b01011 &&
		 ff_input_D_OUT[16:13] == 4'b0100) ?
		  62'd0 :
		  { getMant32_res_wget[45:23],
		    getExp32_res_wget[15:8],
		    getMant32_res_wget[22:0],
		    getExp32_res_wget[7:0] }) ;
  assign IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d4794 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant64_res_wget[103:52],
		 getExp64_res_wget[21:11],
		 getMant64_res_wget[51:0],
		 getExp64_res_wget[10:0] } :
	       IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4793 ;
  assign IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d5228 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] :
	       x__h241785 ;
  assign IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d5273 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { ff_input_D_OUT[5:3],
		 ff_input_D_OUT[8],
		 3'd0,
		 x__h231465,
		 x__h231568 } :
	       { ff_input_D_OUT[5:3],
		 IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d5271 } ;
  assign IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d5347 =
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { ff_input_D_OUT[5:3],
		 ff_input_D_OUT[8],
		 3'd0,
		 x__h232916,
		 x__h233019 } :
	       { ff_input_D_OUT[5:3],
		 IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d5345 } ;
  assign IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4468 =
	     (ff_input_D_OUT[12:8] == 5'b11100 &&
	      ff_input_D_OUT[5:3] == 3'b001) ?
	       { 54'd0, ff_input_D_OUT[0] ? x__h221152 : x__h222057, 6'd32 } :
	       ((ff_input_D_OUT[12:8] == 5'b01000) ?
		  IF_ff_input_first__319_BIT_0_351_THEN_0xFFFFFF_ETC___d4460 :
		  { ((ff_input_D_OUT[12:6] == 7'b1110000 ||
		      ff_input_D_OUT[12:6] == 7'b1111000) &&
		     ff_input_D_OUT[5:3] == 3'b0) ?
		      x_data__h229336 :
		      ff_input_D_OUT[208:145],
		    6'd32 }) ;
  assign IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4657 =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant32_res_wget[45:23], getExp32_res_wget[15:8], 31'd0 } :
	       (ff_input_first__319_BITS_12_TO_8_320_EQ_0b1100_ETC___d4607 ?
		  62'd0 :
		  IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d4655) ;
  assign IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4793 =
	     (ff_input_D_OUT[12:8] == 5'b00011 &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant64_res_wget[103:52],
		 getExp64_res_wget[21:11],
		 63'd0 } :
	       ((ff_input_D_OUT[12:8] == 5'b01011 &&
		 ff_input_D_OUT[16:13] == 4'b0100) ?
		  126'd0 :
		  { getMant64_res_wget[103:52],
		    getExp64_res_wget[21:11],
		    getMant64_res_wget[51:0],
		    getExp64_res_wget[10:0] }) ;
  assign IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d4796 =
	     ((ff_input_D_OUT[12:8] == 5'b10100 ||
	       ff_input_D_OUT[12:8] == 5'b00101) &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { getMant64_res_wget[103:52],
		 getExp64_res_wget[21:11],
		 63'd0 } :
	       (ff_input_first__319_BITS_12_TO_8_320_EQ_0b1100_ETC___d4607 ?
		  126'd0 :
		  IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b0_ETC___d4794) ;
  assign IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d5271 =
	     (ff_input_D_OUT[12:8] == 5'b00010 &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { 4'd10, x__h231465, x__h231568 } :
	       { x__h290760,
		 ff_input_D_OUT[14],
		 2'd1,
		 x__h231465,
		 x__h231568 } ;
  assign IF_ff_input_first__319_BITS_12_TO_8_320_EQ_0b1_ETC___d5345 =
	     (ff_input_D_OUT[12:8] == 5'b00010 &&
	      ff_input_D_OUT[16:13] == 4'b0100) ?
	       { 4'd10, x__h232916, x__h233019 } :
	       { x__h290760,
		 ff_input_D_OUT[14],
		 2'd1,
		 x__h232916,
		 x__h233019 } ;
  assign IF_ff_input_first__319_BIT_0_351_THEN_0xFFFFFF_ETC___d4460 =
	     { ff_input_D_OUT[0] ?
		 x_data__h229264 :
		 IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d4454[63:0],
	       1'd1,
	       ff_input_D_OUT[0] ?
		 IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4388[36:32] :
		 IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d4454[68:64] } ;
  assign IF_ff_input_first__319_BIT_0_351_THEN_42949672_ETC___d3812 =
	     { ff_input_D_OUT[0] ? x_data__h200255 : x_data__h200411,
	       1'd1,
	       ff_input_D_OUT[0] ? x_fflags__h200257 : x_fflags__h200413 } ;
  assign IF_ff_input_first__319_BIT_0_351_THEN_IF_NOT_I_ETC___d4263 =
	     { ff_input_D_OUT[0] ?
		 IF_NOT_IF_condFlags32_res_whas__353_THEN_condF_ETC___d4194 :
		 IF_NOT_IF_condFlags64_res_whas__438_THEN_condF_ETC___d4230,
	       3'd0,
	       ff_input_D_OUT[0] ?
		 _theResult_____1_snd__h217641 :
		 _theResult_____1_snd__h220140 } ;
  assign IF_ff_input_first__319_BIT_0_351_THEN_IF_NOT_I_ETC___d4264 =
	     { ff_input_D_OUT[0] ? x_data__h215936 : x_data__h218436,
	       1'd1,
	       IF_ff_input_first__319_BIT_0_351_THEN_IF_NOT_I_ETC___d4263 } ;
  assign IF_ff_input_first__319_BIT_0_351_THEN_IF_ff_in_ETC___d3531 =
	     { ff_input_D_OUT[0] ? x_data__h197458 : x_data__h199336,
	       1'd1,
	       ff_input_D_OUT[0] ? x_fflags__h197460 : x_fflags__h199338 } ;
  assign IF_ff_input_first__319_BIT_1_544_THEN_0_ELSE_1_ETC___d3893 =
	     ff_input_D_OUT[1] ? 64'd0 : 64'hFFFFFFFFFFFFFFFF ;
  assign IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d3847 =
	     ff_input_D_OUT[1] ?
	       !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	       !lv_invalid__h215893 &&
	       IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3843 :
	       !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	       !lv_invalid__h215893 &&
	       IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3845 ;
  assign IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d3852 =
	     ff_input_D_OUT[1] ?
	       !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	       !lv_invalid__h215893 &&
	       IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3848 :
	       !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	       !lv_invalid__h215893 &&
	       IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3850 ;
  assign IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d4017 =
	     ff_input_D_OUT[1] ?
	       !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	       !lv_invalid__h218392 &&
	       _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4013 :
	       !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	       !lv_invalid__h218392 &&
	       _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4015 ;
  assign IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d4022 =
	     ff_input_D_OUT[1] ?
	       !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	       !lv_invalid__h218392 &&
	       _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4018 :
	       !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	       !lv_invalid__h218392 &&
	       _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4020 ;
  assign IF_ff_input_first__319_BIT_3_372_AND_IF_condFl_ETC___d3411 =
	     (ff_input_D_OUT[3] &&
	      condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	      condFlags32_reswget_BITS_9_TO_5__q54[3]) ?
	       lv_result__h198157 :
	       IF_NOT_ff_input_first__319_BIT_3_372_373_AND_I_ETC___d3410 ;
  assign IF_ff_input_first__319_BIT_3_372_AND_IF_condFl_ETC___d3490 =
	     (ff_input_D_OUT[3] &&
	      condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	      condFlags64_reswget_BITS_9_TO_5__q34[3]) ?
	       lv_result__h200004 :
	       ((!ff_input_D_OUT[3] && lv_compare_result__h199321 == 2'b01 ||
		 ff_input_D_OUT[3] && lv_compare_result__h199321 == 2'b10) ?
		  ff_input_D_OUT[208:145] :
		  ff_input_D_OUT[144:81]) ;
  assign IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832 =
	     getExp32_res_wget[23:16] - 8'd127 ;
  assign IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3843 =
	     (IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832 ^
	      8'h80) <
	     8'd192 ;
  assign IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3845 =
	     (IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832 ^
	      8'h80) <
	     8'd191 ;
  assign IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3848 =
	     (IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832 ^
	      8'h80) <
	     8'd160 ;
  assign IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3850 =
	     (IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832 ^
	      8'h80) <
	     8'd159 ;
  assign IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d4164 =
	     getExp32_res_wget[23:16] == 8'd126 &&
	     (ff_input_D_OUT[5:3] == 3'b100 ||
	      ff_input_D_OUT[5:3] == 3'b0 &&
	      getMant32_res_wget[68:46] != 23'd0) ||
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832[7] &&
	     ff_input_D_OUT[5:3] == 3'b010 ;
  assign IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4309 =
	     getExp64_res_wget[32:22] <= 11'd1150 ;
  assign IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4310 =
	     getExp64_res_wget[32:22] <= 11'd872 ;
  assign IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4312 =
	     getExp64_res_wget[32:22] <= 11'd896 ;
  assign IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2118 =
	     lv_product_mantissa__h94401 >>
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1880 ;
  assign IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2339 =
	     IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2118[0] |
	     ((_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1880 ^
	       13'h1000) >
	      ({ 6'd0, lsb_zeros__h94405 } ^ 13'h1000) ||
	      lv_product_mantissa__h94401[0]) ;
  assign IF_inst_dpfm_add_sub_ff_stage2_read__382_BITS__ETC___d2798 =
	     (inst_dpfm_add_sub_ff_stage2[9:7] == 3'b010 &&
	      sign2__h102104 | op_xor_sign3__h102117 ||
	      inst_dpfm_add_sub_ff_stage2[9:7] != 3'b010 &&
	      sign2__h102104 & op_xor_sign3__h102117) ?
	       2'b11 :
	       (sign2__h102104 ? lv_result_is_zero___1__h148178 : 2'b01) ;
  assign IF_inst_dpfm_add_sub_ff_stage2_read__382_BIT_5_ETC___d2399 =
	     exponent2__h102128 <= exponent3__h102119 ;
  assign IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3191 =
	     (resultant_exponent__h170935 - 13'd1023 ^ 13'h1000) <= 13'd5119 ;
  assign IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208 =
	     inst_dpfm_add_sub_ff_stage5[183] ?
	       resultant_mantissa___1__h171237 :
	       _theResult___snd_fst__h171482 ;
  assign IF_inst_dpfpu_divider_rg_stage3_679_BIT_10_686_ETC___d1767 =
	     inst_dpfpu_divider_rg_stage3[10] ?
	       { 64'h7FF8000000000000, _theResult_____1_snd__h76513 } :
	       { _theResult_____1_fst__h76523,
		 _theResult_____1_snd__h76524 } ;
  assign IF_inst_dpfpu_divider_rg_stage3_679_BIT_7_735__ETC___d1756 =
	     (inst_dpfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_dpfpu_divider_rg_stage3_679_BIT_13_ETC___d1744[10:0] ==
	      11'd2047) ?
	       ((inst_dpfpu_divider_rg_stage3[4:2] == 3'b001 ||
		 inst_dpfpu_divider_rg_stage3[4:2] == 3'b010 &&
		 !inst_dpfpu_divider_rg_stage3[12] ||
		 inst_dpfpu_divider_rg_stage3[4:2] == 3'b011 &&
		 inst_dpfpu_divider_rg_stage3[12]) ?
		  63'h7FEFFFFFFFFFFFFF :
		  63'h7FF0000000000000) :
	       { IF_NOT_inst_dpfpu_divider_rg_stage3_679_BIT_13_ETC___d1744[10:0],
		 IF_IF_IF_inst_dpfpu_divider_rg_stage3_679_BITS_ETC___d1732[51:0] } ;
  assign IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d594 =
	     lv_product_mantissa__h21981 >>
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d472 ;
  assign IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d699 =
	     IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d594[0] |
	     ((_1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d472 ^
	       10'h200) >
	      ({ 4'd0, lsb_zeros__h21985 } ^ 10'h200) ||
	      lv_product_mantissa__h21981[0]) ;
  assign IF_inst_spfm_add_sub_ff_stage2_read__42_BITS_9_ETC___d984 =
	     (inst_spfm_add_sub_ff_stage2[9:7] == 3'b010 &&
	      sign2__h25798 | op_xor_sign3__h25811 ||
	      inst_spfm_add_sub_ff_stage2[9:7] != 3'b010 &&
	      sign2__h25798 & op_xor_sign3__h25811) ?
	       2'b11 :
	       (sign2__h25798 ? lv_result_is_zero___1__h47251 : 2'b01) ;
  assign IF_inst_spfm_add_sub_ff_stage2_read__42_BIT_5__ETC___d759 =
	     exponent2__h25822 <= exponent3__h25813 ;
  assign IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1203 =
	     (resultant_exponent__h57828 - 10'd127 ^ 10'h200) <= 10'd639 ;
  assign IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220 =
	     inst_spfm_add_sub_ff_stage5[95] ?
	       resultant_mantissa___1__h58130 :
	       _theResult___snd_fst__h58375 ;
  assign IF_inst_spfpu_divider_rg_stage3_71_BIT_10_78_T_ETC___d359 =
	     inst_spfpu_divider_rg_stage3[10] ?
	       { 32'h7FC00000, _theResult_____1_snd__h12150 } :
	       { _theResult_____1_fst__h12160,
		 _theResult_____1_snd__h12161 } ;
  assign IF_inst_spfpu_divider_rg_stage3_71_BIT_7_27_OR_ETC___d348 =
	     (inst_spfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_spfpu_divider_rg_stage3_71_BIT_77__ETC___d336[7:0] ==
	      8'd255) ?
	       ((inst_spfpu_divider_rg_stage3[4:2] == 3'b001 ||
		 inst_spfpu_divider_rg_stage3[4:2] == 3'b010 &&
		 !inst_spfpu_divider_rg_stage3[12] ||
		 inst_spfpu_divider_rg_stage3[4:2] == 3'b011 &&
		 inst_spfpu_divider_rg_stage3[12]) ?
		  31'h7F7FFFFF :
		  31'h7F800000) :
	       { IF_NOT_inst_spfpu_divider_rg_stage3_71_BIT_77__ETC___d336[7:0],
		 IF_IF_IF_inst_spfpu_divider_rg_stage3_71_BITS__ETC___d324[22:0] } ;
  assign INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2100 =
	     shift_neg__h94408 < { 6'd0, x__h94469 } ;
  assign INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d576 =
	     shift_neg__h21988 < { 4'd0, x__h22049 } ;
  assign INV_1_MINUS_inst_dpfpu_divider_rg_stage2_449_B_ETC___d1573 =
	     shift_neg__h64516 < { 7'd0, msb_zeros__h64365 } ;
  assign INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d194 =
	     shift_neg__h6098 < { 5'd0, msb_zeros__h5947 } ;
  assign NOT_0b0_CONCAT_IF_getExp64_res_whas__996_THEN__ETC___d4255 =
	     (x__h218516[10:0] != 11'd2047 ||
	      ff_input_D_OUT[5:3] != 3'b100 &&
	      (ff_input_D_OUT[5:3] != 3'b0 ||
	       getMant64_res_wget[155:104] == 52'd0)) &&
	     (!x__h218516[10] || ff_input_D_OUT[5:3] != 3'b010) ;
  assign NOT_IF_condFlags32_res_whas__353_THEN_condFlag_ETC___d3854 =
	     !condFlags32_reswget_BITS_14_TO_10__q53[4] &&
	     (!IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832[7] ||
	      IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3837) &&
	     (ff_input_D_OUT[2] ?
		IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d3847 :
		IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d3852) ;
  assign NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d4024 =
	     !condFlags64_reswget_BITS_14_TO_10__q33[4] &&
	     (!x__h218516[10] ||
	      IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d4006) &&
	     (ff_input_D_OUT[2] ?
		IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d4017 :
		IF_ff_input_first__319_BIT_1_544_THEN_NOT_IF_c_ETC___d4022) ;
  assign NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d5173 =
	     !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[2] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[0] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4309 &&
	     !IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4310 &&
	     IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4312 ;
  assign NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d5179 =
	     !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[2] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[0] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4309 &&
	     !IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4310 &&
	     !IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4312 ;
  assign NOT_IF_getExp32_res_whas__828_THEN_getExp32_re_ETC___d4241 =
	     (getExp32_res_wget[23:16] != 8'd126 ||
	      ff_input_D_OUT[5:3] != 3'b100 &&
	      (ff_input_D_OUT[5:3] != 3'b0 ||
	       getMant32_res_wget[68:46] == 23'd0)) &&
	     (!IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832[7] ||
	      ff_input_D_OUT[5:3] != 3'b010) ;
  assign NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5360 =
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] &&
	     !IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 &&
	     !lv_op2_Nan__h197438 &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	     condFlags32_reswget_BITS_9_TO_5__q54[3] ;
  assign NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5362 =
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5481 =
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] &&
	     !IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 &&
	     !lv_op2_Nan__h199317 &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     condFlags64_reswget_BITS_9_TO_5__q34[3] ;
  assign NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5483 =
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5741 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] &&
	     (IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 ||
	      ff_input_D_OUT[176] ||
	      condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      condFlags32_reswget_BITS_14_TO_10__q53[3]) ;
  assign NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5766 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] &&
	     !IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 &&
	     !ff_input_D_OUT[176] &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      !condFlags32_reswget_BITS_14_TO_10__q53[3]) ;
  assign NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5768 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5837 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] &&
	     (IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 ||
	      ff_input_D_OUT[208] ||
	      condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      condFlags64_reswget_BITS_14_TO_10__q33[3]) ;
  assign NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5862 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] &&
	     !IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 &&
	     !ff_input_D_OUT[208] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      !condFlags64_reswget_BITS_14_TO_10__q33[3]) ;
  assign NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5864 =
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] ;
  assign NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5196 =
	     (ff_input_D_OUT[12:8] == 5'b0 ||
	      ff_input_D_OUT[12:8] == 5'b00001) &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     ff_input_D_OUT[12:8] == 5'b00011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     ff_input_D_OUT[12:8] == 5'b01011 &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     ff_input_D_OUT[12:8] == 5'b00010 &&
	     ff_input_D_OUT[16:13] == 4'b0100 ||
	     ff_input_D_OUT[16:13] == 4'b0 ||
	     ff_input_D_OUT[16:13] == 4'b0001 ||
	     ff_input_D_OUT[16:13] == 4'b0010 ||
	     ff_input_D_OUT[16:13] == 4'b0011 ;
  assign NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5207 =
	     (ff_input_D_OUT[12:8] != 5'b11010 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b00100 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11100 ||
	      ff_input_D_OUT[5:3] != 3'b001 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b01000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110001 &&
	      ff_input_D_OUT[12:6] != 7'b1111001 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100 &&
	      ff_input_D_OUT[0] ||
	      (ff_input_D_OUT[12:8] != 5'b0 &&
	       ff_input_D_OUT[12:8] != 5'b00001 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      (ff_input_D_OUT[12:8] != 5'b00011 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      (ff_input_D_OUT[12:8] != 5'b01011 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      ff_input_first__319_BITS_12_TO_8_320_EQ_0b10_5_ETC___d4544) ;
  assign NOT_ff_input_first__319_BITS_12_TO_8_320_EQ_0b_ETC___d5287 =
	     (ff_input_D_OUT[12:8] != 5'b11010 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b00100 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b11100 ||
	      ff_input_D_OUT[5:3] != 3'b001 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:8] != 5'b01000 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110000 &&
	      ff_input_D_OUT[12:6] != 7'b1111000 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     (ff_input_D_OUT[12:6] != 7'b1110001 &&
	      ff_input_D_OUT[12:6] != 7'b1111001 ||
	      ff_input_D_OUT[5:3] != 3'b0 ||
	      ff_input_D_OUT[16:13] != 4'b0100) &&
	     ((ff_input_D_OUT[12:8] == 5'b0 ||
	       ff_input_D_OUT[12:8] == 5'b00001) &&
	      ff_input_D_OUT[16:13] == 4'b0100 &&
	      !ff_input_D_OUT[0] ||
	      (ff_input_D_OUT[12:8] != 5'b0 &&
	       ff_input_D_OUT[12:8] != 5'b00001 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      (ff_input_D_OUT[12:8] != 5'b00011 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      (ff_input_D_OUT[12:8] != 5'b01011 ||
	       ff_input_D_OUT[16:13] != 4'b0100) &&
	      ff_input_first__319_BITS_12_TO_8_320_EQ_0b10_5_ETC___d4730) ;
  assign NOT_ff_input_first__319_BIT_2_533_537_AND_NOT__ETC___d3951 =
	     !ff_input_D_OUT[2] && !ff_input_D_OUT[1] &&
	     getExp32_res_wget[23:16] == 8'd157 &&
	     final_result__h215913[30:0] == 31'h7FFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ;
  assign NOT_ff_input_first__319_BIT_2_533_537_AND_NOT__ETC___d4118 =
	     !ff_input_D_OUT[2] && !ff_input_D_OUT[1] &&
	     x__h218516[10:0] == 11'd30 &&
	     final_result__h218413[30:0] == 31'h7FFFFFFF &&
	     !ff_input_D_OUT[208] ;
  assign NOT_ff_input_first__319_BIT_2_533_537_AND_ff_i_ETC___d3958 =
	     !ff_input_D_OUT[2] && ff_input_D_OUT[1] &&
	     getExp32_res_wget[23:16] == 8'd158 &&
	     final_result__h215913[31:0] == 32'hFFFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ;
  assign NOT_ff_input_first__319_BIT_2_533_537_AND_ff_i_ETC___d4124 =
	     !ff_input_D_OUT[2] && ff_input_D_OUT[1] &&
	     x__h218516[10:0] == 11'd31 &&
	     final_result__h218413[31:0] == 32'hFFFFFFFF &&
	     !ff_input_D_OUT[208] ;
  assign NOT_inst_dpfpu_divider_rg_stage2_449_BITS_21_T_ETC___d1653 =
	     !inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1453 &&
	     (!_1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1455 ||
	      !inst_dpfpu_divider_int_div_wr_final_out_wget[55] &&
	      INV_1_MINUS_inst_dpfpu_divider_rg_stage2_449_B_ETC___d1573) ;
  assign NOT_inst_dpfpu_divider_rg_stage3_679_BITS_82_T_ETC___d1702 =
	     x__h76558 | inst_dpfpu_divider_rg_stage3[84] ;
  assign NOT_inst_spfpu_divider_rg_stage2_28_BITS_18_TO_ETC___d245 =
	     !inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 &&
	     (!_1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134 ||
	      !inst_spfpu_divider_int_div_wr_final_out_wget[26] &&
	      INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d194) ;
  assign NOT_inst_spfpu_divider_rg_stage3_71_BITS_50_TO_ETC___d294 =
	     x__h12195 | inst_spfpu_divider_rg_stage3[52] ;
  assign _0_CONCAT_IF_IF_IF_inst_dpfm_add_sub_ff_stage2__ETC___d2751 =
	     ({ 5'd0, x__h137214 } < exponent_difference__h102142 ||
	      IF_IF_inst_dpfm_add_sub_ff_stage2_read__382_BI_ETC___d2423[0]) &&
	     mantissa_to_shift__h102141 != 160'd0 ;
  assign _0_CONCAT_IF_IF_IF_inst_spfm_add_sub_ff_stage2__ETC___d937 =
	     ({ 3'd0, x__h42116 } < exponent_difference__h25836 ||
	      IF_IF_inst_spfm_add_sub_ff_stage2_read__42_BIT_ETC___d783[0]) &&
	     mantissa_to_shift__h25835 != 73'd0 ;
  assign _0_CONCAT_INV_IF_condFlags32_res_whas__353_THEN_ETC___d5218 =
	     { 24'd0, x__h230955 } * { 24'd0, x__h231019 } ;
  assign _0_CONCAT_INV_IF_condFlags64_res_whas__438_THEN_ETC___d5298 =
	     { 53'd0, x__h232411 } * { 53'd0, x__h232475 } ;
  assign _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3183 =
	     { 5'd0, inst_dpfm_add_sub_ff_stage5[7:0] } - 13'd1 ;
  assign _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3185 =
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3183 <=
	     resultant_exponent_sub__h170928 ;
  assign _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1195 =
	     { 3'd0, inst_spfm_add_sub_ff_stage5[6:0] } - 10'd1 ;
  assign _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1197 =
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1195 <=
	     resultant_exponent_sub__h57821 ;
  assign _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4013 =
	     (x__h218516[10:0] ^ 11'h400) < 11'd1088 ;
  assign _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4015 =
	     (x__h218516[10:0] ^ 11'h400) < 11'd1087 ;
  assign _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4018 =
	     (x__h218516[10:0] ^ 11'h400) < 11'd1056 ;
  assign _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4020 =
	     (x__h218516[10:0] ^ 11'h400) < 11'd1055 ;
  assign _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4200 =
	     x__h218516[10:0] == 11'd2047 &&
	     (ff_input_D_OUT[5:3] == 3'b100 ||
	      ff_input_D_OUT[5:3] == 3'b0 &&
	      getMant64_res_wget[155:104] != 52'd0) ||
	     x__h218516[10] && ff_input_D_OUT[5:3] == 3'b010 ;
  assign _1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC___d3868 =
	     final_man__h215905 <<
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832 ;
  assign _1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC__q49 =
	     _1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC___d3868[54:23] ;
  assign _1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC___d4037 =
	     final_man__h218405 << x__h218516[10:0] ;
  assign _1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC__q29 =
	     _1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC___d4037[83:52] ;
  assign _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1880 =
	     13'd1 - lv_product_exponent__h94399 ;
  assign _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1881 =
	     (_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1880 ^
	      13'h1000) <=
	     13'd4096 ;
  assign _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d472 =
	     10'd1 - lv_product_exponent__h21979 ;
  assign _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d473 =
	     (_1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d472 ^
	      10'h200) <=
	     10'd512 ;
  assign _1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1454 =
	     13'd1 - inst_dpfpu_divider_rg_stage2[21:9] ;
  assign _1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1455 =
	     (_1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1454 ^
	      13'h1000) <=
	     13'd4096 ;
  assign _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 =
	     10'd1 - inst_spfpu_divider_rg_stage2[18:9] ;
  assign _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134 =
	     (_1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 ^
	      10'h200) <=
	     10'd512 ;
  assign _denominator__h4699 = { inst_spfpu_divider_rg_stage1[32:9], 3'd0 } ;
  assign _denominator__h63117 = { inst_dpfpu_divider_rg_stage1[61:9], 3'd0 } ;
  assign _dividend___1__h3108 = _dividend__h2938 - 27'd1 ;
  assign _dividend___1__h61532 = _dividend__h61362 - 56'd1 ;
  assign _dividend__h2348 =
	     { IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67[25:0],
	       !IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC__q13[28] } ;
  assign _dividend__h2444 =
	     { IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35[25:0],
	       !inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[55] } ;
  assign _dividend__h2937 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       _dividend__h2444 :
	       _dividend__h2348 ;
  assign _dividend__h2938 = _dividend__h2937 - ~_dividend__h2937 ;
  assign _dividend__h60772 =
	     { IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1388[54:0],
	       !IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC__q20[57] } ;
  assign _dividend__h60868 =
	     { IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1356[54:0],
	       !inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[113] } ;
  assign _dividend__h61361 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       _dividend__h60868 :
	       _dividend__h60772 ;
  assign _dividend__h61362 = _dividend__h61361 - ~_dividend__h61361 ;
  assign _numerator__h4700 = { inst_spfpu_divider_rg_stage1[56:33], 3'd0 } ;
  assign _numerator__h63118 = { inst_dpfpu_divider_rg_stage1[114:62], 3'd0 } ;
  assign _remainder___1__h3107 =
	     _remainder__h2935 +
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[82:56],
	       1'b0 } ;
  assign _remainder___1__h61531 =
	     _remainder__h61359 +
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[169:114],
	       1'b0 } ;
  assign _remainder__h2935 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       IF_IF_inst_spfpu_divider_int_div_wfn_divide_st_ETC___d35[54:26] :
	       IF_IF_IF_inst_spfpu_divider_int_div_wfn_divide_ETC___d67[54:26] ;
  assign _remainder__h61359 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[0] ?
	       IF_IF_inst_dpfpu_divider_int_div_wfn_divide_st_ETC___d1356[112:55] :
	       IF_IF_IF_inst_dpfpu_divider_int_div_wfn_divide_ETC___d1388[112:55] ;
  assign _theResult_____1__h102152 = mantissa2__h102148 > mantissa3__h102149 ;
  assign _theResult_____1__h25846 = mantissa2__h25842 > mantissa3__h25843 ;
  assign _theResult_____1_fst__h12160 =
	     { inst_spfpu_divider_rg_stage3[12],
	       inst_spfpu_divider_rg_stage3[9] ?
		 31'h7F800000 :
		 (inst_spfpu_divider_rg_stage3[5] ?
		    31'd0 :
		    IF_NOT_inst_spfpu_divider_rg_stage3_71_BITS_50_ETC___d349) } ;
  assign _theResult_____1_fst__h14547 =
	     lv_extended_mantissa___1__h14546[26] ?
	       result_exponent___1__h14569 :
	       inst_spfpu_sqrt_rg_inter_stage[67:59] ;
  assign _theResult_____1_fst__h171801 =
	     !inst_dpfm_add_sub_ff_stage5[17] &&
	     inst_dpfm_add_sub_ff_stage5_read__165_BIT_15_1_ETC___d3292 &&
	     _theResult_____3_fst__h171072 ;
  assign _theResult_____1_fst__h217573 =
	     ff_input_D_OUT[1] &&
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ||
	     lv_invalid___2__h216471 ;
  assign _theResult_____1_fst__h220072 =
	     ff_input_D_OUT[1] && ff_input_D_OUT[208] ||
	     lv_invalid___2__h218974 ;
  assign _theResult_____1_fst__h22039 =
	     (msb_zeros__h21983 == 6'b000001) ?
	       lv_product_exponent__h21979 :
	       _theResult_____1_fst__h22042 ;
  assign _theResult_____1_fst__h22042 =
	     INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d576 ?
	       lv_product_exponent_sub_shift__h21990 :
	       lv_product_exponent_sub_zerosMSB__h21992 ;
  assign _theResult_____1_fst__h58694 =
	     !inst_spfm_add_sub_ff_stage5[16] &&
	     inst_spfm_add_sub_ff_stage5_read__177_BIT_14_1_ETC___d1304 &&
	     _theResult_____3_fst__h57965 ;
  assign _theResult_____1_fst__h76523 =
	     { inst_dpfpu_divider_rg_stage3[12],
	       inst_dpfpu_divider_rg_stage3[9] ?
		 63'h7FF0000000000000 :
		 (inst_dpfpu_divider_rg_stage3[5] ?
		    63'd0 :
		    IF_NOT_inst_dpfpu_divider_rg_stage3_679_BITS_8_ETC___d1757) } ;
  assign _theResult_____1_fst__h78909 =
	     lv_extended_mantissa___1__h78908[55] ?
	       result_exponent___1__h78931 :
	       inst_dpfpu_sqrt_rg_inter_stage[128:117] ;
  assign _theResult_____1_fst__h94459 =
	     (msb_zeros__h94403 == 7'b0000001) ?
	       lv_product_exponent__h94399 :
	       _theResult_____1_fst__h94462 ;
  assign _theResult_____1_fst__h94462 =
	     INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2100 ?
	       lv_product_exponent_sub_shift__h94410 :
	       lv_product_exponent_sub_zerosMSB__h94412 ;
  assign _theResult_____1_snd__h12139 =
	     inst_spfpu_divider_rg_stage3[9] ? 5'd8 : 5'd0 ;
  assign _theResult_____1_snd__h12150 =
	     (~inst_spfpu_divider_rg_stage3[0]) ? 5'd16 : 5'd0 ;
  assign _theResult_____1_snd__h12161 =
	     inst_spfpu_divider_rg_stage3[9] ?
	       5'd8 :
	       _theResult_____1_snd__h12178 ;
  assign _theResult_____1_snd__h12178 =
	     inst_spfpu_divider_rg_stage3[5] ?
	       5'd0 :
	       _theResult_____1_snd__h12288 ;
  assign _theResult_____1_snd__h12288 =
	     (NOT_inst_spfpu_divider_rg_stage3_71_BITS_50_TO_ETC___d294 &&
	      inst_spfpu_divider_rg_stage3[1] ||
	      inst_spfpu_divider_rg_stage3[8]) ?
	       5'd3 :
	       _theResult_____1_snd__h12528 ;
  assign _theResult_____1_snd__h12528 =
	     (inst_spfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_spfpu_divider_rg_stage3_71_BIT_77__ETC___d336[7:0] ==
	      8'd255) ?
	       5'd5 :
	       _theResult_____1_snd__h12546 ;
  assign _theResult_____1_snd__h12546 =
	     NOT_inst_spfpu_divider_rg_stage3_71_BITS_50_TO_ETC___d294 ?
	       5'd1 :
	       5'd0 ;
  assign _theResult_____1_snd__h217574 =
	     (ff_input_D_OUT[1] &&
	      setCanonicalNaN_reswget_BITS_95_TO_64__q42[31]) ?
	       64'd0 :
	       final_result___3__h216472 ;
  assign _theResult_____1_snd__h217641 =
	     !IF_NOT_IF_condFlags32_res_whas__353_THEN_condF_ETC___d4194 &&
	     IF_NOT_IF_condFlags32_res_whas__353_THEN_condF_ETC___d4246 ;
  assign _theResult_____1_snd__h220073 =
	     (ff_input_D_OUT[1] && ff_input_D_OUT[208]) ?
	       64'd0 :
	       final_result___3__h218975 ;
  assign _theResult_____1_snd__h220140 =
	     !IF_NOT_IF_condFlags64_res_whas__438_THEN_condF_ETC___d4230 &&
	     IF_NOT_IF_condFlags64_res_whas__438_THEN_condF_ETC___d4260 ;
  assign _theResult_____1_snd__h22040 =
	     (msb_zeros__h21983 == 6'b000001) ?
	       lv_product_mantissa__h21981 :
	       _theResult_____1_snd__h22043 ;
  assign _theResult_____1_snd__h22043 =
	     INV_1_MINUS_IF_inst_spfm_add_sub_ff_input_regi_ETC___d576 ?
	       lv_product_mantissa_shiftL_expo__h21989 :
	       lv_product_mantissa_shiftL_zerosMSB__h21991 ;
  assign _theResult_____1_snd__h76502 =
	     inst_dpfpu_divider_rg_stage3[9] ? 5'd8 : 5'd0 ;
  assign _theResult_____1_snd__h76513 =
	     (~inst_dpfpu_divider_rg_stage3[0]) ? 5'd16 : 5'd0 ;
  assign _theResult_____1_snd__h76524 =
	     inst_dpfpu_divider_rg_stage3[9] ?
	       5'd8 :
	       _theResult_____1_snd__h76541 ;
  assign _theResult_____1_snd__h76541 =
	     inst_dpfpu_divider_rg_stage3[5] ?
	       5'd0 :
	       _theResult_____1_snd__h76651 ;
  assign _theResult_____1_snd__h76651 =
	     (NOT_inst_dpfpu_divider_rg_stage3_679_BITS_82_T_ETC___d1702 &&
	      inst_dpfpu_divider_rg_stage3[1] ||
	      inst_dpfpu_divider_rg_stage3[8]) ?
	       5'd3 :
	       _theResult_____1_snd__h76891 ;
  assign _theResult_____1_snd__h76891 =
	     (inst_dpfpu_divider_rg_stage3[7] ||
	      IF_NOT_inst_dpfpu_divider_rg_stage3_679_BIT_13_ETC___d1744[10:0] ==
	      11'd2047) ?
	       5'd5 :
	       _theResult_____1_snd__h76909 ;
  assign _theResult_____1_snd__h76909 =
	     NOT_inst_dpfpu_divider_rg_stage3_679_BITS_82_T_ETC___d1702 ?
	       5'd1 :
	       5'd0 ;
  assign _theResult_____1_snd__h94460 =
	     (msb_zeros__h94403 == 7'b0000001) ?
	       lv_product_mantissa__h94401 :
	       _theResult_____1_snd__h94463 ;
  assign _theResult_____1_snd__h94463 =
	     INV_1_MINUS_IF_inst_dpfm_add_sub_ff_input_regi_ETC___d2100 ?
	       lv_product_mantissa_shiftL_expo__h94409 :
	       lv_product_mantissa_shiftL_zerosMSB__h94411 ;
  assign _theResult_____1_snd_snd_fst__h171829 =
	     !inst_dpfm_add_sub_ff_stage5[17] &&
	     _theResult_____3_snd_fst__h171074 ;
  assign _theResult_____1_snd_snd_fst__h58722 =
	     !inst_spfm_add_sub_ff_stage5[16] &&
	     _theResult_____3_snd_fst__h57967 ;
  assign _theResult_____1_snd_snd_snd__h171830 =
	     !inst_dpfm_add_sub_ff_stage5[17] &&
	     _theResult_____3_snd_snd_fst__h171076 ;
  assign _theResult_____1_snd_snd_snd__h58723 =
	     !inst_spfm_add_sub_ff_stage5[16] &&
	     _theResult_____3_snd_snd_fst__h57969 ;
  assign _theResult_____2__h228912 =
	     IF_IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0_ETC___d4365[23] ?
	       expo___1__h229201 :
	       expo__h228531 ;
  assign _theResult_____2_fst__h217248 =
	     NOT_ff_input_first__319_BIT_2_533_537_AND_NOT__ETC___d3951 ||
	     NOT_ff_input_first__319_BIT_2_533_537_AND_ff_i_ETC___d3958 ||
	     ff_input_first__319_BIT_2_533_AND_NOT_ff_input_ETC___d3965 ||
	     ff_input_first__319_BIT_2_533_AND_ff_input_fir_ETC___d3971 ;
  assign _theResult_____2_fst__h219749 =
	     NOT_ff_input_first__319_BIT_2_533_537_AND_NOT__ETC___d4118 ||
	     NOT_ff_input_first__319_BIT_2_533_537_AND_ff_i_ETC___d4124 ||
	     ff_input_first__319_BIT_2_533_AND_NOT_ff_input_ETC___d4130 ||
	     ff_input_first__319_BIT_2_533_AND_ff_input_fir_ETC___d4135 ;
  assign _theResult_____2_snd__h217249 =
	     NOT_ff_input_first__319_BIT_2_533_537_AND_NOT__ETC___d3951 ?
	       64'h000000007FFFFFFF :
	       _theResult_____2_snd__h217356 ;
  assign _theResult_____2_snd__h217356 =
	     NOT_ff_input_first__319_BIT_2_533_537_AND_ff_i_ETC___d3958 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h217408 ;
  assign _theResult_____2_snd__h217408 =
	     ff_input_first__319_BIT_2_533_AND_NOT_ff_input_ETC___d3965 ?
	       64'h7FFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h217459 ;
  assign _theResult_____2_snd__h217459 =
	     ff_input_first__319_BIT_2_533_AND_ff_input_fir_ETC___d3971 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h217462 ;
  assign _theResult_____2_snd__h217462 =
	     (!ff_input_D_OUT[2] && final_result___2__h217461[31]) ?
	       final_result___1__h217500 :
	       final_result___2__h217461 ;
  assign _theResult_____2_snd__h219750 =
	     NOT_ff_input_first__319_BIT_2_533_537_AND_NOT__ETC___d4118 ?
	       64'h000000007FFFFFFF :
	       _theResult_____2_snd__h219855 ;
  assign _theResult_____2_snd__h219855 =
	     NOT_ff_input_first__319_BIT_2_533_537_AND_ff_i_ETC___d4124 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h219907 ;
  assign _theResult_____2_snd__h219907 =
	     ff_input_first__319_BIT_2_533_AND_NOT_ff_input_ETC___d4130 ?
	       64'h7FFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h219958 ;
  assign _theResult_____2_snd__h219958 =
	     ff_input_first__319_BIT_2_533_AND_ff_input_fir_ETC___d4135 ?
	       64'hFFFFFFFFFFFFFFFF :
	       _theResult_____2_snd__h219961 ;
  assign _theResult_____2_snd__h219961 =
	     (!ff_input_D_OUT[2] && final_result___2__h219960[31]) ?
	       final_result___1__h219999 :
	       final_result___2__h219960 ;
  assign _theResult_____3__h259744 =
	     { 27'd0,
	       IF_IF_IF_condFlags32_res_whas__353_THEN_condFl_ETC___d5810[51:50] } -
	     29'd1 ;
  assign _theResult_____3__h268747 =
	     { 56'd0,
	       IF_IF_IF_condFlags64_res_whas__438_THEN_condFl_ETC___d5934[109:108] } -
	     58'd1 ;
  assign _theResult_____3_fst__h171072 =
	     !inst_dpfm_add_sub_ff_stage5[15] && _theResult_____6__h170952 ;
  assign _theResult_____3_fst__h171722 =
	     ex_overflow__h170943 || inst_dpfm_add_sub_ff_stage5[12] ||
	     IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3240[10:0] ==
	     11'd2047 ;
  assign _theResult_____3_fst__h197513 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[2] ||
	      condFlags32_reswget_BITS_14_TO_10__q53[0] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[2] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[0]) ?
	       _theResult_____3_fst__h197654 :
	       5'd0 ;
  assign _theResult_____3_fst__h197654 =
	     (ff_input_D_OUT[5:3] != 3'b010 ||
	      condFlags32_reswget_BITS_14_TO_10__q53[0] |
	      condFlags32_reswget_BITS_9_TO_5__q54[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_fst__h198071 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[0] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_fst__h199366 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[2] ||
	      condFlags64_reswget_BITS_14_TO_10__q33[0] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[2] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[0]) ?
	       _theResult_____3_fst__h199507 :
	       5'd0 ;
  assign _theResult_____3_fst__h199507 =
	     (ff_input_D_OUT[5:3] != 3'b010 ||
	      condFlags64_reswget_BITS_14_TO_10__q33[0] |
	      condFlags64_reswget_BITS_9_TO_5__q34[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_fst__h199918 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[0] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[0]) ?
	       5'd16 :
	       5'd0 ;
  assign _theResult_____3_fst__h216474 =
	     (!ff_input_D_OUT[1] &&
	      setCanonicalNaN_reswget_BITS_95_TO_64__q42[31]) ?
	       lv_invalid___2__h216471 :
	       _theResult_____1_fst__h217573 ;
  assign _theResult_____3_fst__h218977 =
	     sign__h205112 ?
	       lv_invalid___2__h218974 :
	       _theResult_____1_fst__h220072 ;
  assign _theResult_____3_fst__h57965 =
	     !inst_spfm_add_sub_ff_stage5[14] && _theResult_____6__h57845 ;
  assign _theResult_____3_fst__h58615 =
	     ex_overflow__h57836 || inst_spfm_add_sub_ff_stage5[11] ||
	     IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1252[7:0] ==
	     8'd255 ;
  assign _theResult_____3_snd__h197514 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[2] ||
	      condFlags32_reswget_BITS_14_TO_10__q53[0] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[2] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[0]) ?
	       32'd0 :
	       IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3434 ;
  assign _theResult_____3_snd__h198072 =
	     (IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 &
	      lv_op2_Nan__h197438) ?
	       32'h7FC00000 :
	       IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3414 ;
  assign _theResult_____3_snd__h199367 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[2] ||
	      condFlags64_reswget_BITS_14_TO_10__q33[0] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[2] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[0]) ?
	       64'd0 :
	       IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3511 ;
  assign _theResult_____3_snd__h199919 =
	     (IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 &
	      lv_op2_Nan__h199317) ?
	       64'h7FF8000000000000 :
	       IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d3493 ;
  assign _theResult_____3_snd_fst__h171074 =
	     !inst_dpfm_add_sub_ff_stage5[15] &&
	     ((inst_dpfm_add_sub_ff_stage5[13] ||
	       inst_dpfm_add_sub_ff_stage5[18]) ?
		ex_overflow__h170943 :
		_theResult_____3_fst__h171722) ;
  assign _theResult_____3_snd_fst__h171724 =
	     ex_overflow__h170943 || inst_dpfm_add_sub_ff_stage5[12] ||
	     IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3240[10:0] ==
	     11'd2047 ||
	     lv_inexact__h170951 ;
  assign _theResult_____3_snd_fst__h57967 =
	     !inst_spfm_add_sub_ff_stage5[14] &&
	     ((inst_spfm_add_sub_ff_stage5[12] ||
	       inst_spfm_add_sub_ff_stage5[17]) ?
		ex_overflow__h57836 :
		_theResult_____3_fst__h58615) ;
  assign _theResult_____3_snd_fst__h58617 =
	     ex_overflow__h57836 || inst_spfm_add_sub_ff_stage5[11] ||
	     IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1252[7:0] ==
	     8'd255 ||
	     lv_inexact__h57844 ;
  assign _theResult_____3_snd_snd__h171134 =
	     inst_dpfm_add_sub_ff_stage5[13] ?
	       lv_final_output__h171135 :
	       _theResult_____3_snd_snd__h171184 ;
  assign _theResult_____3_snd_snd__h171184 =
	     inst_dpfm_add_sub_ff_stage5[18] ?
	       lv_final_output__h171185 :
	       _theResult_____3_snd_snd__h171725 ;
  assign _theResult_____3_snd_snd__h171725 =
	     { inst_dpfm_add_sub_ff_stage5[23],
	       IF_NOT_IF_inst_dpfm_add_sub_ff_stage5_read__16_ETC___d3256 } ;
  assign _theResult_____3_snd_snd__h58027 =
	     inst_spfm_add_sub_ff_stage5[12] ?
	       lv_final_output__h58028 :
	       _theResult_____3_snd_snd__h58077 ;
  assign _theResult_____3_snd_snd__h58077 =
	     inst_spfm_add_sub_ff_stage5[17] ?
	       lv_final_output__h58078 :
	       _theResult_____3_snd_snd__h58618 ;
  assign _theResult_____3_snd_snd__h58618 =
	     { inst_spfm_add_sub_ff_stage5[22],
	       IF_NOT_IF_inst_spfm_add_sub_ff_stage5_read__17_ETC___d1268 } ;
  assign _theResult_____3_snd_snd_fst__h171076 =
	     !inst_dpfm_add_sub_ff_stage5[15] &&
	     ((inst_dpfm_add_sub_ff_stage5[13] ||
	       inst_dpfm_add_sub_ff_stage5[18]) ?
		lv_inexact__h170951 :
		_theResult_____3_snd_fst__h171724) ;
  assign _theResult_____3_snd_snd_fst__h216477 =
	     (!ff_input_D_OUT[1] &&
	      setCanonicalNaN_reswget_BITS_95_TO_64__q42[31]) ?
	       ((!ff_input_D_OUT[2] && final_result___2__h216520[31]) ?
		  final_result___1__h217530 :
		  final_result___2__h216520) :
	       _theResult_____1_snd__h217574 ;
  assign _theResult_____3_snd_snd_fst__h218980 =
	     sign__h205112 ?
	       ((!ff_input_D_OUT[2] && final_result___2__h219022[31]) ?
		  final_result___1__h220029 :
		  final_result___2__h219022) :
	       _theResult_____1_snd__h220073 ;
  assign _theResult_____3_snd_snd_fst__h57969 =
	     !inst_spfm_add_sub_ff_stage5[14] &&
	     ((inst_spfm_add_sub_ff_stage5[12] ||
	       inst_spfm_add_sub_ff_stage5[17]) ?
		lv_inexact__h57844 :
		_theResult_____3_snd_fst__h58617) ;
  assign _theResult_____3_snd_snd_snd__h171077 =
	     inst_dpfm_add_sub_ff_stage5[15] ?
	       lv_final_output__h171078 :
	       _theResult_____3_snd_snd__h171134 ;
  assign _theResult_____3_snd_snd_snd__h57970 =
	     inst_spfm_add_sub_ff_stage5[14] ?
	       lv_final_output__h57971 :
	       _theResult_____3_snd_snd__h58027 ;
  assign _theResult_____4__h12045 =
	     IF_inst_spfpu_divider_rg_stage3_71_BITS_4_TO_2_ETC___d316 ?
	       lv_rounded_quotient___1__h12403 :
	       lv_rounded_quotient__h12044 ;
  assign _theResult_____4__h76408 =
	     IF_inst_dpfpu_divider_rg_stage3_679_BITS_4_TO__ETC___d1724 ?
	       lv_rounded_quotient___1__h76766 :
	       lv_rounded_quotient__h76407 ;
  assign _theResult_____4_snd_fst__h102347 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__382_BIT_5_ETC___d2399 ?
	       exponent2__h102128 :
	       exponent3__h102119 ;
  assign _theResult_____4_snd_fst__h26041 =
	     IF_inst_spfm_add_sub_ff_stage2_read__42_BIT_5__ETC___d759 ?
	       exponent2__h25822 :
	       exponent3__h25813 ;
  assign _theResult_____5__h170953 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__165_BITS__ETC___d3229 ?
	       lv_rounded_mantissa___1__h171637 :
	       IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208[159:106] ;
  assign _theResult_____5__h57846 =
	     IF_inst_spfm_add_sub_ff_stage5_read__177_BITS__ETC___d1241 ?
	       lv_rounded_mantissa___1__h58530 :
	       IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220[72:48] ;
  assign _theResult_____6__h170952 =
	     !inst_dpfm_add_sub_ff_stage5[183] &&
	     !inst_dpfm_add_sub_ff_stage5[182] &&
	     !_0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3185 &&
	     lv_inexact__h170951 ||
	     IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_BI_ETC___d3302 ;
  assign _theResult_____6__h57845 =
	     !inst_spfm_add_sub_ff_stage5[95] &&
	     !inst_spfm_add_sub_ff_stage5[94] &&
	     !_0_CONCAT_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1197 &&
	     lv_inexact__h57844 ||
	     IF_IF_inst_spfm_add_sub_ff_stage5_read__177_BI_ETC___d1314 ;
  assign _theResult_____6_fst__h148079 =
	     (!inst_dpfm_add_sub_ff_stage2[4] ||
	      !inst_dpfm_add_sub_ff_stage2[14]) &&
	     inst_dpfm_add_sub_ff_stage2[1] ;
  assign _theResult_____6_fst__h47152 =
	     (!inst_spfm_add_sub_ff_stage2[4] ||
	      !inst_spfm_add_sub_ff_stage2[14]) &&
	     inst_spfm_add_sub_ff_stage2[1] ;
  assign _theResult_____6_snd_snd__h148082 =
	     (inst_dpfm_add_sub_ff_stage2[4] &&
	      inst_dpfm_add_sub_ff_stage2[14]) ?
	       lv_result_is_infinity___1__h148083 :
	       ((inst_dpfm_add_sub_ff_stage2[4] ||
		 inst_dpfm_add_sub_ff_stage2[14]) ?
		  lv_result_is_infinity___1__h148145 :
		  2'd0) ;
  assign _theResult_____6_snd_snd__h47155 =
	     (inst_spfm_add_sub_ff_stage2[4] &&
	      inst_spfm_add_sub_ff_stage2[14]) ?
	       lv_result_is_infinity___1__h47156 :
	       ((inst_spfm_add_sub_ff_stage2[4] ||
		 inst_spfm_add_sub_ff_stage2[14]) ?
		  lv_result_is_infinity___1__h47218 :
		  2'd0) ;
  assign _theResult_____6_snd_snd_snd__h148129 =
	     (inst_dpfm_add_sub_ff_stage2[16] &&
	      inst_dpfm_add_sub_ff_stage2[5]) ?
	       (inst_dpfm_add_sub_ff_stage2[11] ?
		  lv_result_is_zero___1__h148182 :
		  IF_inst_dpfm_add_sub_ff_stage2_read__382_BITS__ETC___d2798) :
	       2'd0 ;
  assign _theResult_____6_snd_snd_snd__h47202 =
	     (inst_spfm_add_sub_ff_stage2[16] &&
	      inst_spfm_add_sub_ff_stage2[5]) ?
	       (inst_spfm_add_sub_ff_stage2[11] ?
		  lv_result_is_zero___1__h47255 :
		  IF_inst_spfm_add_sub_ff_stage2_read__42_BITS_9_ETC___d984) :
	       2'd0 ;
  assign _theResult____h102118 =
	     (!inst_dpfm_add_sub_ff_stage2[14] &&
	      !inst_dpfm_add_sub_ff_stage2_read__382_BIT_15_4_ETC___d2407 &&
	      !inst_dpfm_add_sub_ff_stage2[16]) ?
	       mantissa3___1__h121838 :
	       160'd0 ;
  assign _theResult____h12042 =
	     inst_spfpu_divider_rg_stage3[50:23] != 28'd0 ||
	     inst_spfpu_divider_rg_stage3[51] ||
	     inst_spfpu_divider_rg_stage3[6] ;
  assign _theResult____h13729 =
	     inst_spfpu_sqrt_rg_inter_stage[57] ?
	       lv_remainder__h13836 :
	       lv_remainder__h13926 ;
  assign _theResult____h148339 =
	     inst_dpfm_add_sub_ff_stage4[348] ?
	       sub_mantissa__h148338 :
	       add_mantissa__h148335 ;
  assign _theResult____h179813 =
	     (!inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
	      inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q23[31]) ?
	       ~inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[35:4] + 32'd1 :
	       inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[35:4] ;
  assign _theResult____h179825 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5130[5:0] !=
	     6'd0 ;
  assign _theResult____h184853 =
	     (!inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
	      inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q24[63]) ?
	       ~inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[67:4] + 64'd1 :
	       inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[67:4] ;
  assign _theResult____h184865 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5006[37:0] !=
	     38'd0 ;
  assign _theResult____h194396 =
	     lv_sign__h194392 ? inp32___1__h200863 : ff_input_D_OUT[176:145] ;
  assign _theResult____h194409 =
	     sign__h205112 ?
	       ~ff_input_D_OUT[208:145] + 64'd1 :
	       ff_input_D_OUT[208:145] ;
  assign _theResult____h197671 =
	     (setCanonicalNaN_reswget_BITS_95_TO_64__q42[30:23] <
	      setCanonicalNaN_reswget_BITS_63_TO_32__q43[30:23]) ?
	       2'b01 :
	       ((setCanonicalNaN_reswget_BITS_95_TO_64__q42[30:23] ==
		 setCanonicalNaN_reswget_BITS_63_TO_32__q43[30:23]) ?
		  ((setCanonicalNaN_reswget_BITS_95_TO_64__q42[22:0] <
		    setCanonicalNaN_reswget_BITS_63_TO_32__q43[22:0]) ?
		     2'b01 :
		     ((setCanonicalNaN_reswget_BITS_95_TO_64__q42[22:0] ==
		       setCanonicalNaN_reswget_BITS_63_TO_32__q43[22:0]) ?
			2'b11 :
			2'b10)) :
		  2'b10) ;
  assign _theResult____h199524 =
	     (ff_input_D_OUT[207:197] < ff_input_D_OUT[143:133]) ?
	       2'b01 :
	       ((ff_input_D_OUT[207:197] == ff_input_D_OUT[143:133]) ?
		  ((ff_input_D_OUT[196:145] < ff_input_D_OUT[132:81]) ?
		     2'b01 :
		     ((ff_input_D_OUT[196:145] == ff_input_D_OUT[132:81]) ?
			2'b11 :
			2'b10)) :
		  2'b10) ;
  assign _theResult____h205114 =
	     IF_NOT_ff_input_first__319_BIT_1_544_558_AND_f_ETC___d3692[8:0] !=
	     9'd0 ;
  assign _theResult____h25812 =
	     (!inst_spfm_add_sub_ff_stage2[14] &&
	      !inst_spfm_add_sub_ff_stage2_read__42_BIT_15_65_ETC___d767 &&
	      !inst_spfm_add_sub_ff_stage2[16]) ?
	       mantissa3___1__h35034 :
	       73'd0 ;
  assign _theResult____h47412 =
	     inst_spfm_add_sub_ff_stage4[171] ?
	       sub_mantissa__h47411 :
	       add_mantissa__h47408 ;
  assign _theResult____h76405 =
	     inst_dpfpu_divider_rg_stage3[82:26] != 57'd0 ||
	     inst_dpfpu_divider_rg_stage3[83] ||
	     inst_dpfpu_divider_rg_stage3[6] ;
  assign _theResult____h78091 =
	     inst_dpfpu_sqrt_rg_inter_stage[115] ?
	       lv_remainder__h78198 :
	       lv_remainder__h78288 ;
  assign _theResult___fst__h11828 =
	     inst_spfpu_divider_int_div_wr_final_out_wget[26] ?
	       inst_spfpu_divider_int_div_wr_final_out_wget[26:0] :
	       _theResult___fst__h11832 ;
  assign _theResult___fst__h11832 =
	     INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d194 ?
	       lv_quotient_shiftL_expo__h6099 :
	       lv_quotient_shiftL_zerosMSB__h6101 ;
  assign _theResult___fst__h171265 =
	     inst_dpfm_add_sub_ff_stage5[182] ?
	       inst_dpfm_add_sub_ff_stage5[196:184] :
	       _theResult___fst__h171269 ;
  assign _theResult___fst__h171269 =
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3185 ?
	       resultant_exponent_sub_zerosMSB__h170933 :
	       13'd0 ;
  assign _theResult___fst__h216132 =
	     ff_input_D_OUT[2] ?
	       _theResult___fst__h216310 :
	       _theResult___fst__h216142 ;
  assign _theResult___fst__h216142 =
	     ff_input_D_OUT[1] ?
	       _theResult___fst__h216249 :
	       _theResult___fst__h216189 ;
  assign _theResult___fst__h216189 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215893) ?
	       getMant32_res_wget[68:46] :
	       _theResult___fst__h216230 ;
  assign _theResult___fst__h216230 =
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3850 ?
	       _1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC___d3868[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___fst__h216249 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215893) ?
	       getMant32_res_wget[68:46] :
	       _theResult___fst__h216291 ;
  assign _theResult___fst__h216291 =
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3848 ?
	       _1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC___d3868[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___fst__h216310 =
	     ff_input_D_OUT[1] ?
	       _theResult___fst__h216398 :
	       _theResult___fst__h216338 ;
  assign _theResult___fst__h216338 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215893) ?
	       getMant32_res_wget[68:46] :
	       _theResult___fst__h216380 ;
  assign _theResult___fst__h216380 =
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3845 ?
	       _1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC___d3868[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___fst__h216398 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215893) ?
	       getMant32_res_wget[68:46] :
	       _theResult___fst__h216440 ;
  assign _theResult___fst__h216440 =
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3843 ?
	       _1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC___d3868[22:0] :
	       getMant32_res_wget[68:46] ;
  assign _theResult___fst__h216838 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
	     ff_input_D_OUT[1] &&
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d4164 ||
	     lv_invalid__h215893 ;
  assign _theResult___fst__h216959 =
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ||
	     getExp32_res_wget[23:16] != 8'd158 ||
	     getMant32_res_wget[68:46] != 23'd0 ;
  assign _theResult___fst__h217029 =
	     !IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3848 ||
	     lv_invalid__h215893 ;
  assign _theResult___fst__h217103 =
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ||
	     getExp32_res_wget[23:16] != 8'd190 ||
	     getMant32_res_wget[68:46] != 23'd0 ;
  assign _theResult___fst__h217174 =
	     !IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3843 ||
	     lv_invalid__h215893 ;
  assign _theResult___fst__h218635 =
	     ff_input_D_OUT[2] ?
	       _theResult___fst__h218813 :
	       _theResult___fst__h218645 ;
  assign _theResult___fst__h218645 =
	     ff_input_D_OUT[1] ?
	       _theResult___fst__h218752 :
	       _theResult___fst__h218692 ;
  assign _theResult___fst__h218692 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218392) ?
	       getMant64_res_wget[155:104] :
	       _theResult___fst__h218733 ;
  assign _theResult___fst__h218733 =
	     _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4020 ?
	       _1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC___d4037[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___fst__h218752 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218392) ?
	       getMant64_res_wget[155:104] :
	       _theResult___fst__h218794 ;
  assign _theResult___fst__h218794 =
	     _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4018 ?
	       _1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC___d4037[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___fst__h218813 =
	     ff_input_D_OUT[1] ?
	       _theResult___fst__h218901 :
	       _theResult___fst__h218841 ;
  assign _theResult___fst__h218841 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218392) ?
	       getMant64_res_wget[155:104] :
	       _theResult___fst__h218883 ;
  assign _theResult___fst__h218883 =
	     _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4015 ?
	       _1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC___d4037[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___fst__h218901 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218392) ?
	       getMant64_res_wget[155:104] :
	       _theResult___fst__h218943 ;
  assign _theResult___fst__h218943 =
	     _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4013 ?
	       _1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC___d4037[51:0] :
	       getMant64_res_wget[155:104] ;
  assign _theResult___fst__h219341 =
	     ff_input_D_OUT[208] && ff_input_D_OUT[1] &&
	     _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4200 ||
	     lv_invalid__h218392 ;
  assign _theResult___fst__h219460 =
	     !ff_input_D_OUT[208] || x__h218516[10:0] != 11'd31 ||
	     getMant64_res_wget[155:104] != 52'd0 ;
  assign _theResult___fst__h219530 =
	     !_0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4018 ||
	     lv_invalid__h218392 ;
  assign _theResult___fst__h219604 =
	     !ff_input_D_OUT[208] || x__h218516[10:0] != 11'd63 ||
	     getMant64_res_wget[155:104] != 52'd0 ;
  assign _theResult___fst__h219675 =
	     !_0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4013 ||
	     lv_invalid__h218392 ;
  assign _theResult___fst__h21995 =
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d473 ?
	       _theResult_____1_fst__h22039 :
	       lv_product_exponent_inc_shift__h21987 ;
  assign _theResult___fst__h231333 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[1]) ?
	       _theResult___fst__h231341 :
	       quiet_nan_two__h230907 ;
  assign _theResult___fst__h231341 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[3] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[3]) &&
	     quiet_nan_two__h230907 ;
  assign _theResult___fst__h232785 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[1]) ?
	       _theResult___fst__h232793 :
	       quiet_nan_two__h232363 ;
  assign _theResult___fst__h232793 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[3] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[3]) &&
	     quiet_nan_two__h232363 ;
  assign _theResult___fst__h58158 =
	     inst_spfm_add_sub_ff_stage5[94] ?
	       inst_spfm_add_sub_ff_stage5[105:96] :
	       _theResult___fst__h58162 ;
  assign _theResult___fst__h58162 =
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1197 ?
	       resultant_exponent_sub_zerosMSB__h57826 :
	       10'd0 ;
  assign _theResult___fst__h6087 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 ?
	       27'd1 :
	       _theResult___fst__h6106 ;
  assign _theResult___fst__h6106 =
	     _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134 ?
	       _theResult___fst__h11828 :
	       lv_quotient___1__h6123 ;
  assign _theResult___fst__h64505 =
	     inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1453 ?
	       56'd1 :
	       _theResult___fst__h64524 ;
  assign _theResult___fst__h64524 =
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1455 ?
	       _theResult___fst__h76191 :
	       lv_quotient___1__h64541 ;
  assign _theResult___fst__h76191 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget[55] ?
	       inst_dpfpu_divider_int_div_wr_final_out_wget[55:0] :
	       _theResult___fst__h76195 ;
  assign _theResult___fst__h76195 =
	     INV_1_MINUS_inst_dpfpu_divider_rg_stage2_449_B_ETC___d1573 ?
	       lv_quotient_shiftL_expo__h64517 :
	       lv_quotient_shiftL_zerosMSB__h64519 ;
  assign _theResult___fst__h94415 =
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1881 ?
	       _theResult_____1_fst__h94459 :
	       lv_product_exponent_inc_shift__h94407 ;
  assign _theResult___snd__h216956 =
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3850 ?
	       64'd0 :
	       _theResult___snd__h216960 ;
  assign _theResult___snd__h216960 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ?
	       64'hFFFFFFFF80000000 :
	       64'h000000007FFFFFFF ;
  assign _theResult___snd__h217030 =
	     (IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3848 ||
	      setCanonicalNaN_reswget_BITS_95_TO_64__q42[31]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___snd__h217100 =
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3845 ?
	       64'd0 :
	       _theResult___snd__h217104 ;
  assign _theResult___snd__h217104 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ?
	       64'h8000000000000000 :
	       64'h7FFFFFFFFFFFFFFF ;
  assign _theResult___snd__h217175 =
	     (IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3843 ||
	      setCanonicalNaN_reswget_BITS_95_TO_64__q42[31]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___snd__h219457 =
	     _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4020 ?
	       64'd0 :
	       _theResult___snd__h219461 ;
  assign _theResult___snd__h219461 =
	     ff_input_D_OUT[208] ?
	       64'hFFFFFFFF80000000 :
	       64'h000000007FFFFFFF ;
  assign _theResult___snd__h219531 =
	     (_0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4018 ||
	      ff_input_D_OUT[208]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___snd__h219601 =
	     _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4015 ?
	       64'd0 :
	       _theResult___snd__h219605 ;
  assign _theResult___snd__h219605 =
	     ff_input_D_OUT[208] ?
	       64'h8000000000000000 :
	       64'h7FFFFFFFFFFFFFFF ;
  assign _theResult___snd__h219676 =
	     (_0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4013 ||
	      ff_input_D_OUT[208]) ?
	       64'd0 :
	       64'hFFFFFFFFFFFFFFFF ;
  assign _theResult___snd_final_result__h194417 =
	     ff_input_D_OUT[2] ?
	       wr_final_out_final_result__h194415 :
	       res__h194401 ;
  assign _theResult___snd_fst__h11912 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 ?
	       _theResult___snd_fst__h11922 :
	       inst_spfpu_divider_rg_stage2[18:9] ;
  assign _theResult___snd_fst__h11922 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 ?
	       10'd0 :
	       _theResult___snd_fst__h11930 ;
  assign _theResult___snd_fst__h11930 =
	     _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134 ?
	       _theResult___snd_fst__h11940 :
	       lv_exponent_inc_shift__h6097 ;
  assign _theResult___snd_fst__h11940 =
	     inst_spfpu_divider_int_div_wr_final_out_wget[26] ?
	       inst_spfpu_divider_rg_stage2[18:9] :
	       _theResult___snd_fst__h11942 ;
  assign _theResult___snd_fst__h11942 =
	     INV_1_MINUS_inst_spfpu_divider_rg_stage2_28_BI_ETC___d194 ?
	       lv_exponent_sub_shift__h6100 :
	       lv_exponent_sub_zerosMSB__h6102 ;
  assign _theResult___snd_fst__h171482 =
	     inst_dpfm_add_sub_ff_stage5[182] ?
	       inst_dpfm_add_sub_ff_stage5[183:24] :
	       _theResult___snd_fst__h171484 ;
  assign _theResult___snd_fst__h171484 =
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3185 ?
	       resultant_mantissa_norm_zerosMSB__h170932 :
	       resultant_mantissa_norm_expo__h170931 ;
  assign _theResult___snd_fst__h216096 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[4] ||
	      IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832[7] &&
	      !IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3837) ?
	       _theResult___fst__h216838 :
	       _theResult___snd_fst__h216134 ;
  assign _theResult___snd_fst__h216134 =
	     ff_input_D_OUT[2] ?
	       _theResult___snd_fst__h216312 :
	       _theResult___snd_fst__h216144 ;
  assign _theResult___snd_fst__h216144 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_fst__h216251 :
	       _theResult___snd_fst__h216191 ;
  assign _theResult___snd_fst__h216191 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215893 ||
	      IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3850) ?
	       lv_invalid__h215893 :
	       _theResult___fst__h216959 ;
  assign _theResult___snd_fst__h216251 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215893 ||
	      IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3848) ?
	       lv_invalid__h215893 :
	       _theResult___fst__h217029 ;
  assign _theResult___snd_fst__h216312 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_fst__h216400 :
	       _theResult___snd_fst__h216340 ;
  assign _theResult___snd_fst__h216340 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215893 ||
	      IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3845) ?
	       lv_invalid__h215893 :
	       _theResult___fst__h217103 ;
  assign _theResult___snd_fst__h216400 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215893 ||
	      IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3843) ?
	       lv_invalid__h215893 :
	       _theResult___fst__h217174 ;
  assign _theResult___snd_fst__h218599 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[4] ||
	      x__h218516[10] &&
	      !IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d4006) ?
	       _theResult___fst__h219341 :
	       _theResult___snd_fst__h218637 ;
  assign _theResult___snd_fst__h218637 =
	     ff_input_D_OUT[2] ?
	       _theResult___snd_fst__h218815 :
	       _theResult___snd_fst__h218647 ;
  assign _theResult___snd_fst__h218647 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_fst__h218754 :
	       _theResult___snd_fst__h218694 ;
  assign _theResult___snd_fst__h218694 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218392 ||
	      _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4020) ?
	       lv_invalid__h218392 :
	       _theResult___fst__h219460 ;
  assign _theResult___snd_fst__h218754 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218392 ||
	      _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4018) ?
	       lv_invalid__h218392 :
	       _theResult___fst__h219530 ;
  assign _theResult___snd_fst__h218815 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_fst__h218903 :
	       _theResult___snd_fst__h218843 ;
  assign _theResult___snd_fst__h218843 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218392 ||
	      _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4015) ?
	       lv_invalid__h218392 :
	       _theResult___fst__h219604 ;
  assign _theResult___snd_fst__h218903 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218392 ||
	      _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4013) ?
	       lv_invalid__h218392 :
	       _theResult___fst__h219675 ;
  assign _theResult___snd_fst__h22080 =
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d473 ?
	       _theResult_____1_snd__h22040 :
	       lv_product_mantissa___1__h22026 ;
  assign _theResult___snd_fst__h229175 =
	     (ff_input_D_OUT[5:3] == 3'b010 && ff_input_D_OUT[208]) ?
	       32'h80000001 :
	       ((ff_input_D_OUT[5:3] == 3'b011 && !ff_input_D_OUT[208]) ?
		  32'd1 :
		  { ff_input_D_OUT[208], 31'b0 }) ;
  assign _theResult___snd_fst__h58375 =
	     inst_spfm_add_sub_ff_stage5[94] ?
	       inst_spfm_add_sub_ff_stage5[95:23] :
	       _theResult___snd_fst__h58377 ;
  assign _theResult___snd_fst__h58377 =
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1197 ?
	       resultant_mantissa_norm_zerosMSB__h57825 :
	       resultant_mantissa_norm_expo__h57824 ;
  assign _theResult___snd_fst__h76275 =
	     inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1452 ?
	       _theResult___snd_fst__h76285 :
	       inst_dpfpu_divider_rg_stage2[21:9] ;
  assign _theResult___snd_fst__h76285 =
	     inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1453 ?
	       13'd0 :
	       _theResult___snd_fst__h76293 ;
  assign _theResult___snd_fst__h76293 =
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1455 ?
	       _theResult___snd_fst__h76303 :
	       lv_exponent_inc_shift__h64515 ;
  assign _theResult___snd_fst__h76303 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget[55] ?
	       inst_dpfpu_divider_rg_stage2[21:9] :
	       _theResult___snd_fst__h76305 ;
  assign _theResult___snd_fst__h76305 =
	     INV_1_MINUS_inst_dpfpu_divider_rg_stage2_449_B_ETC___d1573 ?
	       lv_exponent_sub_shift__h64518 :
	       lv_exponent_sub_zerosMSB__h64520 ;
  assign _theResult___snd_fst__h94500 =
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1881 ?
	       _theResult_____1_snd__h94460 :
	       lv_product_mantissa___1__h94446 ;
  assign _theResult___snd_snd__h216841 =
	     (!setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
	      ff_input_D_OUT[5:3] == 3'b011) ?
	       64'd1 :
	       ((ff_input_D_OUT[5:3] == 3'b010 &&
		 setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
		 !ff_input_D_OUT[1]) ?
		  64'hFFFFFFFFFFFFFFFF :
		  IF_IF_getExp32_res_whas__828_THEN_getExp32_res_ETC___d3895) ;
  assign _theResult___snd_snd__h219344 =
	     (!ff_input_D_OUT[208] && ff_input_D_OUT[5:3] == 3'b011) ?
	       64'd1 :
	       ((ff_input_D_OUT[5:3] == 3'b010 && ff_input_D_OUT[208] &&
		 !ff_input_D_OUT[1]) ?
		  64'hFFFFFFFFFFFFFFFF :
		  IF_0b0_CONCAT_IF_getExp64_res_whas__996_THEN_g_ETC___d4063) ;
  assign _theResult___snd_snd_snd_fst__h216891 =
	     ff_input_D_OUT[2] ?
	       _theResult___snd_snd_snd_fst__h217037 :
	       _theResult___snd_snd_snd_fst__h216893 ;
  assign _theResult___snd_snd_snd_fst__h216893 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_snd_snd_fst__h216974 :
	       _theResult___snd_snd_snd_fst__h216897 ;
  assign _theResult___snd_snd_snd_fst__h216897 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215893) ?
	       final_result___1__h216901 :
	       _theResult___snd_snd_snd_fst__h216925 ;
  assign _theResult___snd_snd_snd_fst__h216925 =
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3850 ?
	       final_result___1__h216238 :
	       _theResult___snd__h216956 ;
  assign _theResult___snd_snd_snd_fst__h216974 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215893) ?
	       final_result___1__h216270 :
	       _theResult___snd_snd_snd_fst__h216999 ;
  assign _theResult___snd_snd_snd_fst__h216999 =
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3848 ?
	       final_result___1__h216238 :
	       _theResult___snd__h217030 ;
  assign _theResult___snd_snd_snd_fst__h217037 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_snd_snd_fst__h217118 :
	       _theResult___snd_snd_snd_fst__h217041 ;
  assign _theResult___snd_snd_snd_fst__h217041 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215893) ?
	       final_result___1__h216359 :
	       _theResult___snd_snd_snd_fst__h217068 ;
  assign _theResult___snd_snd_snd_fst__h217068 =
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3845 ?
	       _1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC___d3868[86:23] :
	       _theResult___snd__h217100 ;
  assign _theResult___snd_snd_snd_fst__h217118 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      lv_invalid__h215893) ?
	       final_result___1__h216270 :
	       _theResult___snd_snd_snd_fst__h217143 ;
  assign _theResult___snd_snd_snd_fst__h217143 =
	     IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3843 ?
	       _1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC___d3868[86:23] :
	       _theResult___snd__h217175 ;
  assign _theResult___snd_snd_snd_fst__h219392 =
	     ff_input_D_OUT[2] ?
	       _theResult___snd_snd_snd_fst__h219538 :
	       _theResult___snd_snd_snd_fst__h219394 ;
  assign _theResult___snd_snd_snd_fst__h219394 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_snd_snd_fst__h219475 :
	       _theResult___snd_snd_snd_fst__h219398 ;
  assign _theResult___snd_snd_snd_fst__h219398 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218392) ?
	       final_result___1__h219402 :
	       _theResult___snd_snd_snd_fst__h219426 ;
  assign _theResult___snd_snd_snd_fst__h219426 =
	     _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4020 ?
	       final_result___1__h218741 :
	       _theResult___snd__h219457 ;
  assign _theResult___snd_snd_snd_fst__h219475 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218392) ?
	       final_result___1__h218773 :
	       _theResult___snd_snd_snd_fst__h219500 ;
  assign _theResult___snd_snd_snd_fst__h219500 =
	     _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4018 ?
	       final_result___1__h218741 :
	       _theResult___snd__h219531 ;
  assign _theResult___snd_snd_snd_fst__h219538 =
	     ff_input_D_OUT[1] ?
	       _theResult___snd_snd_snd_fst__h219619 :
	       _theResult___snd_snd_snd_fst__h219542 ;
  assign _theResult___snd_snd_snd_fst__h219542 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218392) ?
	       final_result___1__h218862 :
	       _theResult___snd_snd_snd_fst__h219569 ;
  assign _theResult___snd_snd_snd_fst__h219569 =
	     _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4015 ?
	       _1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC___d4037[115:52] :
	       _theResult___snd__h219601 ;
  assign _theResult___snd_snd_snd_fst__h219619 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      lv_invalid__h218392) ?
	       final_result___1__h218773 :
	       _theResult___snd_snd_snd_fst__h219644 ;
  assign _theResult___snd_snd_snd_fst__h219644 =
	     _0b0_CONCAT_IF_getExp64_res_whas__996_THEN_getE_ETC___d4013 ?
	       _1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC___d4037[115:52] :
	       _theResult___snd__h219676 ;
  assign _theResult___snd_snd_snd_snd_fst__h216835 =
	     (condFlags32_reswget_BITS_14_TO_10__q53[4] ||
	      IF_getExp32_res_whas__828_THEN_getExp32_res_wg_ETC___d3832[7] &&
	      !IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3837) ?
	       _theResult___snd_snd__h216841 :
	       _theResult___snd_snd_snd_fst__h216891 ;
  assign _theResult___snd_snd_snd_snd_fst__h219338 =
	     (condFlags64_reswget_BITS_14_TO_10__q33[4] ||
	      x__h218516[10] &&
	      !IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d4006) ?
	       _theResult___snd_snd__h219344 :
	       _theResult___snd_snd_snd_fst__h219392 ;
  assign add_mantissa__h148335 =
	     inst_dpfm_add_sub_ff_stage4[332:173] +
	     inst_dpfm_add_sub_ff_stage4[172:13] ;
  assign add_mantissa__h47408 =
	     inst_spfm_add_sub_ff_stage4[158:86] +
	     inst_spfm_add_sub_ff_stage4[85:13] ;
  assign and_sign__h197440 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &
	     setCanonicalNaN_reswget_BITS_63_TO_32__q43[31] ;
  assign and_sign__h199319 = ff_input_D_OUT[208] & ff_input_D_OUT[144] ;
  assign condFlags32_argwget_BITS_30_TO_8__q52 = condFlags32_arg_wget[30:8] ;
  assign condFlags32_argwget_BITS_61_TO_39__q51 =
	     condFlags32_arg_wget[61:39] ;
  assign condFlags32_argwget_BITS_92_TO_70__q50 =
	     condFlags32_arg_wget[92:70] ;
  assign condFlags32_reswget_BITS_14_TO_10__q53 =
	     condFlags32_res_wget[14:10] ;
  assign condFlags32_reswget_BITS_9_TO_5__q54 = condFlags32_res_wget[9:5] ;
  assign condFlags64_argwget_BITS_125_TO_74__q31 =
	     condFlags64_arg_wget[125:74] ;
  assign condFlags64_argwget_BITS_188_TO_137__q30 =
	     condFlags64_arg_wget[188:137] ;
  assign condFlags64_argwget_BITS_62_TO_11__q32 =
	     condFlags64_arg_wget[62:11] ;
  assign condFlags64_reswget_BITS_14_TO_10__q33 =
	     condFlags64_res_wget[14:10] ;
  assign condFlags64_reswget_BITS_9_TO_5__q34 = condFlags64_res_wget[9:5] ;
  assign ex_overflow__h170943 =
	     !IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3191 ;
  assign ex_overflow__h57836 =
	     !IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1203 ;
  assign exception__h228529 =
	     IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4310 ?
	       5'd3 :
	       5'd0 ;
  assign exp1__h234888 = exp1_temp__h230911 - { 5'd0, x__h234950 } ;
  assign exp1__h243116 = exp1_temp__h232367 - { 7'd0, x__h243178 } ;
  assign exp1_temp__h230911 = { 2'b0, getExp32_res_wget[23:16] } ;
  assign exp1_temp__h232367 = { 2'b0, getExp64_res_wget[32:22] } ;
  assign exp2__h234889 = exp2_temp__h230912 - { 5'd0, x__h238340 } ;
  assign exp2__h243117 = exp2_temp__h232368 - { 7'd0, x__h250599 } ;
  assign exp2_temp__h230912 = { 2'b0, getExp32_res_wget[15:8] } ;
  assign exp2_temp__h232368 = { 2'b0, getExp64_res_wget[21:11] } ;
  assign expo3_zero__h102116 = inst_dpfm_add_sub_ff_stage2[80:70] != 11'd0 ;
  assign expo3_zero__h25810 = inst_spfm_add_sub_ff_stage2[48:41] != 8'd0 ;
  assign expo___1__h229201 = expo__h228531 + 8'd1 ;
  assign expo__h179815 = 8'd158 - { 3'd0, x__h179975[4:0] } ;
  assign expo__h184855 = 8'd190 - { 2'd0, x__h185033[5:0] } ;
  assign expo__h194399 = 11'd1054 - { 6'd0, x__h200483[4:0] } ;
  assign expo__h194412 = 11'd1086 - { 5'd0, x__h205213[5:0] } ;
  assign expo__h223495 = { 3'd0, getExp32_res_wget[23:16] } + 11'd896 ;
  assign expo__h223554 = 11'd896 - { 6'd0, x__h223559 } ;
  assign expo__h228531 =
	     (IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4310 ||
	      IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4312) ?
	       8'd0 :
	       x__h228416[7:0] ;
  assign exponent2__h102128 =
	     inst_dpfm_add_sub_ff_stage2[5] ?
	       13'd0 :
	       inst_dpfm_add_sub_ff_stage2[201:189] ;
  assign exponent2__h25822 =
	     inst_spfm_add_sub_ff_stage2[5] ?
	       10'd0 :
	       inst_spfm_add_sub_ff_stage2[108:99] ;
  assign exponent3__h102107 = { 2'b0, inst_dpfm_add_sub_ff_stage2[80:70] } ;
  assign exponent3__h102119 =
	     exponent3__h102107 + { 12'd0, inst_dpfm_add_sub_ff_stage2[17] } ;
  assign exponent3__h25801 = { 2'b0, inst_spfm_add_sub_ff_stage2[48:41] } ;
  assign exponent3__h25813 =
	     exponent3__h25801 + { 9'd0, inst_spfm_add_sub_ff_stage2[17] } ;
  assign exponent___1__h260373 = exponent__h259730 + 9'd1 ;
  assign exponent___1__h269375 = lv_exp__h218402 + 12'd1 ;
  assign exponent__h259730 = { 1'b0, getExp32_res_wget[23:16] } ;
  assign exponent_difference__h102142 =
	     lv_minuend__h102138 - _theResult_____4_snd_fst__h102347 ;
  assign exponent_difference__h25836 =
	     lv_minuend__h25832 - _theResult_____4_snd_fst__h26041 ;
  assign ff_inputD_OUT_BITS_176_TO_145__q1 = ff_input_D_OUT[176:145] ;
  assign ff_input_first__319_BITS_12_TO_8_320_EQ_0b100__ETC___d3345 =
	     ff_input_D_OUT[12:8] == 5'b00100 ||
	     ff_input_D_OUT[12:8] == 5'b11000 ||
	     ff_input_D_OUT[12:8] == 5'b11100 &&
	     ff_input_D_OUT[5:3] == 3'b001 ||
	     ff_input_D_OUT[12:8] == 5'b01000 ||
	     (ff_input_D_OUT[12:6] == 7'b1110000 ||
	      ff_input_D_OUT[12:6] == 7'b1111000 ||
	      ff_input_D_OUT[12:6] == 7'b1110001 ||
	      ff_input_D_OUT[12:6] == 7'b1111001) &&
	     ff_input_D_OUT[5:3] == 3'b0 ;
  assign ff_input_first__319_BITS_12_TO_8_320_EQ_0b10_5_ETC___d4544 =
	     ff_input_D_OUT[12:8] == 5'b00010 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     ff_input_D_OUT[0] ||
	     (ff_input_D_OUT[16:13] == 4'b0 ||
	      ff_input_D_OUT[16:13] == 4'b0001 ||
	      ff_input_D_OUT[16:13] == 4'b0010 ||
	      ff_input_D_OUT[16:13] == 4'b0011) &&
	     ff_input_D_OUT[0] ;
  assign ff_input_first__319_BITS_12_TO_8_320_EQ_0b10_5_ETC___d4730 =
	     ff_input_D_OUT[12:8] == 5'b00010 &&
	     ff_input_D_OUT[16:13] == 4'b0100 &&
	     !ff_input_D_OUT[0] ||
	     (ff_input_D_OUT[16:13] == 4'b0 ||
	      ff_input_D_OUT[16:13] == 4'b0001 ||
	      ff_input_D_OUT[16:13] == 4'b0010 ||
	      ff_input_D_OUT[16:13] == 4'b0011) &&
	     !ff_input_D_OUT[0] ;
  assign ff_input_first__319_BITS_12_TO_8_320_EQ_0b1100_ETC___d4607 =
	     (ff_input_D_OUT[12:8] == 5'b11000 ||
	      ff_input_D_OUT[12:8] == 5'b11100 &&
	      ff_input_D_OUT[5:3] == 3'b001 ||
	      ff_input_D_OUT[12:8] == 5'b01000) &&
	     ff_input_D_OUT[16:13] == 4'b0100 ;
  assign ff_input_first__319_BIT_0_351_AND_NOT_IF_condF_ETC___d5170 =
	     ff_input_D_OUT[0] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[2] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[0] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4309 ;
  assign ff_input_first__319_BIT_208_457_XOR_ff_input_f_ETC___d3820 =
	     ff_input_D_OUT[208] ^ ff_input_D_OUT[144] ;
  assign ff_input_first__319_BIT_2_533_AND_NOT_ff_input_ETC___d3965 =
	     ff_input_D_OUT[2] && !ff_input_D_OUT[1] &&
	     getExp32_res_wget[23:16] == 8'd189 &&
	     final_result__h215913[62:0] == 63'h7FFFFFFFFFFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ;
  assign ff_input_first__319_BIT_2_533_AND_NOT_ff_input_ETC___d4130 =
	     ff_input_D_OUT[2] && !ff_input_D_OUT[1] &&
	     x__h218516[10:0] == 11'd62 &&
	     final_result__h218413[62:0] == 63'h7FFFFFFFFFFFFFFF &&
	     !ff_input_D_OUT[208] ;
  assign ff_input_first__319_BIT_2_533_AND_ff_input_fir_ETC___d3971 =
	     ff_input_D_OUT[2] && ff_input_D_OUT[1] &&
	     getExp32_res_wget[23:16] == 8'd190 &&
	     final_result__h215913 == 64'hFFFFFFFFFFFFFFFF &&
	     !setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ;
  assign ff_input_first__319_BIT_2_533_AND_ff_input_fir_ETC___d4135 =
	     ff_input_D_OUT[2] && ff_input_D_OUT[1] &&
	     x__h218516[10:0] == 11'd63 &&
	     final_result__h218413 == 64'hFFFFFFFFFFFFFFFF &&
	     !ff_input_D_OUT[208] ;
  assign fflags__h14104 = { 4'b0, lv_inexact__h14064 } ;
  assign fflags__h170974 =
	     { !inst_dpfm_add_sub_ff_stage5[10] &&
	       !inst_dpfm_add_sub_ff_stage5[9] &&
	       inst_dpfm_add_sub_ff_stage5[17],
	       1'b0,
	       _theResult_____1_snd_snd_fst__h171829,
	       _theResult_____1_fst__h171801,
	       _theResult_____1_snd_snd_snd__h171830 } ;
  assign fflags__h179830 = { 4'd0, inexact__h179826 } ;
  assign fflags__h184870 = { 4'd0, inexact__h184866 } ;
  assign fflags__h259979 =
	     { condFlags32_reswget_BITS_14_TO_10__q53[0] | y__h259993,
	       4'b0 } ;
  assign fflags__h268981 =
	     { condFlags64_reswget_BITS_14_TO_10__q33[0] | y__h268995,
	       4'b0 } ;
  assign fflags__h57867 =
	     { !inst_spfm_add_sub_ff_stage5[9] &&
	       !inst_spfm_add_sub_ff_stage5[8] &&
	       inst_spfm_add_sub_ff_stage5[16],
	       1'b0,
	       _theResult_____1_snd_snd_fst__h58722,
	       _theResult_____1_fst__h58694,
	       _theResult_____1_snd_snd_snd__h58723 } ;
  assign fflags__h78466 = { 4'b0, lv_inexact__h78426 } ;
  assign final_man__h215905 = { 64'd1, getMant32_res_wget[68:46] } ;
  assign final_man__h218405 = { 64'd1, getMant64_res_wget[155:104] } ;
  assign final_result___1__h216238 =
	     { {32{_1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC__q49[31]}},
	       _1_CONCAT_IF_getMant32_res_whas__861_THEN_getMa_ETC__q49 } ;
  assign final_result___1__h216270 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ?
	       (lv_invalid__h215893 ? 64'hFFFFFFFFFFFFFFFF : 64'd0) :
	       64'hFFFFFFFFFFFFFFFF ;
  assign final_result___1__h216359 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ?
	       (lv_invalid__h215893 ?
		  64'h7FFFFFFFFFFFFFFF :
		  64'h8000000000000000) :
	       64'h7FFFFFFFFFFFFFFF ;
  assign final_result___1__h216901 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ?
	       (lv_invalid__h215893 ?
		  64'h000000007FFFFFFF :
		  64'hFFFFFFFF80000000) :
	       64'h000000007FFFFFFF ;
  assign final_result___1__h217500 =
	     { {32{final_result___217461_BITS_31_TO_0__q56[31]}},
	       final_result___217461_BITS_31_TO_0__q56 } ;
  assign final_result___1__h217530 =
	     { {32{final_result___216520_BITS_31_TO_0__q57[31]}},
	       final_result___216520_BITS_31_TO_0__q57 } ;
  assign final_result___1__h218741 =
	     { {32{_1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC__q29[31]}},
	       _1_CONCAT_IF_getMant64_res_whas__030_THEN_getMa_ETC__q29 } ;
  assign final_result___1__h218773 =
	     ff_input_D_OUT[208] ?
	       (lv_invalid__h218392 ? 64'hFFFFFFFFFFFFFFFF : 64'd0) :
	       64'hFFFFFFFFFFFFFFFF ;
  assign final_result___1__h218862 =
	     ff_input_D_OUT[208] ?
	       (lv_invalid__h218392 ?
		  64'h7FFFFFFFFFFFFFFF :
		  64'h8000000000000000) :
	       64'h7FFFFFFFFFFFFFFF ;
  assign final_result___1__h219402 =
	     ff_input_D_OUT[208] ?
	       (lv_invalid__h218392 ?
		  64'h000000007FFFFFFF :
		  64'hFFFFFFFF80000000) :
	       64'h000000007FFFFFFF ;
  assign final_result___1__h219999 =
	     { {32{final_result___219960_BITS_31_TO_0__q36[31]}},
	       final_result___219960_BITS_31_TO_0__q36 } ;
  assign final_result___1__h220029 =
	     { {32{final_result___219022_BITS_31_TO_0__q37[31]}},
	       final_result___219022_BITS_31_TO_0__q37 } ;
  assign final_result___216520_BITS_31_TO_0__q57 =
	     final_result___2__h216520[31:0] ;
  assign final_result___217461_BITS_31_TO_0__q56 =
	     final_result___2__h217461[31:0] ;
  assign final_result___219022_BITS_31_TO_0__q37 =
	     final_result___2__h219022[31:0] ;
  assign final_result___219960_BITS_31_TO_0__q36 =
	     final_result___2__h219960[31:0] ;
  assign final_result___2__h216520 = ~final_result___3__h216472 + 64'd1 ;
  assign final_result___2__h217461 = final_result__h215913 + 64'd1 ;
  assign final_result___2__h219022 = ~final_result___3__h218975 + 64'd1 ;
  assign final_result___2__h219960 = final_result__h218413 + 64'd1 ;
  assign final_result___3__h216472 =
	     IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3944 ?
	       _theResult_____2_snd__h217249 :
	       final_result__h215913 ;
  assign final_result___3__h218975 =
	     IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d4112 ?
	       _theResult_____2_snd__h219750 :
	       final_result__h218413 ;
  assign final_result__h14069 =
	     { inst_spfpu_sqrt_rg_inter_stage[58],
	       IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__80__ETC__q4[7:0],
	       IF_IF_inst_spfpu_sqrt_rg_inter_stage_read__80__ETC__q5[24:2] } ;
  assign final_result__h215913 =
	     condFlags32_reswget_BITS_14_TO_10__q53[3] ?
	       64'd0 :
	       _theResult___snd_snd_snd_snd_fst__h216835 ;
  assign final_result__h218413 =
	     condFlags64_reswget_BITS_14_TO_10__q33[3] ?
	       64'd0 :
	       _theResult___snd_snd_snd_snd_fst__h219338 ;
  assign final_result__h229340 =
	     { {32{ff_inputD_OUT_BITS_176_TO_145__q1[31]}},
	       ff_inputD_OUT_BITS_176_TO_145__q1 } ;
  assign final_result__h229363 = { 32'hFFFFFFFF, ff_input_D_OUT[176:145] } ;
  assign final_result__h260180 = { ff_input_D_OUT[176], 31'd0 } ;
  assign final_result__h269182 = { ff_input_D_OUT[208], 63'd0 } ;
  assign final_result__h78431 =
	     { inst_dpfpu_sqrt_rg_inter_stage[116],
	       IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_ETC__q6[10:0],
	       IF_IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_ETC__q7[53:2] } ;
  assign fman___1__h229198 = fman__h228865 + 24'd1 ;
  assign fman__h228865 =
	     { 1'd0,
	       IF_IF_getExp64_res_whas__996_THEN_getExp64_res_ETC___d4320[48:26] } ;
  assign getMant32_argwget_BITS_31_TO_0__q47 = getMant32_arg_wget[31:0] ;
  assign getMant32_argwget_BITS_63_TO_32__q46 = getMant32_arg_wget[63:32] ;
  assign getMant32_argwget_BITS_95_TO_64__q45 = getMant32_arg_wget[95:64] ;
  assign getMant32_reswget_BITS_45_TO_23__q55 = getMant32_res_wget[45:23] ;
  assign getMant32_reswget_BITS_68_TO_46__q48 = getMant32_res_wget[68:46] ;
  assign getMant64_argwget_BITS_127_TO_64__q26 = getMant64_arg_wget[127:64] ;
  assign getMant64_argwget_BITS_191_TO_128__q25 =
	     getMant64_arg_wget[191:128] ;
  assign getMant64_argwget_BITS_63_TO_0__q27 = getMant64_arg_wget[63:0] ;
  assign getMant64_reswget_BITS_103_TO_52__q35 = getMant64_res_wget[103:52] ;
  assign getMant64_reswget_BITS_155_TO_104__q28 =
	     getMant64_res_wget[155:104] ;
  assign inexact__h179826 = x__h179844 | _theResult____h179825 ;
  assign inexact__h184866 = x__h184884 | _theResult____h184865 ;
  assign inexact__h205115 = x__h205133 | _theResult____h205114 ;
  assign inp32___1__h200863 = ~ff_input_D_OUT[176:145] + 32'd1 ;
  assign inst_dpfm_add_sub_ff_input_register_read__867__ETC___d1871 =
	     inst_dpfm_add_sub_ff_input_register[94:82] - 13'd1023 ;
  assign inst_dpfm_add_sub_ff_input_register_read__867__ETC___d1872 =
	     (inst_dpfm_add_sub_ff_input_register_read__867__ETC___d1871 ^
	      13'h1000) <=
	     13'd5119 ;
  assign inst_dpfm_add_sub_ff_stage2_read__382_BIT_15_4_ETC___d2407 =
	     inst_dpfm_add_sub_ff_stage2[15] |
	     inst_dpfm_add_sub_ff_stage2[13] ;
  assign inst_dpfm_add_sub_ff_stage5_read__165_BIT_15_1_ETC___d3292 =
	     inst_dpfm_add_sub_ff_stage5[15] ||
	     (inst_dpfm_add_sub_ff_stage5[183] ||
	      inst_dpfm_add_sub_ff_stage5[182] ||
	      _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3185 ||
	      !lv_inexact__h170951) &&
	     IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_BI_ETC___d3286 ||
	     !IF_IF_IF_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3253[52] ||
	     inst_dpfm_add_sub_ff_stage5[22:20] == 3'b011 ;
  assign inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16 =
	     inst_dpfpu_divider_int_div_wfn_divide_step_arg_wget[171:2] ;
  assign inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q17 =
	     { inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[112:0],
	       1'd0 } +
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[169:114],
	       57'd0 } ;
  assign inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q18 =
	     { inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[112:0],
	       1'd0 } -
	     { 1'b0,
	       inst_dpfpu_divider_int_div_wfn_divide_step_arg_ETC__q16[169:114],
	       57'd0 } ;
  assign inst_dpfpu_divider_int_div_wr_final_out_wget___ETC___d1578 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget[55:0] >>
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1454 ;
  assign inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1451 =
	     inst_dpfpu_divider_rg_stage2[21:9] - 13'd1023 ;
  assign inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1452 =
	     (inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1451 ^
	      13'h1000) <=
	     13'd5120 ;
  assign inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1453 =
	     (inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1451 ^
	      13'h1000) <
	     13'd3020 ;
  assign inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q24 =
	     inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[67:4] ;
  assign inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q23 =
	     inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[35:4] ;
  assign inst_spfm_add_sub_ff_input_register_read__59_B_ETC___d463 =
	     inst_spfm_add_sub_ff_input_register[59:50] - 10'd127 ;
  assign inst_spfm_add_sub_ff_input_register_read__59_B_ETC___d464 =
	     (inst_spfm_add_sub_ff_input_register_read__59_B_ETC___d463 ^
	      10'h200) <=
	     10'd639 ;
  assign inst_spfm_add_sub_ff_stage2_read__42_BIT_15_65_ETC___d767 =
	     inst_spfm_add_sub_ff_stage2[15] |
	     inst_spfm_add_sub_ff_stage2[13] ;
  assign inst_spfm_add_sub_ff_stage5_read__177_BIT_14_1_ETC___d1304 =
	     inst_spfm_add_sub_ff_stage5[14] ||
	     (inst_spfm_add_sub_ff_stage5[95] ||
	      inst_spfm_add_sub_ff_stage5[94] ||
	      _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1197 ||
	      !lv_inexact__h57844) &&
	     IF_IF_inst_spfm_add_sub_ff_stage5_read__177_BI_ETC___d1298 ||
	     !IF_IF_IF_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1265[23] ||
	     inst_spfm_add_sub_ff_stage5[21:19] == 3'b011 ;
  assign inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q10 =
	     { inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[54:0],
	       1'd0 } +
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[82:56],
	       28'd0 } ;
  assign inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q11 =
	     { inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[54:0],
	       1'd0 } -
	     { 1'b0,
	       inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9[82:56],
	       28'd0 } ;
  assign inst_spfpu_divider_int_div_wfn_divide_step_arg_ETC__q9 =
	     inst_spfpu_divider_int_div_wfn_divide_step_arg_wget[84:2] ;
  assign inst_spfpu_divider_int_div_wr_final_out_wget___ETC___d199 =
	     inst_spfpu_divider_int_div_wr_final_out_wget[26:0] >>
	     _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 ;
  assign inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d130 =
	     inst_spfpu_divider_rg_stage2[18:9] - 10'd127 ;
  assign inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 =
	     (inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d130 ^
	      10'h200) <=
	     10'd640 ;
  assign inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 =
	     (inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d130 ^
	      10'h200) <
	     10'd361 ;
  assign local_expo___1__h184681 = expo__h179815 + 8'd1 ;
  assign local_expo___1__h194220 = expo__h184855 + 8'd1 ;
  assign local_expo___1__h214390 = expo__h194412 + 11'd1 ;
  assign lsb_zeros__h21985 =
	     lv_product_mantissa__h21981[0] ?
	       6'd0 :
	       (lv_product_mantissa__h21981[1] ?
		  6'd1 :
		  (lv_product_mantissa__h21981[2] ?
		     6'd2 :
		     (lv_product_mantissa__h21981[3] ?
			6'd3 :
			(lv_product_mantissa__h21981[4] ?
			   6'd4 :
			   (lv_product_mantissa__h21981[5] ?
			      6'd5 :
			      (lv_product_mantissa__h21981[6] ?
				 6'd6 :
				 (lv_product_mantissa__h21981[7] ?
				    6'd7 :
				    (lv_product_mantissa__h21981[8] ?
				       6'd8 :
				       (lv_product_mantissa__h21981[9] ?
					  6'd9 :
					  (lv_product_mantissa__h21981[10] ?
					     6'd10 :
					     (lv_product_mantissa__h21981[11] ?
						6'd11 :
						(lv_product_mantissa__h21981[12] ?
						   6'd12 :
						   (lv_product_mantissa__h21981[13] ?
						      6'd13 :
						      (lv_product_mantissa__h21981[14] ?
							 6'd14 :
							 (lv_product_mantissa__h21981[15] ?
							    6'd15 :
							    (lv_product_mantissa__h21981[16] ?
							       6'd16 :
							       (lv_product_mantissa__h21981[17] ?
								  6'd17 :
								  (lv_product_mantissa__h21981[18] ?
								     6'd18 :
								     (lv_product_mantissa__h21981[19] ?
									6'd19 :
									(lv_product_mantissa__h21981[20] ?
									   6'd20 :
									   (lv_product_mantissa__h21981[21] ?
									      6'd21 :
									      (lv_product_mantissa__h21981[22] ?
										 6'd22 :
										 (lv_product_mantissa__h21981[23] ?
										    6'd23 :
										    (lv_product_mantissa__h21981[24] ?
										       6'd24 :
										       (lv_product_mantissa__h21981[25] ?
											  6'd25 :
											  (lv_product_mantissa__h21981[26] ?
											     6'd26 :
											     (lv_product_mantissa__h21981[27] ?
												6'd27 :
												(lv_product_mantissa__h21981[28] ?
												   6'd28 :
												   (lv_product_mantissa__h21981[29] ?
												      6'd29 :
												      (lv_product_mantissa__h21981[30] ?
													 6'd30 :
													 (lv_product_mantissa__h21981[31] ?
													    6'd31 :
													    (lv_product_mantissa__h21981[32] ?
													       6'd32 :
													       (lv_product_mantissa__h21981[33] ?
														  6'd33 :
														  (lv_product_mantissa__h21981[34] ?
														     6'd34 :
														     (lv_product_mantissa__h21981[35] ?
															6'd35 :
															(lv_product_mantissa__h21981[36] ?
															   6'd36 :
															   (lv_product_mantissa__h21981[37] ?
															      6'd37 :
															      (lv_product_mantissa__h21981[38] ?
																 6'd38 :
																 (lv_product_mantissa__h21981[39] ?
																    6'd39 :
																    (lv_product_mantissa__h21981[40] ?
																       6'd40 :
																       (lv_product_mantissa__h21981[41] ?
																	  6'd41 :
																	  (lv_product_mantissa__h21981[42] ?
																	     6'd42 :
																	     (lv_product_mantissa__h21981[43] ?
																		6'd43 :
																		(lv_product_mantissa__h21981[44] ?
																		   6'd44 :
																		   (lv_product_mantissa__h21981[45] ?
																		      6'd45 :
																		      (lv_product_mantissa__h21981[46] ?
																			 6'd46 :
																			 (lv_product_mantissa__h21981[47] ?
																			    6'd47 :
																			    (lv_product_mantissa__h21981[48] ?
																			       6'd48 :
																			       6'd49)))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lsb_zeros__h6095 =
	     inst_spfpu_divider_int_div_wr_final_out_wget[0] ?
	       5'd0 :
	       (inst_spfpu_divider_int_div_wr_final_out_wget[1] ?
		  5'd1 :
		  (inst_spfpu_divider_int_div_wr_final_out_wget[2] ?
		     5'd2 :
		     (inst_spfpu_divider_int_div_wr_final_out_wget[3] ?
			5'd3 :
			(inst_spfpu_divider_int_div_wr_final_out_wget[4] ?
			   5'd4 :
			   (inst_spfpu_divider_int_div_wr_final_out_wget[5] ?
			      5'd5 :
			      (inst_spfpu_divider_int_div_wr_final_out_wget[6] ?
				 5'd6 :
				 (inst_spfpu_divider_int_div_wr_final_out_wget[7] ?
				    5'd7 :
				    (inst_spfpu_divider_int_div_wr_final_out_wget[8] ?
				       5'd8 :
				       (inst_spfpu_divider_int_div_wr_final_out_wget[9] ?
					  5'd9 :
					  (inst_spfpu_divider_int_div_wr_final_out_wget[10] ?
					     5'd10 :
					     (inst_spfpu_divider_int_div_wr_final_out_wget[11] ?
						5'd11 :
						(inst_spfpu_divider_int_div_wr_final_out_wget[12] ?
						   5'd12 :
						   (inst_spfpu_divider_int_div_wr_final_out_wget[13] ?
						      5'd13 :
						      (inst_spfpu_divider_int_div_wr_final_out_wget[14] ?
							 5'd14 :
							 (inst_spfpu_divider_int_div_wr_final_out_wget[15] ?
							    5'd15 :
							    (inst_spfpu_divider_int_div_wr_final_out_wget[16] ?
							       5'd16 :
							       (inst_spfpu_divider_int_div_wr_final_out_wget[17] ?
								  5'd17 :
								  (inst_spfpu_divider_int_div_wr_final_out_wget[18] ?
								     5'd18 :
								     (inst_spfpu_divider_int_div_wr_final_out_wget[19] ?
									5'd19 :
									(inst_spfpu_divider_int_div_wr_final_out_wget[20] ?
									   5'd20 :
									   (inst_spfpu_divider_int_div_wr_final_out_wget[21] ?
									      5'd21 :
									      (inst_spfpu_divider_int_div_wr_final_out_wget[22] ?
										 5'd22 :
										 (inst_spfpu_divider_int_div_wr_final_out_wget[23] ?
										    5'd23 :
										    (inst_spfpu_divider_int_div_wr_final_out_wget[24] ?
										       5'd24 :
										       (inst_spfpu_divider_int_div_wr_final_out_wget[25] ?
											  5'd25 :
											  (inst_spfpu_divider_int_div_wr_final_out_wget[26] ?
											     5'd26 :
											     5'd27)))))))))))))))))))))))))) ;
  assign lsb_zeros__h64513 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget[0] ?
	       6'd0 :
	       (inst_dpfpu_divider_int_div_wr_final_out_wget[1] ?
		  6'd1 :
		  (inst_dpfpu_divider_int_div_wr_final_out_wget[2] ?
		     6'd2 :
		     (inst_dpfpu_divider_int_div_wr_final_out_wget[3] ?
			6'd3 :
			(inst_dpfpu_divider_int_div_wr_final_out_wget[4] ?
			   6'd4 :
			   (inst_dpfpu_divider_int_div_wr_final_out_wget[5] ?
			      6'd5 :
			      (inst_dpfpu_divider_int_div_wr_final_out_wget[6] ?
				 6'd6 :
				 (inst_dpfpu_divider_int_div_wr_final_out_wget[7] ?
				    6'd7 :
				    (inst_dpfpu_divider_int_div_wr_final_out_wget[8] ?
				       6'd8 :
				       (inst_dpfpu_divider_int_div_wr_final_out_wget[9] ?
					  6'd9 :
					  (inst_dpfpu_divider_int_div_wr_final_out_wget[10] ?
					     6'd10 :
					     (inst_dpfpu_divider_int_div_wr_final_out_wget[11] ?
						6'd11 :
						(inst_dpfpu_divider_int_div_wr_final_out_wget[12] ?
						   6'd12 :
						   (inst_dpfpu_divider_int_div_wr_final_out_wget[13] ?
						      6'd13 :
						      (inst_dpfpu_divider_int_div_wr_final_out_wget[14] ?
							 6'd14 :
							 (inst_dpfpu_divider_int_div_wr_final_out_wget[15] ?
							    6'd15 :
							    (inst_dpfpu_divider_int_div_wr_final_out_wget[16] ?
							       6'd16 :
							       (inst_dpfpu_divider_int_div_wr_final_out_wget[17] ?
								  6'd17 :
								  (inst_dpfpu_divider_int_div_wr_final_out_wget[18] ?
								     6'd18 :
								     (inst_dpfpu_divider_int_div_wr_final_out_wget[19] ?
									6'd19 :
									(inst_dpfpu_divider_int_div_wr_final_out_wget[20] ?
									   6'd20 :
									   (inst_dpfpu_divider_int_div_wr_final_out_wget[21] ?
									      6'd21 :
									      (inst_dpfpu_divider_int_div_wr_final_out_wget[22] ?
										 6'd22 :
										 (inst_dpfpu_divider_int_div_wr_final_out_wget[23] ?
										    6'd23 :
										    (inst_dpfpu_divider_int_div_wr_final_out_wget[24] ?
										       6'd24 :
										       (inst_dpfpu_divider_int_div_wr_final_out_wget[25] ?
											  6'd25 :
											  (inst_dpfpu_divider_int_div_wr_final_out_wget[26] ?
											     6'd26 :
											     (inst_dpfpu_divider_int_div_wr_final_out_wget[27] ?
												6'd27 :
												(inst_dpfpu_divider_int_div_wr_final_out_wget[28] ?
												   6'd28 :
												   (inst_dpfpu_divider_int_div_wr_final_out_wget[29] ?
												      6'd29 :
												      (inst_dpfpu_divider_int_div_wr_final_out_wget[30] ?
													 6'd30 :
													 (inst_dpfpu_divider_int_div_wr_final_out_wget[31] ?
													    6'd31 :
													    (inst_dpfpu_divider_int_div_wr_final_out_wget[32] ?
													       6'd32 :
													       (inst_dpfpu_divider_int_div_wr_final_out_wget[33] ?
														  6'd33 :
														  (inst_dpfpu_divider_int_div_wr_final_out_wget[34] ?
														     6'd34 :
														     (inst_dpfpu_divider_int_div_wr_final_out_wget[35] ?
															6'd35 :
															(inst_dpfpu_divider_int_div_wr_final_out_wget[36] ?
															   6'd36 :
															   (inst_dpfpu_divider_int_div_wr_final_out_wget[37] ?
															      6'd37 :
															      (inst_dpfpu_divider_int_div_wr_final_out_wget[38] ?
																 6'd38 :
																 (inst_dpfpu_divider_int_div_wr_final_out_wget[39] ?
																    6'd39 :
																    (inst_dpfpu_divider_int_div_wr_final_out_wget[40] ?
																       6'd40 :
																       (inst_dpfpu_divider_int_div_wr_final_out_wget[41] ?
																	  6'd41 :
																	  (inst_dpfpu_divider_int_div_wr_final_out_wget[42] ?
																	     6'd42 :
																	     (inst_dpfpu_divider_int_div_wr_final_out_wget[43] ?
																		6'd43 :
																		(inst_dpfpu_divider_int_div_wr_final_out_wget[44] ?
																		   6'd44 :
																		   (inst_dpfpu_divider_int_div_wr_final_out_wget[45] ?
																		      6'd45 :
																		      (inst_dpfpu_divider_int_div_wr_final_out_wget[46] ?
																			 6'd46 :
																			 (inst_dpfpu_divider_int_div_wr_final_out_wget[47] ?
																			    6'd47 :
																			    (inst_dpfpu_divider_int_div_wr_final_out_wget[48] ?
																			       6'd48 :
																			       (inst_dpfpu_divider_int_div_wr_final_out_wget[49] ?
																				  6'd49 :
																				  (inst_dpfpu_divider_int_div_wr_final_out_wget[50] ?
																				     6'd50 :
																				     (inst_dpfpu_divider_int_div_wr_final_out_wget[51] ?
																					6'd51 :
																					(inst_dpfpu_divider_int_div_wr_final_out_wget[52] ?
																					   6'd52 :
																					   (inst_dpfpu_divider_int_div_wr_final_out_wget[53] ?
																					      6'd53 :
																					      (inst_dpfpu_divider_int_div_wr_final_out_wget[54] ?
																						 6'd54 :
																						 (inst_dpfpu_divider_int_div_wr_final_out_wget[55] ?
																						    6'd55 :
																						    6'd56))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lsb_zeros__h94405 =
	     lv_product_mantissa__h94401[0] ?
	       7'd0 :
	       (lv_product_mantissa__h94401[1] ?
		  7'd1 :
		  (lv_product_mantissa__h94401[2] ?
		     7'd2 :
		     (lv_product_mantissa__h94401[3] ?
			7'd3 :
			(lv_product_mantissa__h94401[4] ?
			   7'd4 :
			   (lv_product_mantissa__h94401[5] ?
			      7'd5 :
			      (lv_product_mantissa__h94401[6] ?
				 7'd6 :
				 (lv_product_mantissa__h94401[7] ?
				    7'd7 :
				    (lv_product_mantissa__h94401[8] ?
				       7'd8 :
				       (lv_product_mantissa__h94401[9] ?
					  7'd9 :
					  (lv_product_mantissa__h94401[10] ?
					     7'd10 :
					     (lv_product_mantissa__h94401[11] ?
						7'd11 :
						(lv_product_mantissa__h94401[12] ?
						   7'd12 :
						   (lv_product_mantissa__h94401[13] ?
						      7'd13 :
						      (lv_product_mantissa__h94401[14] ?
							 7'd14 :
							 (lv_product_mantissa__h94401[15] ?
							    7'd15 :
							    (lv_product_mantissa__h94401[16] ?
							       7'd16 :
							       (lv_product_mantissa__h94401[17] ?
								  7'd17 :
								  (lv_product_mantissa__h94401[18] ?
								     7'd18 :
								     (lv_product_mantissa__h94401[19] ?
									7'd19 :
									(lv_product_mantissa__h94401[20] ?
									   7'd20 :
									   (lv_product_mantissa__h94401[21] ?
									      7'd21 :
									      (lv_product_mantissa__h94401[22] ?
										 7'd22 :
										 (lv_product_mantissa__h94401[23] ?
										    7'd23 :
										    (lv_product_mantissa__h94401[24] ?
										       7'd24 :
										       (lv_product_mantissa__h94401[25] ?
											  7'd25 :
											  (lv_product_mantissa__h94401[26] ?
											     7'd26 :
											     (lv_product_mantissa__h94401[27] ?
												7'd27 :
												(lv_product_mantissa__h94401[28] ?
												   7'd28 :
												   (lv_product_mantissa__h94401[29] ?
												      7'd29 :
												      (lv_product_mantissa__h94401[30] ?
													 7'd30 :
													 (lv_product_mantissa__h94401[31] ?
													    7'd31 :
													    (lv_product_mantissa__h94401[32] ?
													       7'd32 :
													       (lv_product_mantissa__h94401[33] ?
														  7'd33 :
														  (lv_product_mantissa__h94401[34] ?
														     7'd34 :
														     (lv_product_mantissa__h94401[35] ?
															7'd35 :
															(lv_product_mantissa__h94401[36] ?
															   7'd36 :
															   (lv_product_mantissa__h94401[37] ?
															      7'd37 :
															      (lv_product_mantissa__h94401[38] ?
																 7'd38 :
																 (lv_product_mantissa__h94401[39] ?
																    7'd39 :
																    (lv_product_mantissa__h94401[40] ?
																       7'd40 :
																       (lv_product_mantissa__h94401[41] ?
																	  7'd41 :
																	  (lv_product_mantissa__h94401[42] ?
																	     7'd42 :
																	     (lv_product_mantissa__h94401[43] ?
																		7'd43 :
																		(lv_product_mantissa__h94401[44] ?
																		   7'd44 :
																		   (lv_product_mantissa__h94401[45] ?
																		      7'd45 :
																		      (lv_product_mantissa__h94401[46] ?
																			 7'd46 :
																			 (lv_product_mantissa__h94401[47] ?
																			    7'd47 :
																			    (lv_product_mantissa__h94401[48] ?
																			       7'd48 :
																			       (lv_product_mantissa__h94401[49] ?
																				  7'd49 :
																				  (lv_product_mantissa__h94401[50] ?
																				     7'd50 :
																				     (lv_product_mantissa__h94401[51] ?
																					7'd51 :
																					(lv_product_mantissa__h94401[52] ?
																					   7'd52 :
																					   (lv_product_mantissa__h94401[53] ?
																					      7'd53 :
																					      (lv_product_mantissa__h94401[54] ?
																						 7'd54 :
																						 (lv_product_mantissa__h94401[55] ?
																						    7'd55 :
																						    (lv_product_mantissa__h94401[56] ?
																						       7'd56 :
																						       (lv_product_mantissa__h94401[57] ?
																							  7'd57 :
																							  (lv_product_mantissa__h94401[58] ?
																							     7'd58 :
																							     (lv_product_mantissa__h94401[59] ?
																								7'd59 :
																								(lv_product_mantissa__h94401[60] ?
																								   7'd60 :
																								   (lv_product_mantissa__h94401[61] ?
																								      7'd61 :
																								      (lv_product_mantissa__h94401[62] ?
																									 7'd62 :
																									 (lv_product_mantissa__h94401[63] ?
																									    7'd63 :
																									    (lv_product_mantissa__h94401[64] ?
																									       7'd64 :
																									       (lv_product_mantissa__h94401[65] ?
																										  7'd65 :
																										  (lv_product_mantissa__h94401[66] ?
																										     7'd66 :
																										     (lv_product_mantissa__h94401[67] ?
																											7'd67 :
																											(lv_product_mantissa__h94401[68] ?
																											   7'd68 :
																											   (lv_product_mantissa__h94401[69] ?
																											      7'd69 :
																											      (lv_product_mantissa__h94401[70] ?
																												 7'd70 :
																												 (lv_product_mantissa__h94401[71] ?
																												    7'd71 :
																												    (lv_product_mantissa__h94401[72] ?
																												       7'd72 :
																												       (lv_product_mantissa__h94401[73] ?
																													  7'd73 :
																													  (lv_product_mantissa__h94401[74] ?
																													     7'd74 :
																													     (lv_product_mantissa__h94401[75] ?
																														7'd75 :
																														(lv_product_mantissa__h94401[76] ?
																														   7'd76 :
																														   (lv_product_mantissa__h94401[77] ?
																														      7'd77 :
																														      (lv_product_mantissa__h94401[78] ?
																															 7'd78 :
																															 (lv_product_mantissa__h94401[79] ?
																															    7'd79 :
																															    (lv_product_mantissa__h94401[80] ?
																															       7'd80 :
																															       (lv_product_mantissa__h94401[81] ?
																																  7'd81 :
																																  (lv_product_mantissa__h94401[82] ?
																																     7'd82 :
																																     (lv_product_mantissa__h94401[83] ?
																																	7'd83 :
																																	(lv_product_mantissa__h94401[84] ?
																																	   7'd84 :
																																	   (lv_product_mantissa__h94401[85] ?
																																	      7'd85 :
																																	      (lv_product_mantissa__h94401[86] ?
																																		 7'd86 :
																																		 (lv_product_mantissa__h94401[87] ?
																																		    7'd87 :
																																		    (lv_product_mantissa__h94401[88] ?
																																		       7'd88 :
																																		       (lv_product_mantissa__h94401[89] ?
																																			  7'd89 :
																																			  (lv_product_mantissa__h94401[90] ?
																																			     7'd90 :
																																			     (lv_product_mantissa__h94401[91] ?
																																				7'd91 :
																																				(lv_product_mantissa__h94401[92] ?
																																				   7'd92 :
																																				   (lv_product_mantissa__h94401[93] ?
																																				      7'd93 :
																																				      (lv_product_mantissa__h94401[94] ?
																																					 7'd94 :
																																					 (lv_product_mantissa__h94401[95] ?
																																					    7'd95 :
																																					    (lv_product_mantissa__h94401[96] ?
																																					       7'd96 :
																																					       (lv_product_mantissa__h94401[97] ?
																																						  7'd97 :
																																						  (lv_product_mantissa__h94401[98] ?
																																						     7'd98 :
																																						     (lv_product_mantissa__h94401[99] ?
																																							7'd99 :
																																							(lv_product_mantissa__h94401[100] ?
																																							   7'd100 :
																																							   (lv_product_mantissa__h94401[101] ?
																																							      7'd101 :
																																							      (lv_product_mantissa__h94401[102] ?
																																								 7'd102 :
																																								 (lv_product_mantissa__h94401[103] ?
																																								    7'd103 :
																																								    (lv_product_mantissa__h94401[104] ?
																																								       7'd104 :
																																								       (lv_product_mantissa__h94401[105] ?
																																									  7'd105 :
																																									  (lv_product_mantissa__h94401[106] ?
																																									     7'd106 :
																																									     7'd107)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lv_compare_result__h197442 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ?
	       (setCanonicalNaN_reswget_BITS_63_TO_32__q43[31] ?
		  { _theResult____h197671[0], _theResult____h197671[1] } :
		  2'b01) :
	       (setCanonicalNaN_reswget_BITS_63_TO_32__q43[31] ?
		  2'b10 :
		  _theResult____h197671) ;
  assign lv_compare_result__h199321 =
	     ff_input_D_OUT[208] ?
	       (ff_input_D_OUT[144] ?
		  { _theResult____h199524[0], _theResult____h199524[1] } :
		  2'b01) :
	       (ff_input_D_OUT[144] ? 2'b10 : _theResult____h199524) ;
  assign lv_exp__h218402 = { 1'b0, getExp64_res_wget[32:22] } ;
  assign lv_exponent___1__h12432 =
	     inst_spfpu_divider_rg_stage3[22:13] + 10'd1 ;
  assign lv_exponent___1__h12519 = lv_exponent__h12047 + 10'd1 ;
  assign lv_exponent___1__h76795 =
	     inst_dpfpu_divider_rg_stage3[25:13] + 13'd1 ;
  assign lv_exponent___1__h76882 = lv_exponent__h76410 + 13'd1 ;
  assign lv_exponent__h12047 =
	     _theResult_____4__h12045[24] ?
	       lv_exponent___1__h12432 :
	       inst_spfpu_divider_rg_stage3[22:13] ;
  assign lv_exponent__h234890 = 10'd127 + y__h234942 ;
  assign lv_exponent__h243118 = 13'd1023 + y__h243170 ;
  assign lv_exponent__h76410 =
	     _theResult_____4__h76408[53] ?
	       lv_exponent___1__h76795 :
	       inst_dpfpu_divider_rg_stage3[25:13] ;
  assign lv_exponent_inc_shift__h6097 =
	     inst_spfpu_divider_rg_stage2[18:9] +
	     _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 ;
  assign lv_exponent_inc_shift__h64515 =
	     inst_dpfpu_divider_rg_stage2[21:9] +
	     _1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1454 ;
  assign lv_exponent_sub_shift__h6100 =
	     inst_spfpu_divider_rg_stage2[18:9] - shift_neg__h6098 ;
  assign lv_exponent_sub_shift__h64518 =
	     inst_dpfpu_divider_rg_stage2[21:9] - shift_neg__h64516 ;
  assign lv_exponent_sub_zerosMSB__h6102 =
	     inst_spfpu_divider_rg_stage2[18:9] - { 5'd0, msb_zeros__h5947 } ;
  assign lv_exponent_sub_zerosMSB__h64520 =
	     inst_dpfpu_divider_rg_stage2[21:9] -
	     { 7'd0, msb_zeros__h64365 } ;
  assign lv_extended_mantissa___1__h14546 =
	     lv_extended_mantissa__h14065 + 27'd4 ;
  assign lv_extended_mantissa___1__h78908 =
	     lv_extended_mantissa__h78427 + 56'd4 ;
  assign lv_extended_mantissa__h14065 = { 1'b0, result_mantissa__h14056 } ;
  assign lv_extended_mantissa__h78427 = { 1'b0, result_mantissa__h78418 } ;
  assign lv_final_output__h12138 =
	     { inst_spfpu_divider_rg_stage3[12], 31'h7F800000 } ;
  assign lv_final_output__h171078 =
	     { inst_dpfm_add_sub_ff_stage5[16], 63'h7FF0000000000000 } ;
  assign lv_final_output__h171135 =
	     { inst_dpfm_add_sub_ff_stage5[14], 63'd0 } ;
  assign lv_final_output__h171185 =
	     { inst_dpfm_add_sub_ff_stage5[19], 63'd0 } ;
  assign lv_final_output__h57971 =
	     { inst_spfm_add_sub_ff_stage5[15], 31'h7F800000 } ;
  assign lv_final_output__h58028 =
	     { inst_spfm_add_sub_ff_stage5[13], 31'd0 } ;
  assign lv_final_output__h58078 =
	     { inst_spfm_add_sub_ff_stage5[18], 31'd0 } ;
  assign lv_final_output__h76501 =
	     { inst_dpfpu_divider_rg_stage3[12], 63'h7FF0000000000000 } ;
  assign lv_inexact1__h215918 = x__h217223 | lv_sticky__h215916 ;
  assign lv_inexact1__h218418 = x__h219724 | lv_sticky__h218416 ;
  assign lv_inexact___1__h216469 =
	     lv_inexact__h215911 | lv_inexact1__h215918 ;
  assign lv_inexact___1__h218972 =
	     lv_inexact__h218411 | lv_inexact1__h218418 ;
  assign lv_inexact__h14064 = x__h14533 | lv_sticky__h14062 ;
  assign lv_inexact__h170951 = x__h171617 | lv_sticky__h170949 ;
  assign lv_inexact__h215911 =
	     !condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	     IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d4243 ;
  assign lv_inexact__h218411 =
	     !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	     IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d4257 ;
  assign lv_inexact__h57844 = x__h58510 | lv_sticky__h57842 ;
  assign lv_inexact__h78426 = x__h78895 | lv_sticky__h78424 ;
  assign lv_invalid___2__h216471 =
	     IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3944 ?
	       _theResult_____2_fst__h217248 :
	       lv_invalid__h215909 ;
  assign lv_invalid___2__h218974 =
	     IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d4112 ?
	       _theResult_____2_fst__h219749 :
	       lv_invalid__h218409 ;
  assign lv_invalid__h215893 =
	     condFlags32_reswget_BITS_14_TO_10__q53[0] |
	     condFlags32_reswget_BITS_14_TO_10__q53[2] ;
  assign lv_invalid__h215909 =
	     condFlags32_reswget_BITS_14_TO_10__q53[3] ?
	       lv_invalid__h215893 :
	       _theResult___snd_fst__h216096 ;
  assign lv_invalid__h215920 =
	     (!condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	      NOT_IF_condFlags32_res_whas__353_THEN_condFlag_ETC___d3854) ?
	       _theResult_____3_fst__h216474 :
	       lv_invalid__h215909 ;
  assign lv_invalid__h218392 =
	     condFlags64_reswget_BITS_14_TO_10__q33[0] |
	     condFlags64_reswget_BITS_14_TO_10__q33[2] ;
  assign lv_invalid__h218409 =
	     condFlags64_reswget_BITS_14_TO_10__q33[3] ?
	       lv_invalid__h218392 :
	       _theResult___snd_fst__h218599 ;
  assign lv_invalid__h218420 =
	     (!condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	      NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d4024) ?
	       _theResult_____3_fst__h218977 :
	       lv_invalid__h218409 ;
  assign lv_leading_zeros__h259735 =
	     IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d5773[1] ?
	       6'd0 :
	       (IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d5773[0] ?
		  6'd1 :
		  (getMant32_reswget_BITS_68_TO_46__q48[22] ?
		     6'd2 :
		     (getMant32_reswget_BITS_68_TO_46__q48[21] ?
			6'd3 :
			(getMant32_reswget_BITS_68_TO_46__q48[20] ?
			   6'd4 :
			   (getMant32_reswget_BITS_68_TO_46__q48[19] ?
			      6'd5 :
			      (getMant32_reswget_BITS_68_TO_46__q48[18] ?
				 6'd6 :
				 (getMant32_reswget_BITS_68_TO_46__q48[17] ?
				    6'd7 :
				    (getMant32_reswget_BITS_68_TO_46__q48[16] ?
				       6'd8 :
				       (getMant32_reswget_BITS_68_TO_46__q48[15] ?
					  6'd9 :
					  (getMant32_reswget_BITS_68_TO_46__q48[14] ?
					     6'd10 :
					     (getMant32_reswget_BITS_68_TO_46__q48[13] ?
						6'd11 :
						(getMant32_reswget_BITS_68_TO_46__q48[12] ?
						   6'd12 :
						   (getMant32_reswget_BITS_68_TO_46__q48[11] ?
						      6'd13 :
						      (getMant32_reswget_BITS_68_TO_46__q48[10] ?
							 6'd14 :
							 (getMant32_reswget_BITS_68_TO_46__q48[9] ?
							    6'd15 :
							    (getMant32_reswget_BITS_68_TO_46__q48[8] ?
							       6'd16 :
							       (getMant32_reswget_BITS_68_TO_46__q48[7] ?
								  6'd17 :
								  (getMant32_reswget_BITS_68_TO_46__q48[6] ?
								     6'd18 :
								     (getMant32_reswget_BITS_68_TO_46__q48[5] ?
									6'd19 :
									(getMant32_reswget_BITS_68_TO_46__q48[4] ?
									   6'd20 :
									   (getMant32_reswget_BITS_68_TO_46__q48[3] ?
									      6'd21 :
									      (getMant32_reswget_BITS_68_TO_46__q48[2] ?
										 6'd22 :
										 (getMant32_reswget_BITS_68_TO_46__q48[1] ?
										    6'd23 :
										    (getMant32_reswget_BITS_68_TO_46__q48[0] ?
										       6'd24 :
										       6'd52)))))))))))))))))))))))) ;
  assign lv_leading_zeros__h268738 =
	     IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d5868[1] ?
	       7'd0 :
	       (IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d5868[0] ?
		  7'd1 :
		  (getMant64_reswget_BITS_155_TO_104__q28[51] ?
		     7'd2 :
		     (getMant64_reswget_BITS_155_TO_104__q28[50] ?
			7'd3 :
			(getMant64_reswget_BITS_155_TO_104__q28[49] ?
			   7'd4 :
			   (getMant64_reswget_BITS_155_TO_104__q28[48] ?
			      7'd5 :
			      (getMant64_reswget_BITS_155_TO_104__q28[47] ?
				 7'd6 :
				 (getMant64_reswget_BITS_155_TO_104__q28[46] ?
				    7'd7 :
				    (getMant64_reswget_BITS_155_TO_104__q28[45] ?
				       7'd8 :
				       (getMant64_reswget_BITS_155_TO_104__q28[44] ?
					  7'd9 :
					  (getMant64_reswget_BITS_155_TO_104__q28[43] ?
					     7'd10 :
					     (getMant64_reswget_BITS_155_TO_104__q28[42] ?
						7'd11 :
						(getMant64_reswget_BITS_155_TO_104__q28[41] ?
						   7'd12 :
						   (getMant64_reswget_BITS_155_TO_104__q28[40] ?
						      7'd13 :
						      (getMant64_reswget_BITS_155_TO_104__q28[39] ?
							 7'd14 :
							 (getMant64_reswget_BITS_155_TO_104__q28[38] ?
							    7'd15 :
							    (getMant64_reswget_BITS_155_TO_104__q28[37] ?
							       7'd16 :
							       (getMant64_reswget_BITS_155_TO_104__q28[36] ?
								  7'd17 :
								  (getMant64_reswget_BITS_155_TO_104__q28[35] ?
								     7'd18 :
								     (getMant64_reswget_BITS_155_TO_104__q28[34] ?
									7'd19 :
									(getMant64_reswget_BITS_155_TO_104__q28[33] ?
									   7'd20 :
									   (getMant64_reswget_BITS_155_TO_104__q28[32] ?
									      7'd21 :
									      (getMant64_reswget_BITS_155_TO_104__q28[31] ?
										 7'd22 :
										 (getMant64_reswget_BITS_155_TO_104__q28[30] ?
										    7'd23 :
										    (getMant64_reswget_BITS_155_TO_104__q28[29] ?
										       7'd24 :
										       (getMant64_reswget_BITS_155_TO_104__q28[28] ?
											  7'd25 :
											  (getMant64_reswget_BITS_155_TO_104__q28[27] ?
											     7'd26 :
											     (getMant64_reswget_BITS_155_TO_104__q28[26] ?
												7'd27 :
												(getMant64_reswget_BITS_155_TO_104__q28[25] ?
												   7'd28 :
												   (getMant64_reswget_BITS_155_TO_104__q28[24] ?
												      7'd29 :
												      (getMant64_reswget_BITS_155_TO_104__q28[23] ?
													 7'd30 :
													 (getMant64_reswget_BITS_155_TO_104__q28[22] ?
													    7'd31 :
													    (getMant64_reswget_BITS_155_TO_104__q28[21] ?
													       7'd32 :
													       (getMant64_reswget_BITS_155_TO_104__q28[20] ?
														  7'd33 :
														  (getMant64_reswget_BITS_155_TO_104__q28[19] ?
														     7'd34 :
														     (getMant64_reswget_BITS_155_TO_104__q28[18] ?
															7'd35 :
															(getMant64_reswget_BITS_155_TO_104__q28[17] ?
															   7'd36 :
															   (getMant64_reswget_BITS_155_TO_104__q28[16] ?
															      7'd37 :
															      (getMant64_reswget_BITS_155_TO_104__q28[15] ?
																 7'd38 :
																 (getMant64_reswget_BITS_155_TO_104__q28[14] ?
																    7'd39 :
																    (getMant64_reswget_BITS_155_TO_104__q28[13] ?
																       7'd40 :
																       (getMant64_reswget_BITS_155_TO_104__q28[12] ?
																	  7'd41 :
																	  (getMant64_reswget_BITS_155_TO_104__q28[11] ?
																	     7'd42 :
																	     (getMant64_reswget_BITS_155_TO_104__q28[10] ?
																		7'd43 :
																		(getMant64_reswget_BITS_155_TO_104__q28[9] ?
																		   7'd44 :
																		   (getMant64_reswget_BITS_155_TO_104__q28[8] ?
																		      7'd45 :
																		      (getMant64_reswget_BITS_155_TO_104__q28[7] ?
																			 7'd46 :
																			 (getMant64_reswget_BITS_155_TO_104__q28[6] ?
																			    7'd47 :
																			    (getMant64_reswget_BITS_155_TO_104__q28[5] ?
																			       7'd48 :
																			       (getMant64_reswget_BITS_155_TO_104__q28[4] ?
																				  7'd49 :
																				  (getMant64_reswget_BITS_155_TO_104__q28[3] ?
																				     7'd50 :
																				     (getMant64_reswget_BITS_155_TO_104__q28[2] ?
																					7'd51 :
																					(getMant64_reswget_BITS_155_TO_104__q28[1] ?
																					   7'd52 :
																					   (getMant64_reswget_BITS_155_TO_104__q28[0] ?
																					      7'd53 :
																					      7'd110))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lv_man___1__h184656 = lv_man__h179828 + 25'd1 ;
  assign lv_man___1__h194195 = lv_man__h184868 + 25'd1 ;
  assign lv_man___1__h214367 = lv_man__h205117 + 54'd1 ;
  assign lv_man__h179828 =
	     { 2'b0,
	       IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5130[30:8] } ;
  assign lv_man__h184868 =
	     { 2'b0,
	       IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5006[62:40] } ;
  assign lv_man__h205117 =
	     { 2'b0,
	       IF_NOT_ff_input_first__319_BIT_1_544_558_AND_f_ETC___d3692[62:11] } ;
  assign lv_minuend__h102138 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__382_BIT_5_ETC___d2399 ?
	       exponent3__h102119 :
	       exponent2__h102128 ;
  assign lv_minuend__h25832 =
	     IF_inst_spfm_add_sub_ff_stage2_read__42_BIT_5__ETC___d759 ?
	       exponent3__h25813 :
	       exponent2__h25822 ;
  assign lv_op1_subnormal__h230902 =
	     condFlags32_reswget_BITS_14_TO_10__q53[4] |
	     condFlags32_reswget_BITS_14_TO_10__q53[3] ;
  assign lv_op1_subnormal__h232358 =
	     condFlags64_reswget_BITS_14_TO_10__q33[4] |
	     condFlags64_reswget_BITS_14_TO_10__q33[3] ;
  assign lv_op2_Nan__h197438 =
	     condFlags32_reswget_BITS_9_TO_5__q54[2] |
	     condFlags32_reswget_BITS_9_TO_5__q54[0] ;
  assign lv_op2_Nan__h199317 =
	     condFlags64_reswget_BITS_9_TO_5__q34[2] |
	     condFlags64_reswget_BITS_9_TO_5__q34[0] ;
  assign lv_op2_subnormal__h230903 =
	     condFlags32_reswget_BITS_9_TO_5__q54[4] |
	     condFlags32_reswget_BITS_9_TO_5__q54[3] ;
  assign lv_op2_subnormal__h232359 =
	     condFlags64_reswget_BITS_9_TO_5__q34[4] |
	     condFlags64_reswget_BITS_9_TO_5__q34[3] ;
  assign lv_product_exponent___1__h22012 =
	     inst_spfm_add_sub_ff_input_register[59:50] + 10'd1 ;
  assign lv_product_exponent___1__h94432 =
	     inst_dpfm_add_sub_ff_input_register[94:82] + 13'd1 ;
  assign lv_product_exponent__h21979 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       lv_product_exponent___1__h22012 :
	       inst_spfm_add_sub_ff_input_register[59:50] ;
  assign lv_product_exponent__h94399 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       lv_product_exponent___1__h94432 :
	       inst_dpfm_add_sub_ff_input_register[94:82] ;
  assign lv_product_exponent_inc_shift__h21987 =
	     lv_product_exponent__h21979 +
	     _1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d472 ;
  assign lv_product_exponent_inc_shift__h94407 =
	     lv_product_exponent__h94399 +
	     _1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1880 ;
  assign lv_product_exponent_sub_shift__h21990 =
	     lv_product_exponent__h21979 - shift_neg__h21988 ;
  assign lv_product_exponent_sub_shift__h94410 =
	     lv_product_exponent__h94399 - shift_neg__h94408 ;
  assign lv_product_exponent_sub_zerosMSB__h21992 =
	     lv_product_exponent__h21979 - y__h22074 ;
  assign lv_product_exponent_sub_zerosMSB__h94412 =
	     lv_product_exponent__h94399 - y__h94494 ;
  assign lv_product_mantissa___1__h22011 =
	     { 1'd0, inst_spfm_add_sub_ff_input_register[107:60] } ;
  assign lv_product_mantissa___1__h22026 =
	     { IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d594[48:1],
	       IF_inst_spfm_add_sub_ff_input_register_read__5_ETC___d699 } ;
  assign lv_product_mantissa___1__h94431 =
	     { 1'd0, inst_dpfm_add_sub_ff_input_register[200:95] } ;
  assign lv_product_mantissa___1__h94446 =
	     { IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2118[106:1],
	       IF_inst_dpfm_add_sub_ff_input_register_read__8_ETC___d2339 } ;
  assign lv_product_mantissa__h14957 =
	     { inst_spfm_add_sub_ff_input_register[107:60], 1'b0 } ;
  assign lv_product_mantissa__h21981 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       lv_product_mantissa___1__h22011 :
	       lv_product_mantissa__h14957 ;
  assign lv_product_mantissa__h79315 =
	     { inst_dpfm_add_sub_ff_input_register[200:95], 1'b0 } ;
  assign lv_product_mantissa__h94401 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       lv_product_mantissa___1__h94431 :
	       lv_product_mantissa__h79315 ;
  assign lv_product_mantissa_shiftL_expo__h21989 =
	     lv_product_mantissa__h21981 << shift_neg__h21988 ;
  assign lv_product_mantissa_shiftL_expo__h94409 =
	     lv_product_mantissa__h94401 << shift_neg__h94408 ;
  assign lv_product_mantissa_shiftL_zerosMSB__h21991 =
	     lv_product_mantissa__h21981 << x__h22049 ;
  assign lv_product_mantissa_shiftL_zerosMSB__h94411 =
	     lv_product_mantissa__h94401 << x__h94469 ;
  assign lv_quotient___1__h6123 =
	     { inst_spfpu_divider_int_div_wr_final_out_wget___ETC___d199[26:1],
	       lv_sticky___1__h6124 } ;
  assign lv_quotient___1__h64541 =
	     { inst_dpfpu_divider_int_div_wr_final_out_wget___ETC___d1578[55:1],
	       lv_sticky___1__h64542 } ;
  assign lv_quotient_shiftL_expo__h6099 =
	     inst_spfpu_divider_int_div_wr_final_out_wget[26:0] <<
	     shift_neg__h6098 ;
  assign lv_quotient_shiftL_expo__h64517 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget[55:0] <<
	     shift_neg__h64516 ;
  assign lv_quotient_shiftL_zerosMSB__h6101 =
	     inst_spfpu_divider_int_div_wr_final_out_wget[26:0] <<
	     msb_zeros__h5947 ;
  assign lv_quotient_shiftL_zerosMSB__h64519 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget[55:0] <<
	     msb_zeros__h64365 ;
  assign lv_remainder__h13836 =
	     lv_remainder_temp__h13726 + lv_root_temp_1__h13727 ;
  assign lv_remainder__h13926 =
	     lv_remainder_temp__h13726 - lv_root_temp_2__h13728 ;
  assign lv_remainder__h14481 = _theResult____h13729 + lv_root_rem__h14057 ;
  assign lv_remainder__h78198 =
	     lv_remainder_temp__h78088 + lv_root_temp_1__h78089 ;
  assign lv_remainder__h78288 =
	     lv_remainder_temp__h78088 - lv_root_temp_2__h78090 ;
  assign lv_remainder__h78843 = _theResult____h78091 + lv_root_rem__h78419 ;
  assign lv_remainder_temp__h13726 =
	     { inst_spfpu_sqrt_rg_inter_stage[55:29],
	       inst_spfpu_sqrt_rg_inter_stage[145:144] } ;
  assign lv_remainder_temp__h78088 =
	     { inst_dpfpu_sqrt_rg_inter_stage[113:58],
	       inst_dpfpu_sqrt_rg_inter_stage[293:292] } ;
  assign lv_result__h198116 =
	     { or_sign__h197439,
	       setCanonicalNaN_reswget_BITS_63_TO_32__q43[30:0] } ;
  assign lv_result__h198157 =
	     { and_sign__h197440,
	       setCanonicalNaN_reswget_BITS_95_TO_64__q42[30:0] } ;
  assign lv_result__h199963 = { or_sign__h199318, ff_input_D_OUT[143:81] } ;
  assign lv_result__h200004 = { and_sign__h199319, ff_input_D_OUT[207:145] } ;
  assign lv_result_is_infinity___1__h148083 =
	     { sign2__h102104, ~x__h148117 } ;
  assign lv_result_is_infinity___1__h148145 =
	     { x__h148157 | y__h148158, 1'd1 } ;
  assign lv_result_is_infinity___1__h47156 = { sign2__h25798, ~x__h47190 } ;
  assign lv_result_is_infinity___1__h47218 = { x__h47230 | y__h47231, 1'd1 } ;
  assign lv_result_is_zero___1__h148178 = { op_xor_sign3__h102117, 1'b1 } ;
  assign lv_result_is_zero___1__h148182 = { sign2__h102104, 1'd1 } ;
  assign lv_result_is_zero___1__h47251 = { op_xor_sign3__h25811, 1'b1 } ;
  assign lv_result_is_zero___1__h47255 = { sign2__h25798, 1'd1 } ;
  assign lv_root_rem__h14057 = { 2'b0, x__h14029, 1'b1 } ;
  assign lv_root_rem__h78419 = { 2'b0, x__h78391, 1'b1 } ;
  assign lv_root_temp_1__h13727 =
	     { 1'b0, inst_spfpu_sqrt_rg_inter_stage[28:3], 2'd3 } ;
  assign lv_root_temp_1__h78089 =
	     { 1'b0, inst_dpfpu_sqrt_rg_inter_stage[57:3], 2'd3 } ;
  assign lv_root_temp_2__h13728 =
	     { 1'b0, inst_spfpu_sqrt_rg_inter_stage[28:3], 2'd1 } ;
  assign lv_root_temp_2__h78090 =
	     { 1'b0, inst_dpfpu_sqrt_rg_inter_stage[57:3], 2'd1 } ;
  assign lv_round_up___1__h12332 =
	     inst_spfpu_divider_rg_stage3[53] & y__h12344 ;
  assign lv_round_up___1__h12368 = x__h12380 & y__h12381 ;
  assign lv_round_up___1__h171383 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208[105] &
	     y__h171395 ;
  assign lv_round_up___1__h171605 =
	     lv_inexact__h170951 & inst_dpfm_add_sub_ff_stage5[23] ;
  assign lv_round_up___1__h216554 =
	     IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3881[22] &
	     y__h216566 ;
  assign lv_round_up___1__h217211 =
	     lv_inexact1__h215918 &
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ;
  assign lv_round_up___1__h219057 =
	     IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4050[51] &
	     y__h219069 ;
  assign lv_round_up___1__h219712 =
	     lv_inexact1__h218418 & ff_input_D_OUT[208] ;
  assign lv_round_up___1__h228686 =
	     IF_IF_getExp64_res_whas__996_THEN_getExp64_res_ETC___d4320[25] &
	     y__h228698 ;
  assign lv_round_up___1__h228825 = x__h228837 & y__h219737 ;
  assign lv_round_up___1__h58276 =
	     IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220[47] &
	     y__h58288 ;
  assign lv_round_up___1__h58498 =
	     lv_inexact__h57844 & inst_spfm_add_sub_ff_stage5[22] ;
  assign lv_round_up___1__h76695 =
	     inst_dpfpu_divider_rg_stage3[85] & y__h76707 ;
  assign lv_round_up___1__h76731 = x__h76743 & y__h76744 ;
  assign lv_rounded_mantissa___1__h171637 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208[159:106] +
	     54'd1 ;
  assign lv_rounded_mantissa___1__h58530 =
	     IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220[72:48] +
	     25'd1 ;
  assign lv_rounded_mantissa__h171667 =
	     { 1'd0, _theResult_____5__h170953[53:1] } ;
  assign lv_rounded_mantissa__h58560 =
	     { 1'd0, _theResult_____5__h57846[24:1] } ;
  assign lv_rounded_quotient___1__h12403 =
	     lv_rounded_quotient__h12044 + 25'd1 ;
  assign lv_rounded_quotient___1__h76766 =
	     lv_rounded_quotient__h76407 + 54'd1 ;
  assign lv_rounded_quotient__h12044 =
	     { 1'b0, inst_spfpu_divider_rg_stage3[77:54] } ;
  assign lv_rounded_quotient__h12433 =
	     { 1'd0, _theResult_____4__h12045[24:1] } ;
  assign lv_rounded_quotient__h76407 =
	     { 1'b0, inst_dpfpu_divider_rg_stage3[138:86] } ;
  assign lv_rounded_quotient__h76796 =
	     { 1'd0, _theResult_____4__h76408[53:1] } ;
  assign lv_roundup___1__h14127 =
	     inst_spfpu_sqrt_rg_inter_stage[69] & y__h14139 ;
  assign lv_roundup___1__h14509 = lv_inexact__h14064 & y__h14521 ;
  assign lv_roundup___1__h184584 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5130[7] &
	     y__h184596 ;
  assign lv_roundup___1__h184621 = inexact__h179826 & y__h184634 ;
  assign lv_roundup___1__h194123 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5006[39] &
	     y__h194135 ;
  assign lv_roundup___1__h194160 = inexact__h184866 & y__h194173 ;
  assign lv_roundup___1__h214296 =
	     IF_NOT_ff_input_first__319_BIT_1_544_558_AND_f_ETC___d3692[10] &
	     y__h214308 ;
  assign lv_roundup___1__h214332 = inexact__h205115 & y__h214345 ;
  assign lv_roundup___1__h78489 =
	     inst_dpfpu_sqrt_rg_inter_stage[130] & y__h78501 ;
  assign lv_roundup___1__h78871 = lv_inexact__h78426 & y__h78883 ;
  assign lv_sign__h194392 = !ff_input_D_OUT[1] && ff_input_D_OUT[176] ;
  assign lv_sticky___1__h6124 =
	     inst_spfpu_divider_int_div_wr_final_out_wget___ETC___d199[0] |
	     ((_1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 ^
	       10'h200) >
	      ({ 5'd0, lsb_zeros__h6095 } ^ 10'h200) ||
	      inst_spfpu_divider_int_div_wr_final_out_wget[0]) ;
  assign lv_sticky___1__h64542 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget___ETC___d1578[0] |
	     ((_1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1454 ^
	       13'h1000) >
	      ({ 7'd0, lsb_zeros__h64513 } ^ 13'h1000) ||
	      inst_dpfpu_divider_int_div_wr_final_out_wget[0]) ;
  assign lv_sticky__h14062 = x__h14459 != 29'd0 ;
  assign lv_sticky__h170949 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208[103:0] !=
	     104'd0 ;
  assign lv_sticky__h215916 =
	     IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3881[20:0] !=
	     21'd0 ;
  assign lv_sticky__h218416 =
	     IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4050[49:0] !=
	     50'd0 ;
  assign lv_sticky__h228192 =
	     getMant64_reswget_BITS_155_TO_104__q28[26:0] != 27'd0 ;
  assign lv_sticky__h228538 =
	     IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4310 ?
	       lv_sticky__h228192 :
	       y_avValue_snd_snd_snd_snd_snd_snd__h228768 ;
  assign lv_sticky__h57842 =
	     IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220[45:0] !=
	     46'd0 ;
  assign lv_sticky__h78424 = x__h78821 != 58'd0 ;
  assign lv_summed_exponent__h230913 = x__h231092 + y__h231093 ;
  assign lv_summed_exponent__h232369 = x__h232548 + y__h232549 ;
  assign lv_zeros_on_left__h148341 =
	     _theResult____h148339[159] ?
	       8'd0 :
	       (_theResult____h148339[158] ?
		  8'd1 :
		  (_theResult____h148339[157] ?
		     8'd2 :
		     (_theResult____h148339[156] ?
			8'd3 :
			(_theResult____h148339[155] ?
			   8'd4 :
			   (_theResult____h148339[154] ?
			      8'd5 :
			      (_theResult____h148339[153] ?
				 8'd6 :
				 (_theResult____h148339[152] ?
				    8'd7 :
				    (_theResult____h148339[151] ?
				       8'd8 :
				       (_theResult____h148339[150] ?
					  8'd9 :
					  (_theResult____h148339[149] ?
					     8'd10 :
					     (_theResult____h148339[148] ?
						8'd11 :
						(_theResult____h148339[147] ?
						   8'd12 :
						   (_theResult____h148339[146] ?
						      8'd13 :
						      (_theResult____h148339[145] ?
							 8'd14 :
							 (_theResult____h148339[144] ?
							    8'd15 :
							    (_theResult____h148339[143] ?
							       8'd16 :
							       (_theResult____h148339[142] ?
								  8'd17 :
								  (_theResult____h148339[141] ?
								     8'd18 :
								     (_theResult____h148339[140] ?
									8'd19 :
									(_theResult____h148339[139] ?
									   8'd20 :
									   (_theResult____h148339[138] ?
									      8'd21 :
									      (_theResult____h148339[137] ?
										 8'd22 :
										 (_theResult____h148339[136] ?
										    8'd23 :
										    (_theResult____h148339[135] ?
										       8'd24 :
										       (_theResult____h148339[134] ?
											  8'd25 :
											  (_theResult____h148339[133] ?
											     8'd26 :
											     (_theResult____h148339[132] ?
												8'd27 :
												(_theResult____h148339[131] ?
												   8'd28 :
												   (_theResult____h148339[130] ?
												      8'd29 :
												      (_theResult____h148339[129] ?
													 8'd30 :
													 (_theResult____h148339[128] ?
													    8'd31 :
													    (_theResult____h148339[127] ?
													       8'd32 :
													       (_theResult____h148339[126] ?
														  8'd33 :
														  (_theResult____h148339[125] ?
														     8'd34 :
														     (_theResult____h148339[124] ?
															8'd35 :
															(_theResult____h148339[123] ?
															   8'd36 :
															   (_theResult____h148339[122] ?
															      8'd37 :
															      (_theResult____h148339[121] ?
																 8'd38 :
																 (_theResult____h148339[120] ?
																    8'd39 :
																    (_theResult____h148339[119] ?
																       8'd40 :
																       (_theResult____h148339[118] ?
																	  8'd41 :
																	  (_theResult____h148339[117] ?
																	     8'd42 :
																	     (_theResult____h148339[116] ?
																		8'd43 :
																		(_theResult____h148339[115] ?
																		   8'd44 :
																		   (_theResult____h148339[114] ?
																		      8'd45 :
																		      (_theResult____h148339[113] ?
																			 8'd46 :
																			 (_theResult____h148339[112] ?
																			    8'd47 :
																			    (_theResult____h148339[111] ?
																			       8'd48 :
																			       (_theResult____h148339[110] ?
																				  8'd49 :
																				  (_theResult____h148339[109] ?
																				     8'd50 :
																				     (_theResult____h148339[108] ?
																					8'd51 :
																					(_theResult____h148339[107] ?
																					   8'd52 :
																					   (_theResult____h148339[106] ?
																					      8'd53 :
																					      (_theResult____h148339[105] ?
																						 8'd54 :
																						 (_theResult____h148339[104] ?
																						    8'd55 :
																						    (_theResult____h148339[103] ?
																						       8'd56 :
																						       (_theResult____h148339[102] ?
																							  8'd57 :
																							  (_theResult____h148339[101] ?
																							     8'd58 :
																							     (_theResult____h148339[100] ?
																								8'd59 :
																								(_theResult____h148339[99] ?
																								   8'd60 :
																								   (_theResult____h148339[98] ?
																								      8'd61 :
																								      (_theResult____h148339[97] ?
																									 8'd62 :
																									 (_theResult____h148339[96] ?
																									    8'd63 :
																									    (_theResult____h148339[95] ?
																									       8'd64 :
																									       (_theResult____h148339[94] ?
																										  8'd65 :
																										  (_theResult____h148339[93] ?
																										     8'd66 :
																										     (_theResult____h148339[92] ?
																											8'd67 :
																											(_theResult____h148339[91] ?
																											   8'd68 :
																											   (_theResult____h148339[90] ?
																											      8'd69 :
																											      (_theResult____h148339[89] ?
																												 8'd70 :
																												 (_theResult____h148339[88] ?
																												    8'd71 :
																												    (_theResult____h148339[87] ?
																												       8'd72 :
																												       (_theResult____h148339[86] ?
																													  8'd73 :
																													  (_theResult____h148339[85] ?
																													     8'd74 :
																													     (_theResult____h148339[84] ?
																														8'd75 :
																														(_theResult____h148339[83] ?
																														   8'd76 :
																														   (_theResult____h148339[82] ?
																														      8'd77 :
																														      (_theResult____h148339[81] ?
																															 8'd78 :
																															 (_theResult____h148339[80] ?
																															    8'd79 :
																															    (_theResult____h148339[79] ?
																															       8'd80 :
																															       (_theResult____h148339[78] ?
																																  8'd81 :
																																  (_theResult____h148339[77] ?
																																     8'd82 :
																																     (_theResult____h148339[76] ?
																																	8'd83 :
																																	(_theResult____h148339[75] ?
																																	   8'd84 :
																																	   (_theResult____h148339[74] ?
																																	      8'd85 :
																																	      (_theResult____h148339[73] ?
																																		 8'd86 :
																																		 (_theResult____h148339[72] ?
																																		    8'd87 :
																																		    (_theResult____h148339[71] ?
																																		       8'd88 :
																																		       (_theResult____h148339[70] ?
																																			  8'd89 :
																																			  (_theResult____h148339[69] ?
																																			     8'd90 :
																																			     (_theResult____h148339[68] ?
																																				8'd91 :
																																				(_theResult____h148339[67] ?
																																				   8'd92 :
																																				   (_theResult____h148339[66] ?
																																				      8'd93 :
																																				      (_theResult____h148339[65] ?
																																					 8'd94 :
																																					 (_theResult____h148339[64] ?
																																					    8'd95 :
																																					    (_theResult____h148339[63] ?
																																					       8'd96 :
																																					       (_theResult____h148339[62] ?
																																						  8'd97 :
																																						  (_theResult____h148339[61] ?
																																						     8'd98 :
																																						     (_theResult____h148339[60] ?
																																							8'd99 :
																																							(_theResult____h148339[59] ?
																																							   8'd100 :
																																							   (_theResult____h148339[58] ?
																																							      8'd101 :
																																							      (_theResult____h148339[57] ?
																																								 8'd102 :
																																								 (_theResult____h148339[56] ?
																																								    8'd103 :
																																								    (_theResult____h148339[55] ?
																																								       8'd104 :
																																								       (_theResult____h148339[54] ?
																																									  8'd105 :
																																									  (_theResult____h148339[53] ?
																																									     8'd106 :
																																									     (_theResult____h148339[52] ?
																																										8'd107 :
																																										(_theResult____h148339[51] ?
																																										   8'd108 :
																																										   (_theResult____h148339[50] ?
																																										      8'd109 :
																																										      (_theResult____h148339[49] ?
																																											 8'd110 :
																																											 (_theResult____h148339[48] ?
																																											    8'd111 :
																																											    (_theResult____h148339[47] ?
																																											       8'd112 :
																																											       (_theResult____h148339[46] ?
																																												  8'd113 :
																																												  (_theResult____h148339[45] ?
																																												     8'd114 :
																																												     (_theResult____h148339[44] ?
																																													8'd115 :
																																													(_theResult____h148339[43] ?
																																													   8'd116 :
																																													   (_theResult____h148339[42] ?
																																													      8'd117 :
																																													      (_theResult____h148339[41] ?
																																														 8'd118 :
																																														 (_theResult____h148339[40] ?
																																														    8'd119 :
																																														    (_theResult____h148339[39] ?
																																														       8'd120 :
																																														       (_theResult____h148339[38] ?
																																															  8'd121 :
																																															  (_theResult____h148339[37] ?
																																															     8'd122 :
																																															     (_theResult____h148339[36] ?
																																																8'd123 :
																																																(_theResult____h148339[35] ?
																																																   8'd124 :
																																																   (_theResult____h148339[34] ?
																																																      8'd125 :
																																																      (_theResult____h148339[33] ?
																																																	 8'd126 :
																																																	 (_theResult____h148339[32] ?
																																																	    8'd127 :
																																																	    (_theResult____h148339[31] ?
																																																	       8'd128 :
																																																	       (_theResult____h148339[30] ?
																																																		  8'd129 :
																																																		  (_theResult____h148339[29] ?
																																																		     8'd130 :
																																																		     (_theResult____h148339[28] ?
																																																			8'd131 :
																																																			(_theResult____h148339[27] ?
																																																			   8'd132 :
																																																			   (_theResult____h148339[26] ?
																																																			      8'd133 :
																																																			      (_theResult____h148339[25] ?
																																																				 8'd134 :
																																																				 (_theResult____h148339[24] ?
																																																				    8'd135 :
																																																				    (_theResult____h148339[23] ?
																																																				       8'd136 :
																																																				       (_theResult____h148339[22] ?
																																																					  8'd137 :
																																																					  (_theResult____h148339[21] ?
																																																					     8'd138 :
																																																					     (_theResult____h148339[20] ?
																																																						8'd139 :
																																																						(_theResult____h148339[19] ?
																																																						   8'd140 :
																																																						   (_theResult____h148339[18] ?
																																																						      8'd141 :
																																																						      (_theResult____h148339[17] ?
																																																							 8'd142 :
																																																							 (_theResult____h148339[16] ?
																																																							    8'd143 :
																																																							    (_theResult____h148339[15] ?
																																																							       8'd144 :
																																																							       (_theResult____h148339[14] ?
																																																								  8'd145 :
																																																								  (_theResult____h148339[13] ?
																																																								     8'd146 :
																																																								     (_theResult____h148339[12] ?
																																																									8'd147 :
																																																									(_theResult____h148339[11] ?
																																																									   8'd148 :
																																																									   (_theResult____h148339[10] ?
																																																									      8'd149 :
																																																									      (_theResult____h148339[9] ?
																																																										 8'd150 :
																																																										 (_theResult____h148339[8] ?
																																																										    8'd151 :
																																																										    (_theResult____h148339[7] ?
																																																										       8'd152 :
																																																										       (_theResult____h148339[6] ?
																																																											  8'd153 :
																																																											  (_theResult____h148339[5] ?
																																																											     8'd154 :
																																																											     (_theResult____h148339[4] ?
																																																												8'd155 :
																																																												(_theResult____h148339[3] ?
																																																												   8'd156 :
																																																												   (_theResult____h148339[2] ?
																																																												      8'd157 :
																																																												      (_theResult____h148339[1] ?
																																																													 8'd158 :
																																																													 (_theResult____h148339[0] ?
																																																													    8'd159 :
																																																													    8'd160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign lv_zeros_on_left__h47414 =
	     _theResult____h47412[72] ?
	       7'd0 :
	       (_theResult____h47412[71] ?
		  7'd1 :
		  (_theResult____h47412[70] ?
		     7'd2 :
		     (_theResult____h47412[69] ?
			7'd3 :
			(_theResult____h47412[68] ?
			   7'd4 :
			   (_theResult____h47412[67] ?
			      7'd5 :
			      (_theResult____h47412[66] ?
				 7'd6 :
				 (_theResult____h47412[65] ?
				    7'd7 :
				    (_theResult____h47412[64] ?
				       7'd8 :
				       (_theResult____h47412[63] ?
					  7'd9 :
					  (_theResult____h47412[62] ?
					     7'd10 :
					     (_theResult____h47412[61] ?
						7'd11 :
						(_theResult____h47412[60] ?
						   7'd12 :
						   (_theResult____h47412[59] ?
						      7'd13 :
						      (_theResult____h47412[58] ?
							 7'd14 :
							 (_theResult____h47412[57] ?
							    7'd15 :
							    (_theResult____h47412[56] ?
							       7'd16 :
							       (_theResult____h47412[55] ?
								  7'd17 :
								  (_theResult____h47412[54] ?
								     7'd18 :
								     (_theResult____h47412[53] ?
									7'd19 :
									(_theResult____h47412[52] ?
									   7'd20 :
									   (_theResult____h47412[51] ?
									      7'd21 :
									      (_theResult____h47412[50] ?
										 7'd22 :
										 (_theResult____h47412[49] ?
										    7'd23 :
										    (_theResult____h47412[48] ?
										       7'd24 :
										       (_theResult____h47412[47] ?
											  7'd25 :
											  (_theResult____h47412[46] ?
											     7'd26 :
											     (_theResult____h47412[45] ?
												7'd27 :
												(_theResult____h47412[44] ?
												   7'd28 :
												   (_theResult____h47412[43] ?
												      7'd29 :
												      (_theResult____h47412[42] ?
													 7'd30 :
													 (_theResult____h47412[41] ?
													    7'd31 :
													    (_theResult____h47412[40] ?
													       7'd32 :
													       (_theResult____h47412[39] ?
														  7'd33 :
														  (_theResult____h47412[38] ?
														     7'd34 :
														     (_theResult____h47412[37] ?
															7'd35 :
															(_theResult____h47412[36] ?
															   7'd36 :
															   (_theResult____h47412[35] ?
															      7'd37 :
															      (_theResult____h47412[34] ?
																 7'd38 :
																 (_theResult____h47412[33] ?
																    7'd39 :
																    (_theResult____h47412[32] ?
																       7'd40 :
																       (_theResult____h47412[31] ?
																	  7'd41 :
																	  (_theResult____h47412[30] ?
																	     7'd42 :
																	     (_theResult____h47412[29] ?
																		7'd43 :
																		(_theResult____h47412[28] ?
																		   7'd44 :
																		   (_theResult____h47412[27] ?
																		      7'd45 :
																		      (_theResult____h47412[26] ?
																			 7'd46 :
																			 (_theResult____h47412[25] ?
																			    7'd47 :
																			    (_theResult____h47412[24] ?
																			       7'd48 :
																			       (_theResult____h47412[23] ?
																				  7'd49 :
																				  (_theResult____h47412[22] ?
																				     7'd50 :
																				     (_theResult____h47412[21] ?
																					7'd51 :
																					(_theResult____h47412[20] ?
																					   7'd52 :
																					   (_theResult____h47412[19] ?
																					      7'd53 :
																					      (_theResult____h47412[18] ?
																						 7'd54 :
																						 (_theResult____h47412[17] ?
																						    7'd55 :
																						    (_theResult____h47412[16] ?
																						       7'd56 :
																						       (_theResult____h47412[15] ?
																							  7'd57 :
																							  (_theResult____h47412[14] ?
																							     7'd58 :
																							     (_theResult____h47412[13] ?
																								7'd59 :
																								(_theResult____h47412[12] ?
																								   7'd60 :
																								   (_theResult____h47412[11] ?
																								      7'd61 :
																								      (_theResult____h47412[10] ?
																									 7'd62 :
																									 (_theResult____h47412[9] ?
																									    7'd63 :
																									    (_theResult____h47412[8] ?
																									       7'd64 :
																									       (_theResult____h47412[7] ?
																										  7'd65 :
																										  (_theResult____h47412[6] ?
																										     7'd66 :
																										     (_theResult____h47412[5] ?
																											7'd67 :
																											(_theResult____h47412[4] ?
																											   7'd68 :
																											   (_theResult____h47412[3] ?
																											      7'd69 :
																											      (_theResult____h47412[2] ?
																												 7'd70 :
																												 (_theResult____h47412[1] ?
																												    7'd71 :
																												    (_theResult____h47412[0] ?
																												       7'd72 :
																												       7'd73)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign man1__h234880 =
	     { ~condFlags32_reswget_BITS_14_TO_10__q53[4],
	       getMant32_res_wget[68:46] } ;
  assign man1__h243108 =
	     { ~condFlags64_reswget_BITS_14_TO_10__q33[4],
	       getMant64_res_wget[155:104] } ;
  assign man2__h234881 =
	     { ~condFlags32_reswget_BITS_9_TO_5__q54[4],
	       getMant32_res_wget[45:23] } ;
  assign man2__h243109 =
	     { ~condFlags64_reswget_BITS_9_TO_5__q34[4],
	       getMant64_res_wget[103:52] } ;
  assign man__h223556 = { value__h226808[21:0], 30'd0 } ;
  assign man__h228296 =
	     { 1'b1, getMant64_reswget_BITS_155_TO_104__q28[51:27], 23'd0 } >>
	     shiftDist__h228295 ;
  assign man__h228395 =
	     { getMant64_reswget_BITS_155_TO_104__q28[51:27], 24'd0 } ;
  assign mant__h223496 = { getMant32_res_wget[68:46], 29'd0 } ;
  assign mantissa2__h102105 = { inst_dpfm_add_sub_ff_stage2[188:82], 53'd0 } ;
  assign mantissa2__h102127 =
	     inst_dpfm_add_sub_ff_stage2[5] ? 160'd0 : mantissa2__h102105 ;
  assign mantissa2__h102148 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__382_BIT_5_ETC___d2399 ?
	       mantissa_to_shift___1__h102146 :
	       mantissa2__h102127 ;
  assign mantissa2__h25799 = { inst_spfm_add_sub_ff_stage2[98:50], 24'd0 } ;
  assign mantissa2__h25821 =
	     inst_spfm_add_sub_ff_stage2[5] ? 73'd0 : mantissa2__h25799 ;
  assign mantissa2__h25842 =
	     IF_inst_spfm_add_sub_ff_stage2_read__42_BIT_5__ETC___d759 ?
	       mantissa_to_shift___1__h25840 :
	       mantissa2__h25821 ;
  assign mantissa3___1__h121838 =
	     { 1'd0,
	       expo3_zero__h102116,
	       inst_dpfm_add_sub_ff_stage2[69:18],
	       106'd0 } ;
  assign mantissa3___1__h35034 =
	     { 1'd0,
	       expo3_zero__h25810,
	       inst_spfm_add_sub_ff_stage2[40:18],
	       48'd0 } ;
  assign mantissa3__h102149 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__382_BIT_5_ETC___d2399 ?
	       _theResult____h102118 :
	       mantissa_to_shift___1__h102146 ;
  assign mantissa3__h25843 =
	     IF_inst_spfm_add_sub_ff_stage2_read__42_BIT_5__ETC___d759 ?
	       _theResult____h25812 :
	       mantissa_to_shift___1__h25840 ;
  assign mantissa___1__h267693 = { mantissa__h259736[50:0], 1'd0 } ;
  assign mantissa___1__h284815 = { mantissa__h268739[108:0], 1'd0 } ;
  assign mantissa__h13731 = { inst_spfpu_sqrt_rg_inter_stage[143:94], 2'd0 } ;
  assign mantissa__h194400 =
	     { theResult__94396_SL_x00483_BITS_4_TO_0__q3[30:0], 21'd0 } ;
  assign mantissa__h259734 =
	     { IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d5773,
	       getMant32_res_wget[68:46],
	       27'd0 } ;
  assign mantissa__h259736 = mantissa__h259734 << x__h267696 ;
  assign mantissa__h259746 =
	     { IF_IF_IF_condFlags32_res_whas__353_THEN_condFl_ETC___d5810[49:0],
	       2'd0 } ;
  assign mantissa__h268737 =
	     { IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d5868,
	       getMant64_res_wget[155:104],
	       56'd0 } ;
  assign mantissa__h268739 = mantissa__h268737 << x__h284818 ;
  assign mantissa__h268749 =
	     { IF_IF_IF_condFlags64_res_whas__438_THEN_condFl_ETC___d5934[107:0],
	       2'd0 } ;
  assign mantissa__h78093 =
	     { inst_dpfpu_sqrt_rg_inter_stage[291:184], 2'd0 } ;
  assign mantissa_to_shift___1__h102146 =
	     { IF_IF_inst_dpfm_add_sub_ff_stage2_read__382_BI_ETC___d2423[159:1],
	       _0_CONCAT_IF_IF_IF_inst_dpfm_add_sub_ff_stage2__ETC___d2751 } ;
  assign mantissa_to_shift___1__h25840 =
	     { IF_IF_inst_spfm_add_sub_ff_stage2_read__42_BIT_ETC___d783[72:1],
	       _0_CONCAT_IF_IF_IF_inst_spfm_add_sub_ff_stage2__ETC___d937 } ;
  assign mantissa_to_shift__h102141 =
	     IF_inst_dpfm_add_sub_ff_stage2_read__382_BIT_5_ETC___d2399 ?
	       mantissa2__h102127 :
	       _theResult____h102118 ;
  assign mantissa_to_shift__h25835 =
	     IF_inst_spfm_add_sub_ff_stage2_read__42_BIT_5__ETC___d759 ?
	       mantissa2__h25821 :
	       _theResult____h25812 ;
  assign msb_zeros___1__h22014 = msb_zeros__h14976 + 6'd1 ;
  assign msb_zeros___1__h94434 = msb_zeros__h79334 + 7'd1 ;
  assign msb_zeros__h14976 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       6'd0 :
	       (inst_spfm_add_sub_ff_input_register[106] ?
		  6'd1 :
		  (inst_spfm_add_sub_ff_input_register[105] ?
		     6'd2 :
		     (inst_spfm_add_sub_ff_input_register[104] ?
			6'd3 :
			(inst_spfm_add_sub_ff_input_register[103] ?
			   6'd4 :
			   (inst_spfm_add_sub_ff_input_register[102] ?
			      6'd5 :
			      (inst_spfm_add_sub_ff_input_register[101] ?
				 6'd6 :
				 (inst_spfm_add_sub_ff_input_register[100] ?
				    6'd7 :
				    (inst_spfm_add_sub_ff_input_register[99] ?
				       6'd8 :
				       (inst_spfm_add_sub_ff_input_register[98] ?
					  6'd9 :
					  (inst_spfm_add_sub_ff_input_register[97] ?
					     6'd10 :
					     (inst_spfm_add_sub_ff_input_register[96] ?
						6'd11 :
						(inst_spfm_add_sub_ff_input_register[95] ?
						   6'd12 :
						   (inst_spfm_add_sub_ff_input_register[94] ?
						      6'd13 :
						      (inst_spfm_add_sub_ff_input_register[93] ?
							 6'd14 :
							 (inst_spfm_add_sub_ff_input_register[92] ?
							    6'd15 :
							    (inst_spfm_add_sub_ff_input_register[91] ?
							       6'd16 :
							       (inst_spfm_add_sub_ff_input_register[90] ?
								  6'd17 :
								  (inst_spfm_add_sub_ff_input_register[89] ?
								     6'd18 :
								     (inst_spfm_add_sub_ff_input_register[88] ?
									6'd19 :
									(inst_spfm_add_sub_ff_input_register[87] ?
									   6'd20 :
									   (inst_spfm_add_sub_ff_input_register[86] ?
									      6'd21 :
									      (inst_spfm_add_sub_ff_input_register[85] ?
										 6'd22 :
										 (inst_spfm_add_sub_ff_input_register[84] ?
										    6'd23 :
										    (inst_spfm_add_sub_ff_input_register[83] ?
										       6'd24 :
										       (inst_spfm_add_sub_ff_input_register[82] ?
											  6'd25 :
											  (inst_spfm_add_sub_ff_input_register[81] ?
											     6'd26 :
											     (inst_spfm_add_sub_ff_input_register[80] ?
												6'd27 :
												(inst_spfm_add_sub_ff_input_register[79] ?
												   6'd28 :
												   (inst_spfm_add_sub_ff_input_register[78] ?
												      6'd29 :
												      (inst_spfm_add_sub_ff_input_register[77] ?
													 6'd30 :
													 (inst_spfm_add_sub_ff_input_register[76] ?
													    6'd31 :
													    (inst_spfm_add_sub_ff_input_register[75] ?
													       6'd32 :
													       (inst_spfm_add_sub_ff_input_register[74] ?
														  6'd33 :
														  (inst_spfm_add_sub_ff_input_register[73] ?
														     6'd34 :
														     (inst_spfm_add_sub_ff_input_register[72] ?
															6'd35 :
															(inst_spfm_add_sub_ff_input_register[71] ?
															   6'd36 :
															   (inst_spfm_add_sub_ff_input_register[70] ?
															      6'd37 :
															      (inst_spfm_add_sub_ff_input_register[69] ?
																 6'd38 :
																 (inst_spfm_add_sub_ff_input_register[68] ?
																    6'd39 :
																    (inst_spfm_add_sub_ff_input_register[67] ?
																       6'd40 :
																       (inst_spfm_add_sub_ff_input_register[66] ?
																	  6'd41 :
																	  (inst_spfm_add_sub_ff_input_register[65] ?
																	     6'd42 :
																	     (inst_spfm_add_sub_ff_input_register[64] ?
																		6'd43 :
																		(inst_spfm_add_sub_ff_input_register[63] ?
																		   6'd44 :
																		   (inst_spfm_add_sub_ff_input_register[62] ?
																		      6'd45 :
																		      (inst_spfm_add_sub_ff_input_register[61] ?
																			 6'd46 :
																			 (inst_spfm_add_sub_ff_input_register[60] ?
																			    6'd47 :
																			    6'd49))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign msb_zeros__h21983 =
	     inst_spfm_add_sub_ff_input_register[107] ?
	       msb_zeros___1__h22014 :
	       msb_zeros__h14976 ;
  assign msb_zeros__h5947 =
	     inst_spfpu_divider_int_div_wr_final_out_wget[26] ?
	       5'd0 :
	       (inst_spfpu_divider_int_div_wr_final_out_wget[25] ?
		  5'd1 :
		  (inst_spfpu_divider_int_div_wr_final_out_wget[24] ?
		     5'd2 :
		     (inst_spfpu_divider_int_div_wr_final_out_wget[23] ?
			5'd3 :
			(inst_spfpu_divider_int_div_wr_final_out_wget[22] ?
			   5'd4 :
			   (inst_spfpu_divider_int_div_wr_final_out_wget[21] ?
			      5'd5 :
			      (inst_spfpu_divider_int_div_wr_final_out_wget[20] ?
				 5'd6 :
				 (inst_spfpu_divider_int_div_wr_final_out_wget[19] ?
				    5'd7 :
				    (inst_spfpu_divider_int_div_wr_final_out_wget[18] ?
				       5'd8 :
				       (inst_spfpu_divider_int_div_wr_final_out_wget[17] ?
					  5'd9 :
					  (inst_spfpu_divider_int_div_wr_final_out_wget[16] ?
					     5'd10 :
					     (inst_spfpu_divider_int_div_wr_final_out_wget[15] ?
						5'd11 :
						(inst_spfpu_divider_int_div_wr_final_out_wget[14] ?
						   5'd12 :
						   (inst_spfpu_divider_int_div_wr_final_out_wget[13] ?
						      5'd13 :
						      (inst_spfpu_divider_int_div_wr_final_out_wget[12] ?
							 5'd14 :
							 (inst_spfpu_divider_int_div_wr_final_out_wget[11] ?
							    5'd15 :
							    (inst_spfpu_divider_int_div_wr_final_out_wget[10] ?
							       5'd16 :
							       (inst_spfpu_divider_int_div_wr_final_out_wget[9] ?
								  5'd17 :
								  (inst_spfpu_divider_int_div_wr_final_out_wget[8] ?
								     5'd18 :
								     (inst_spfpu_divider_int_div_wr_final_out_wget[7] ?
									5'd19 :
									(inst_spfpu_divider_int_div_wr_final_out_wget[6] ?
									   5'd20 :
									   (inst_spfpu_divider_int_div_wr_final_out_wget[5] ?
									      5'd21 :
									      (inst_spfpu_divider_int_div_wr_final_out_wget[4] ?
										 5'd22 :
										 (inst_spfpu_divider_int_div_wr_final_out_wget[3] ?
										    5'd23 :
										    (inst_spfpu_divider_int_div_wr_final_out_wget[2] ?
										       5'd24 :
										       (inst_spfpu_divider_int_div_wr_final_out_wget[1] ?
											  5'd25 :
											  (inst_spfpu_divider_int_div_wr_final_out_wget[0] ?
											     5'd26 :
											     5'd27)))))))))))))))))))))))))) ;
  assign msb_zeros__h64365 =
	     inst_dpfpu_divider_int_div_wr_final_out_wget[55] ?
	       6'd0 :
	       (inst_dpfpu_divider_int_div_wr_final_out_wget[54] ?
		  6'd1 :
		  (inst_dpfpu_divider_int_div_wr_final_out_wget[53] ?
		     6'd2 :
		     (inst_dpfpu_divider_int_div_wr_final_out_wget[52] ?
			6'd3 :
			(inst_dpfpu_divider_int_div_wr_final_out_wget[51] ?
			   6'd4 :
			   (inst_dpfpu_divider_int_div_wr_final_out_wget[50] ?
			      6'd5 :
			      (inst_dpfpu_divider_int_div_wr_final_out_wget[49] ?
				 6'd6 :
				 (inst_dpfpu_divider_int_div_wr_final_out_wget[48] ?
				    6'd7 :
				    (inst_dpfpu_divider_int_div_wr_final_out_wget[47] ?
				       6'd8 :
				       (inst_dpfpu_divider_int_div_wr_final_out_wget[46] ?
					  6'd9 :
					  (inst_dpfpu_divider_int_div_wr_final_out_wget[45] ?
					     6'd10 :
					     (inst_dpfpu_divider_int_div_wr_final_out_wget[44] ?
						6'd11 :
						(inst_dpfpu_divider_int_div_wr_final_out_wget[43] ?
						   6'd12 :
						   (inst_dpfpu_divider_int_div_wr_final_out_wget[42] ?
						      6'd13 :
						      (inst_dpfpu_divider_int_div_wr_final_out_wget[41] ?
							 6'd14 :
							 (inst_dpfpu_divider_int_div_wr_final_out_wget[40] ?
							    6'd15 :
							    (inst_dpfpu_divider_int_div_wr_final_out_wget[39] ?
							       6'd16 :
							       (inst_dpfpu_divider_int_div_wr_final_out_wget[38] ?
								  6'd17 :
								  (inst_dpfpu_divider_int_div_wr_final_out_wget[37] ?
								     6'd18 :
								     (inst_dpfpu_divider_int_div_wr_final_out_wget[36] ?
									6'd19 :
									(inst_dpfpu_divider_int_div_wr_final_out_wget[35] ?
									   6'd20 :
									   (inst_dpfpu_divider_int_div_wr_final_out_wget[34] ?
									      6'd21 :
									      (inst_dpfpu_divider_int_div_wr_final_out_wget[33] ?
										 6'd22 :
										 (inst_dpfpu_divider_int_div_wr_final_out_wget[32] ?
										    6'd23 :
										    (inst_dpfpu_divider_int_div_wr_final_out_wget[31] ?
										       6'd24 :
										       (inst_dpfpu_divider_int_div_wr_final_out_wget[30] ?
											  6'd25 :
											  (inst_dpfpu_divider_int_div_wr_final_out_wget[29] ?
											     6'd26 :
											     (inst_dpfpu_divider_int_div_wr_final_out_wget[28] ?
												6'd27 :
												(inst_dpfpu_divider_int_div_wr_final_out_wget[27] ?
												   6'd28 :
												   (inst_dpfpu_divider_int_div_wr_final_out_wget[26] ?
												      6'd29 :
												      (inst_dpfpu_divider_int_div_wr_final_out_wget[25] ?
													 6'd30 :
													 (inst_dpfpu_divider_int_div_wr_final_out_wget[24] ?
													    6'd31 :
													    (inst_dpfpu_divider_int_div_wr_final_out_wget[23] ?
													       6'd32 :
													       (inst_dpfpu_divider_int_div_wr_final_out_wget[22] ?
														  6'd33 :
														  (inst_dpfpu_divider_int_div_wr_final_out_wget[21] ?
														     6'd34 :
														     (inst_dpfpu_divider_int_div_wr_final_out_wget[20] ?
															6'd35 :
															(inst_dpfpu_divider_int_div_wr_final_out_wget[19] ?
															   6'd36 :
															   (inst_dpfpu_divider_int_div_wr_final_out_wget[18] ?
															      6'd37 :
															      (inst_dpfpu_divider_int_div_wr_final_out_wget[17] ?
																 6'd38 :
																 (inst_dpfpu_divider_int_div_wr_final_out_wget[16] ?
																    6'd39 :
																    (inst_dpfpu_divider_int_div_wr_final_out_wget[15] ?
																       6'd40 :
																       (inst_dpfpu_divider_int_div_wr_final_out_wget[14] ?
																	  6'd41 :
																	  (inst_dpfpu_divider_int_div_wr_final_out_wget[13] ?
																	     6'd42 :
																	     (inst_dpfpu_divider_int_div_wr_final_out_wget[12] ?
																		6'd43 :
																		(inst_dpfpu_divider_int_div_wr_final_out_wget[11] ?
																		   6'd44 :
																		   (inst_dpfpu_divider_int_div_wr_final_out_wget[10] ?
																		      6'd45 :
																		      (inst_dpfpu_divider_int_div_wr_final_out_wget[9] ?
																			 6'd46 :
																			 (inst_dpfpu_divider_int_div_wr_final_out_wget[8] ?
																			    6'd47 :
																			    (inst_dpfpu_divider_int_div_wr_final_out_wget[7] ?
																			       6'd48 :
																			       (inst_dpfpu_divider_int_div_wr_final_out_wget[6] ?
																				  6'd49 :
																				  (inst_dpfpu_divider_int_div_wr_final_out_wget[5] ?
																				     6'd50 :
																				     (inst_dpfpu_divider_int_div_wr_final_out_wget[4] ?
																					6'd51 :
																					(inst_dpfpu_divider_int_div_wr_final_out_wget[3] ?
																					   6'd52 :
																					   (inst_dpfpu_divider_int_div_wr_final_out_wget[2] ?
																					      6'd53 :
																					      (inst_dpfpu_divider_int_div_wr_final_out_wget[1] ?
																						 6'd54 :
																						 (inst_dpfpu_divider_int_div_wr_final_out_wget[0] ?
																						    6'd55 :
																						    6'd56))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign msb_zeros__h79334 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       7'd0 :
	       (inst_dpfm_add_sub_ff_input_register[199] ?
		  7'd1 :
		  (inst_dpfm_add_sub_ff_input_register[198] ?
		     7'd2 :
		     (inst_dpfm_add_sub_ff_input_register[197] ?
			7'd3 :
			(inst_dpfm_add_sub_ff_input_register[196] ?
			   7'd4 :
			   (inst_dpfm_add_sub_ff_input_register[195] ?
			      7'd5 :
			      (inst_dpfm_add_sub_ff_input_register[194] ?
				 7'd6 :
				 (inst_dpfm_add_sub_ff_input_register[193] ?
				    7'd7 :
				    (inst_dpfm_add_sub_ff_input_register[192] ?
				       7'd8 :
				       (inst_dpfm_add_sub_ff_input_register[191] ?
					  7'd9 :
					  (inst_dpfm_add_sub_ff_input_register[190] ?
					     7'd10 :
					     (inst_dpfm_add_sub_ff_input_register[189] ?
						7'd11 :
						(inst_dpfm_add_sub_ff_input_register[188] ?
						   7'd12 :
						   (inst_dpfm_add_sub_ff_input_register[187] ?
						      7'd13 :
						      (inst_dpfm_add_sub_ff_input_register[186] ?
							 7'd14 :
							 (inst_dpfm_add_sub_ff_input_register[185] ?
							    7'd15 :
							    (inst_dpfm_add_sub_ff_input_register[184] ?
							       7'd16 :
							       (inst_dpfm_add_sub_ff_input_register[183] ?
								  7'd17 :
								  (inst_dpfm_add_sub_ff_input_register[182] ?
								     7'd18 :
								     (inst_dpfm_add_sub_ff_input_register[181] ?
									7'd19 :
									(inst_dpfm_add_sub_ff_input_register[180] ?
									   7'd20 :
									   (inst_dpfm_add_sub_ff_input_register[179] ?
									      7'd21 :
									      (inst_dpfm_add_sub_ff_input_register[178] ?
										 7'd22 :
										 (inst_dpfm_add_sub_ff_input_register[177] ?
										    7'd23 :
										    (inst_dpfm_add_sub_ff_input_register[176] ?
										       7'd24 :
										       (inst_dpfm_add_sub_ff_input_register[175] ?
											  7'd25 :
											  (inst_dpfm_add_sub_ff_input_register[174] ?
											     7'd26 :
											     (inst_dpfm_add_sub_ff_input_register[173] ?
												7'd27 :
												(inst_dpfm_add_sub_ff_input_register[172] ?
												   7'd28 :
												   (inst_dpfm_add_sub_ff_input_register[171] ?
												      7'd29 :
												      (inst_dpfm_add_sub_ff_input_register[170] ?
													 7'd30 :
													 (inst_dpfm_add_sub_ff_input_register[169] ?
													    7'd31 :
													    (inst_dpfm_add_sub_ff_input_register[168] ?
													       7'd32 :
													       (inst_dpfm_add_sub_ff_input_register[167] ?
														  7'd33 :
														  (inst_dpfm_add_sub_ff_input_register[166] ?
														     7'd34 :
														     (inst_dpfm_add_sub_ff_input_register[165] ?
															7'd35 :
															(inst_dpfm_add_sub_ff_input_register[164] ?
															   7'd36 :
															   (inst_dpfm_add_sub_ff_input_register[163] ?
															      7'd37 :
															      (inst_dpfm_add_sub_ff_input_register[162] ?
																 7'd38 :
																 (inst_dpfm_add_sub_ff_input_register[161] ?
																    7'd39 :
																    (inst_dpfm_add_sub_ff_input_register[160] ?
																       7'd40 :
																       (inst_dpfm_add_sub_ff_input_register[159] ?
																	  7'd41 :
																	  (inst_dpfm_add_sub_ff_input_register[158] ?
																	     7'd42 :
																	     (inst_dpfm_add_sub_ff_input_register[157] ?
																		7'd43 :
																		(inst_dpfm_add_sub_ff_input_register[156] ?
																		   7'd44 :
																		   (inst_dpfm_add_sub_ff_input_register[155] ?
																		      7'd45 :
																		      (inst_dpfm_add_sub_ff_input_register[154] ?
																			 7'd46 :
																			 (inst_dpfm_add_sub_ff_input_register[153] ?
																			    7'd47 :
																			    (inst_dpfm_add_sub_ff_input_register[152] ?
																			       7'd48 :
																			       (inst_dpfm_add_sub_ff_input_register[151] ?
																				  7'd49 :
																				  (inst_dpfm_add_sub_ff_input_register[150] ?
																				     7'd50 :
																				     (inst_dpfm_add_sub_ff_input_register[149] ?
																					7'd51 :
																					(inst_dpfm_add_sub_ff_input_register[148] ?
																					   7'd52 :
																					   (inst_dpfm_add_sub_ff_input_register[147] ?
																					      7'd53 :
																					      (inst_dpfm_add_sub_ff_input_register[146] ?
																						 7'd54 :
																						 (inst_dpfm_add_sub_ff_input_register[145] ?
																						    7'd55 :
																						    (inst_dpfm_add_sub_ff_input_register[144] ?
																						       7'd56 :
																						       (inst_dpfm_add_sub_ff_input_register[143] ?
																							  7'd57 :
																							  (inst_dpfm_add_sub_ff_input_register[142] ?
																							     7'd58 :
																							     (inst_dpfm_add_sub_ff_input_register[141] ?
																								7'd59 :
																								(inst_dpfm_add_sub_ff_input_register[140] ?
																								   7'd60 :
																								   (inst_dpfm_add_sub_ff_input_register[139] ?
																								      7'd61 :
																								      (inst_dpfm_add_sub_ff_input_register[138] ?
																									 7'd62 :
																									 (inst_dpfm_add_sub_ff_input_register[137] ?
																									    7'd63 :
																									    (inst_dpfm_add_sub_ff_input_register[136] ?
																									       7'd64 :
																									       (inst_dpfm_add_sub_ff_input_register[135] ?
																										  7'd65 :
																										  (inst_dpfm_add_sub_ff_input_register[134] ?
																										     7'd66 :
																										     (inst_dpfm_add_sub_ff_input_register[133] ?
																											7'd67 :
																											(inst_dpfm_add_sub_ff_input_register[132] ?
																											   7'd68 :
																											   (inst_dpfm_add_sub_ff_input_register[131] ?
																											      7'd69 :
																											      (inst_dpfm_add_sub_ff_input_register[130] ?
																												 7'd70 :
																												 (inst_dpfm_add_sub_ff_input_register[129] ?
																												    7'd71 :
																												    (inst_dpfm_add_sub_ff_input_register[128] ?
																												       7'd72 :
																												       (inst_dpfm_add_sub_ff_input_register[127] ?
																													  7'd73 :
																													  (inst_dpfm_add_sub_ff_input_register[126] ?
																													     7'd74 :
																													     (inst_dpfm_add_sub_ff_input_register[125] ?
																														7'd75 :
																														(inst_dpfm_add_sub_ff_input_register[124] ?
																														   7'd76 :
																														   (inst_dpfm_add_sub_ff_input_register[123] ?
																														      7'd77 :
																														      (inst_dpfm_add_sub_ff_input_register[122] ?
																															 7'd78 :
																															 (inst_dpfm_add_sub_ff_input_register[121] ?
																															    7'd79 :
																															    (inst_dpfm_add_sub_ff_input_register[120] ?
																															       7'd80 :
																															       (inst_dpfm_add_sub_ff_input_register[119] ?
																																  7'd81 :
																																  (inst_dpfm_add_sub_ff_input_register[118] ?
																																     7'd82 :
																																     (inst_dpfm_add_sub_ff_input_register[117] ?
																																	7'd83 :
																																	(inst_dpfm_add_sub_ff_input_register[116] ?
																																	   7'd84 :
																																	   (inst_dpfm_add_sub_ff_input_register[115] ?
																																	      7'd85 :
																																	      (inst_dpfm_add_sub_ff_input_register[114] ?
																																		 7'd86 :
																																		 (inst_dpfm_add_sub_ff_input_register[113] ?
																																		    7'd87 :
																																		    (inst_dpfm_add_sub_ff_input_register[112] ?
																																		       7'd88 :
																																		       (inst_dpfm_add_sub_ff_input_register[111] ?
																																			  7'd89 :
																																			  (inst_dpfm_add_sub_ff_input_register[110] ?
																																			     7'd90 :
																																			     (inst_dpfm_add_sub_ff_input_register[109] ?
																																				7'd91 :
																																				(inst_dpfm_add_sub_ff_input_register[108] ?
																																				   7'd92 :
																																				   (inst_dpfm_add_sub_ff_input_register[107] ?
																																				      7'd93 :
																																				      (inst_dpfm_add_sub_ff_input_register[106] ?
																																					 7'd94 :
																																					 (inst_dpfm_add_sub_ff_input_register[105] ?
																																					    7'd95 :
																																					    (inst_dpfm_add_sub_ff_input_register[104] ?
																																					       7'd96 :
																																					       (inst_dpfm_add_sub_ff_input_register[103] ?
																																						  7'd97 :
																																						  (inst_dpfm_add_sub_ff_input_register[102] ?
																																						     7'd98 :
																																						     (inst_dpfm_add_sub_ff_input_register[101] ?
																																							7'd99 :
																																							(inst_dpfm_add_sub_ff_input_register[100] ?
																																							   7'd100 :
																																							   (inst_dpfm_add_sub_ff_input_register[99] ?
																																							      7'd101 :
																																							      (inst_dpfm_add_sub_ff_input_register[98] ?
																																								 7'd102 :
																																								 (inst_dpfm_add_sub_ff_input_register[97] ?
																																								    7'd103 :
																																								    (inst_dpfm_add_sub_ff_input_register[96] ?
																																								       7'd104 :
																																								       (inst_dpfm_add_sub_ff_input_register[95] ?
																																									  7'd105 :
																																									  7'd107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign msb_zeros__h94403 =
	     inst_dpfm_add_sub_ff_input_register[200] ?
	       msb_zeros___1__h94434 :
	       msb_zeros__h79334 ;
  assign new_value_final_result__h170983 =
	     inst_dpfm_add_sub_ff_stage5[17] ?
	       64'h7FF8000000000000 :
	       _theResult_____3_snd_snd_snd__h171077 ;
  assign new_value_final_result__h57876 =
	     inst_spfm_add_sub_ff_stage5[16] ?
	       32'h7FC00000 :
	       _theResult_____3_snd_snd_snd__h57970 ;
  assign op_xor_sign3__h102117 =
	     inst_dpfm_add_sub_ff_stage2[12] ^ sign3__h102106 ;
  assign op_xor_sign3__h25811 =
	     inst_spfm_add_sub_ff_stage2[12] ^ sign3__h25800 ;
  assign or_sign__h197439 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] |
	     setCanonicalNaN_reswget_BITS_63_TO_32__q43[31] ;
  assign or_sign__h199318 = ff_input_D_OUT[208] | ff_input_D_OUT[144] ;
  assign quiet_nan_two__h230907 = x__h231478 | y__h231479 ;
  assign quiet_nan_two__h232363 = x__h232929 | y__h232930 ;
  assign res___1__h229177 =
	     { ff_input_D_OUT[208],
	       _theResult_____2__h228912,
	       IF_IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0_ETC___d4365[22:0] } ;
  assign res__h179718 = ff_input_D_OUT[176] ? 32'hCF000000 : 32'd0 ;
  assign res__h194401 =
	     { lv_sign__h194392, expo__h194399, mantissa__h194400 } ;
  assign res__h228536 =
	     IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4310 ?
	       _theResult___snd_fst__h229175 :
	       32'd0 ;
  assign result__h223367 =
	     condFlags32_reswget_BITS_14_TO_10__q53[0] ? 5'd16 : 5'd0 ;
  assign result__h227933 =
	     condFlags64_reswget_BITS_14_TO_10__q33[0] ? 5'd16 : 5'd0 ;
  assign result__h228939 =
	     { IF_NOT_IF_getExp64_res_whas__996_THEN_getExp64_ETC___d4338[4:1],
	       IF_NOT_IF_getExp64_res_whas__996_THEN_getExp64_ETC___d4338[0] |
	       x__h228837 } ;
  assign result__h228970 = { exception__h228529[4:2], 2'd3 } ;
  assign result_exponent___1__h14569 =
	     inst_spfpu_sqrt_rg_inter_stage[67:59] + 9'd1 ;
  assign result_exponent___1__h78931 =
	     inst_dpfpu_sqrt_rg_inter_stage[128:117] + 12'd1 ;
  assign result_exponent__h259743 = x__h267966 + y__h267967 ;
  assign result_exponent__h268746 = x__h285088 + y__h285089 ;
  assign result_mantissa__h14056 =
	     { inst_spfpu_sqrt_rg_inter_stage[93:69],
	       !_theResult____h13729[28] } ;
  assign result_mantissa__h78418 =
	     { inst_dpfpu_sqrt_rg_inter_stage[183:130],
	       !_theResult____h78091[57] } ;
  assign resultant_exponent___1__h171666 =
	     resultant_exponent__h170935 + 13'd1 ;
  assign resultant_exponent___1__h58559 = resultant_exponent__h57828 + 10'd1 ;
  assign resultant_exponent__h170935 =
	     inst_dpfm_add_sub_ff_stage5[183] ?
	       resultant_exponent_inc__h170930 :
	       _theResult___fst__h171265 ;
  assign resultant_exponent__h57828 =
	     inst_spfm_add_sub_ff_stage5[95] ?
	       resultant_exponent_inc__h57823 :
	       _theResult___fst__h58158 ;
  assign resultant_exponent_inc__h170930 =
	     inst_dpfm_add_sub_ff_stage5[196:184] + 13'd1 ;
  assign resultant_exponent_inc__h57823 =
	     inst_spfm_add_sub_ff_stage5[105:96] + 10'd1 ;
  assign resultant_exponent_sub__h170928 =
	     inst_dpfm_add_sub_ff_stage5[196:184] - 13'd1 ;
  assign resultant_exponent_sub__h57821 =
	     inst_spfm_add_sub_ff_stage5[105:96] - 10'd1 ;
  assign resultant_exponent_sub_zerosMSB__h170933 =
	     inst_dpfm_add_sub_ff_stage5[196:184] -
	     _0_CONCAT_inst_dpfm_add_sub_ff_stage5_read__165_ETC___d3183 ;
  assign resultant_exponent_sub_zerosMSB__h57826 =
	     inst_spfm_add_sub_ff_stage5[105:96] -
	     _0_CONCAT_inst_spfm_add_sub_ff_stage5_read__177_ETC___d1195 ;
  assign resultant_mantissa___1__h171237 =
	     { 1'd0,
	       inst_dpfm_add_sub_ff_stage5[183:26],
	       inst_dpfm_add_sub_ff_stage5[24] |
	       inst_dpfm_add_sub_ff_stage5[25] } ;
  assign resultant_mantissa___1__h58130 =
	     { 1'd0,
	       inst_spfm_add_sub_ff_stage5[95:25],
	       inst_spfm_add_sub_ff_stage5[23] |
	       inst_spfm_add_sub_ff_stage5[24] } ;
  assign resultant_mantissa_norm_expo__h170931 =
	     inst_dpfm_add_sub_ff_stage5[183:24] <<
	     resultant_exponent_sub__h170928 ;
  assign resultant_mantissa_norm_expo__h57824 =
	     inst_spfm_add_sub_ff_stage5[95:23] <<
	     resultant_exponent_sub__h57821 ;
  assign resultant_mantissa_norm_zerosMSB__h170932 =
	     inst_dpfm_add_sub_ff_stage5[183:24] << x__h171514 ;
  assign resultant_mantissa_norm_zerosMSB__h57825 =
	     inst_spfm_add_sub_ff_stage5[95:23] << x__h58407 ;
  assign setCanonicalNaN_argwget_BITS_127_TO_64__q40 =
	     setCanonicalNaN_arg_wget[127:64] ;
  assign setCanonicalNaN_argwget_BITS_191_TO_128__q39 =
	     setCanonicalNaN_arg_wget[191:128] ;
  assign setCanonicalNaN_argwget_BITS_63_TO_0__q41 =
	     setCanonicalNaN_arg_wget[63:0] ;
  assign setCanonicalNaN_reswget_BITS_31_TO_0__q59 =
	     setCanonicalNaN_res_wget[31:0] ;
  assign setCanonicalNaN_reswget_BITS_63_TO_32__q43 =
	     setCanonicalNaN_res_wget[63:32] ;
  assign setCanonicalNaN_reswget_BITS_95_TO_64__q42 =
	     setCanonicalNaN_res_wget[95:64] ;
  assign shiftDist__h228295 = 11'd896 - getExp64_res_wget[32:22] ;
  assign shift_neg__h21988 =
	     ~_1_MINUS_IF_inst_spfm_add_sub_ff_input_register_ETC___d472 +
	     10'd1 ;
  assign shift_neg__h6098 =
	     ~_1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d133 +
	     10'd1 ;
  assign shift_neg__h64516 =
	     ~_1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1454 +
	     13'd1 ;
  assign shift_neg__h94408 =
	     ~_1_MINUS_IF_inst_dpfm_add_sub_ff_input_register_ETC___d1880 +
	     13'd1 ;
  assign sign2__h102104 =
	     inst_dpfm_add_sub_ff_stage2[203] ^
	     inst_dpfm_add_sub_ff_stage2[202] ;
  assign sign2__h25798 =
	     inst_spfm_add_sub_ff_stage2[110] ^
	     inst_spfm_add_sub_ff_stage2[109] ;
  assign sign3__h102106 =
	     inst_dpfm_add_sub_ff_stage2[81] ^
	     inst_dpfm_add_sub_ff_stage2[202] ;
  assign sign3__h25800 =
	     inst_spfm_add_sub_ff_stage2[49] ^
	     inst_spfm_add_sub_ff_stage2[109] ;
  assign sign__h205112 = !ff_input_D_OUT[1] && ff_input_D_OUT[208] ;
  assign sub_mantissa1__h148336 =
	     inst_dpfm_add_sub_ff_stage4[346] ?
	       inst_dpfm_add_sub_ff_stage4[332:173] :
	       inst_dpfm_add_sub_ff_stage4[172:13] ;
  assign sub_mantissa1__h47409 =
	     inst_spfm_add_sub_ff_stage4[169] ?
	       inst_spfm_add_sub_ff_stage4[158:86] :
	       inst_spfm_add_sub_ff_stage4[85:13] ;
  assign sub_mantissa2__h148337 =
	     inst_dpfm_add_sub_ff_stage4[346] ?
	       inst_dpfm_add_sub_ff_stage4[172:13] :
	       inst_dpfm_add_sub_ff_stage4[332:173] ;
  assign sub_mantissa2__h47410 =
	     inst_spfm_add_sub_ff_stage4[169] ?
	       inst_spfm_add_sub_ff_stage4[85:13] :
	       inst_spfm_add_sub_ff_stage4[158:86] ;
  assign sub_mantissa__h148338 =
	     sub_mantissa1__h148336 - sub_mantissa2__h148337 ;
  assign sub_mantissa__h47411 =
	     sub_mantissa1__h47409 - sub_mantissa2__h47410 ;
  assign theResult__94396_SL_x00483_BITS_4_TO_0__q3 =
	     _theResult____h194396 << x__h200483[4:0] ;
  assign value__h226808 = getMant32_res_wget[68:46] << x__h223559 ;
  assign wr_final_out_fflags__h194416 = { 4'd0, inexact__h205115 } ;
  assign wr_final_out_final_result__h194415 =
	     { sign__h205112,
	       IF_IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0_ETC___d3716[52] ?
		 local_expo___1__h214390 :
		 expo__h194412,
	       IF_IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0_ETC___d3716[51:0] } ;
  assign x1_avValue_fflags__h179724 =
	     (ff_input_D_OUT[175:145] == 31'd0) ?
	       5'd0 :
	       inst_fpu_int_to_fp_fcvt_s_wwu_res_wget[36:32] ;
  assign x1_avValue_fflags__h184751 =
	     ff_input_D_OUT[1] ?
	       inst_fpu_int_to_fp_fcvt_s_wwu_res_wget[36:32] :
	       x1_avValue_fflags__h179724 ;
  assign x1_avValue_fflags__h194295 =
	     ff_input_D_OUT[2] ?
	       inst_fpu_int_to_fp_fcvt_s_llu_res_wget[36:32] :
	       x1_avValue_fflags__h184751 ;
  assign x1_avValue_final_result__h179723 =
	     (ff_input_D_OUT[175:145] == 31'd0) ?
	       res__h179718 :
	       inst_fpu_int_to_fp_fcvt_s_wwu_res_wget[31:0] ;
  assign x1_avValue_final_result__h184750 =
	     ff_input_D_OUT[1] ?
	       inst_fpu_int_to_fp_fcvt_s_wwu_res_wget[31:0] :
	       x1_avValue_final_result__h179723 ;
  assign x1_avValue_final_result__h194294 =
	     ff_input_D_OUT[2] ?
	       inst_fpu_int_to_fp_fcvt_s_llu_res_wget[31:0] :
	       x1_avValue_final_result__h184750 ;
  assign x1_avValue_final_result__h194302 =
	     (ff_input_D_OUT[208:145] == 64'd0 && ff_input_D_OUT[2] ||
	      ff_input_D_OUT[176:145] == 32'd0 && !ff_input_D_OUT[2]) ?
	       32'b0 :
	       x1_avValue_final_result__h194294 ;
  assign x1_avValue_final_result__h214457 =
	     { CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q44,
	       setCanonicalNaN_reswget_BITS_95_TO_64__q42[30:0] } ;
  assign x1_avValue_snd_fst__h229172 =
	     (!condFlags64_reswget_BITS_14_TO_10__q33[2] &&
	      !condFlags64_reswget_BITS_14_TO_10__q33[0] &&
	      !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	      !condFlags64_reswget_BITS_14_TO_10__q33[3]) ?
	       y_avValue_snd_fst__h229169 :
	       res__h228536 ;
  assign x__h101858 =
	     (!inst_dpfm_add_sub_ff_input_register_read__867__ETC___d1872 ||
	      inst_dpfm_add_sub_ff_input_register[200] &&
	      inst_dpfm_add_sub_ff_input_register[94:82] == 13'd2046) &&
	     (!inst_dpfm_add_sub_ff_input_register[2] ||
	      !(x__h101889 ^ inst_dpfm_add_sub_ff_input_register[5])) ;
  assign x__h101889 =
	     inst_dpfm_add_sub_ff_input_register[81] ^
	     inst_dpfm_add_sub_ff_input_register[80] ;
  assign x__h101919 =
	     inst_dpfm_add_sub_ff_input_register_read__867__ETC___d1872 &&
	     (!inst_dpfm_add_sub_ff_input_register[200] ||
	      inst_dpfm_add_sub_ff_input_register[94:82] != 13'd2046) &&
	     (inst_dpfm_add_sub_ff_input_register_read__867__ETC___d1871 ^
	      13'h1000) <
	     13'd3020 &&
	     (!inst_dpfm_add_sub_ff_input_register[2] ||
	      inst_dpfm_add_sub_ff_input_register[12] ||
	      inst_dpfm_add_sub_ff_input_register[13]) &&
	     !inst_dpfm_add_sub_ff_input_register[14] ;
  assign x__h102258 = x__h102270 | y__h102271 ;
  assign x__h102270 = _theResult_____1__h102152 & sign2__h102104 ;
  assign x__h11970 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 &&
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 ;
  assign x__h11975 =
	     (!inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 ||
	      inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d132 ||
	      _1_MINUS_inst_spfpu_divider_rg_stage2_28_BITS_1_ETC___d134) ?
	       inst_spfpu_divider_int_div_wr_final_out_wget[0] :
	       lv_sticky___1__h6124 ;
  assign x__h12195 = _theResult____h12042 | inst_spfpu_divider_rg_stage3[53] ;
  assign x__h12345 = inst_spfpu_divider_rg_stage3[52] | _theResult____h12042 ;
  assign x__h12380 = x__h12382 | _theResult____h12042 ;
  assign x__h12382 =
	     inst_spfpu_divider_rg_stage3[53] |
	     inst_spfpu_divider_rg_stage3[52] ;
  assign x__h137214 =
	     mantissa_to_shift__h102141[0] ?
	       8'd0 :
	       (mantissa_to_shift__h102141[1] ?
		  8'd1 :
		  (mantissa_to_shift__h102141[2] ?
		     8'd2 :
		     (mantissa_to_shift__h102141[3] ?
			8'd3 :
			(mantissa_to_shift__h102141[4] ?
			   8'd4 :
			   (mantissa_to_shift__h102141[5] ?
			      8'd5 :
			      (mantissa_to_shift__h102141[6] ?
				 8'd6 :
				 (mantissa_to_shift__h102141[7] ?
				    8'd7 :
				    (mantissa_to_shift__h102141[8] ?
				       8'd8 :
				       (mantissa_to_shift__h102141[9] ?
					  8'd9 :
					  (mantissa_to_shift__h102141[10] ?
					     8'd10 :
					     (mantissa_to_shift__h102141[11] ?
						8'd11 :
						(mantissa_to_shift__h102141[12] ?
						   8'd12 :
						   (mantissa_to_shift__h102141[13] ?
						      8'd13 :
						      (mantissa_to_shift__h102141[14] ?
							 8'd14 :
							 (mantissa_to_shift__h102141[15] ?
							    8'd15 :
							    (mantissa_to_shift__h102141[16] ?
							       8'd16 :
							       (mantissa_to_shift__h102141[17] ?
								  8'd17 :
								  (mantissa_to_shift__h102141[18] ?
								     8'd18 :
								     (mantissa_to_shift__h102141[19] ?
									8'd19 :
									(mantissa_to_shift__h102141[20] ?
									   8'd20 :
									   (mantissa_to_shift__h102141[21] ?
									      8'd21 :
									      (mantissa_to_shift__h102141[22] ?
										 8'd22 :
										 (mantissa_to_shift__h102141[23] ?
										    8'd23 :
										    (mantissa_to_shift__h102141[24] ?
										       8'd24 :
										       (mantissa_to_shift__h102141[25] ?
											  8'd25 :
											  (mantissa_to_shift__h102141[26] ?
											     8'd26 :
											     (mantissa_to_shift__h102141[27] ?
												8'd27 :
												(mantissa_to_shift__h102141[28] ?
												   8'd28 :
												   (mantissa_to_shift__h102141[29] ?
												      8'd29 :
												      (mantissa_to_shift__h102141[30] ?
													 8'd30 :
													 (mantissa_to_shift__h102141[31] ?
													    8'd31 :
													    (mantissa_to_shift__h102141[32] ?
													       8'd32 :
													       (mantissa_to_shift__h102141[33] ?
														  8'd33 :
														  (mantissa_to_shift__h102141[34] ?
														     8'd34 :
														     (mantissa_to_shift__h102141[35] ?
															8'd35 :
															(mantissa_to_shift__h102141[36] ?
															   8'd36 :
															   (mantissa_to_shift__h102141[37] ?
															      8'd37 :
															      (mantissa_to_shift__h102141[38] ?
																 8'd38 :
																 (mantissa_to_shift__h102141[39] ?
																    8'd39 :
																    (mantissa_to_shift__h102141[40] ?
																       8'd40 :
																       (mantissa_to_shift__h102141[41] ?
																	  8'd41 :
																	  (mantissa_to_shift__h102141[42] ?
																	     8'd42 :
																	     (mantissa_to_shift__h102141[43] ?
																		8'd43 :
																		(mantissa_to_shift__h102141[44] ?
																		   8'd44 :
																		   (mantissa_to_shift__h102141[45] ?
																		      8'd45 :
																		      (mantissa_to_shift__h102141[46] ?
																			 8'd46 :
																			 (mantissa_to_shift__h102141[47] ?
																			    8'd47 :
																			    (mantissa_to_shift__h102141[48] ?
																			       8'd48 :
																			       (mantissa_to_shift__h102141[49] ?
																				  8'd49 :
																				  (mantissa_to_shift__h102141[50] ?
																				     8'd50 :
																				     (mantissa_to_shift__h102141[51] ?
																					8'd51 :
																					(mantissa_to_shift__h102141[52] ?
																					   8'd52 :
																					   (mantissa_to_shift__h102141[53] ?
																					      8'd53 :
																					      (mantissa_to_shift__h102141[54] ?
																						 8'd54 :
																						 (mantissa_to_shift__h102141[55] ?
																						    8'd55 :
																						    (mantissa_to_shift__h102141[56] ?
																						       8'd56 :
																						       (mantissa_to_shift__h102141[57] ?
																							  8'd57 :
																							  (mantissa_to_shift__h102141[58] ?
																							     8'd58 :
																							     (mantissa_to_shift__h102141[59] ?
																								8'd59 :
																								(mantissa_to_shift__h102141[60] ?
																								   8'd60 :
																								   (mantissa_to_shift__h102141[61] ?
																								      8'd61 :
																								      (mantissa_to_shift__h102141[62] ?
																									 8'd62 :
																									 (mantissa_to_shift__h102141[63] ?
																									    8'd63 :
																									    (mantissa_to_shift__h102141[64] ?
																									       8'd64 :
																									       (mantissa_to_shift__h102141[65] ?
																										  8'd65 :
																										  (mantissa_to_shift__h102141[66] ?
																										     8'd66 :
																										     (mantissa_to_shift__h102141[67] ?
																											8'd67 :
																											(mantissa_to_shift__h102141[68] ?
																											   8'd68 :
																											   (mantissa_to_shift__h102141[69] ?
																											      8'd69 :
																											      (mantissa_to_shift__h102141[70] ?
																												 8'd70 :
																												 (mantissa_to_shift__h102141[71] ?
																												    8'd71 :
																												    (mantissa_to_shift__h102141[72] ?
																												       8'd72 :
																												       (mantissa_to_shift__h102141[73] ?
																													  8'd73 :
																													  (mantissa_to_shift__h102141[74] ?
																													     8'd74 :
																													     (mantissa_to_shift__h102141[75] ?
																														8'd75 :
																														(mantissa_to_shift__h102141[76] ?
																														   8'd76 :
																														   (mantissa_to_shift__h102141[77] ?
																														      8'd77 :
																														      (mantissa_to_shift__h102141[78] ?
																															 8'd78 :
																															 (mantissa_to_shift__h102141[79] ?
																															    8'd79 :
																															    (mantissa_to_shift__h102141[80] ?
																															       8'd80 :
																															       (mantissa_to_shift__h102141[81] ?
																																  8'd81 :
																																  (mantissa_to_shift__h102141[82] ?
																																     8'd82 :
																																     (mantissa_to_shift__h102141[83] ?
																																	8'd83 :
																																	(mantissa_to_shift__h102141[84] ?
																																	   8'd84 :
																																	   (mantissa_to_shift__h102141[85] ?
																																	      8'd85 :
																																	      (mantissa_to_shift__h102141[86] ?
																																		 8'd86 :
																																		 (mantissa_to_shift__h102141[87] ?
																																		    8'd87 :
																																		    (mantissa_to_shift__h102141[88] ?
																																		       8'd88 :
																																		       (mantissa_to_shift__h102141[89] ?
																																			  8'd89 :
																																			  (mantissa_to_shift__h102141[90] ?
																																			     8'd90 :
																																			     (mantissa_to_shift__h102141[91] ?
																																				8'd91 :
																																				(mantissa_to_shift__h102141[92] ?
																																				   8'd92 :
																																				   (mantissa_to_shift__h102141[93] ?
																																				      8'd93 :
																																				      (mantissa_to_shift__h102141[94] ?
																																					 8'd94 :
																																					 (mantissa_to_shift__h102141[95] ?
																																					    8'd95 :
																																					    (mantissa_to_shift__h102141[96] ?
																																					       8'd96 :
																																					       (mantissa_to_shift__h102141[97] ?
																																						  8'd97 :
																																						  (mantissa_to_shift__h102141[98] ?
																																						     8'd98 :
																																						     (mantissa_to_shift__h102141[99] ?
																																							8'd99 :
																																							(mantissa_to_shift__h102141[100] ?
																																							   8'd100 :
																																							   (mantissa_to_shift__h102141[101] ?
																																							      8'd101 :
																																							      (mantissa_to_shift__h102141[102] ?
																																								 8'd102 :
																																								 (mantissa_to_shift__h102141[103] ?
																																								    8'd103 :
																																								    (mantissa_to_shift__h102141[104] ?
																																								       8'd104 :
																																								       (mantissa_to_shift__h102141[105] ?
																																									  8'd105 :
																																									  (mantissa_to_shift__h102141[106] ?
																																									     8'd106 :
																																									     (mantissa_to_shift__h102141[107] ?
																																										8'd107 :
																																										(mantissa_to_shift__h102141[108] ?
																																										   8'd108 :
																																										   (mantissa_to_shift__h102141[109] ?
																																										      8'd109 :
																																										      (mantissa_to_shift__h102141[110] ?
																																											 8'd110 :
																																											 (mantissa_to_shift__h102141[111] ?
																																											    8'd111 :
																																											    (mantissa_to_shift__h102141[112] ?
																																											       8'd112 :
																																											       (mantissa_to_shift__h102141[113] ?
																																												  8'd113 :
																																												  (mantissa_to_shift__h102141[114] ?
																																												     8'd114 :
																																												     (mantissa_to_shift__h102141[115] ?
																																													8'd115 :
																																													(mantissa_to_shift__h102141[116] ?
																																													   8'd116 :
																																													   (mantissa_to_shift__h102141[117] ?
																																													      8'd117 :
																																													      (mantissa_to_shift__h102141[118] ?
																																														 8'd118 :
																																														 (mantissa_to_shift__h102141[119] ?
																																														    8'd119 :
																																														    (mantissa_to_shift__h102141[120] ?
																																														       8'd120 :
																																														       (mantissa_to_shift__h102141[121] ?
																																															  8'd121 :
																																															  (mantissa_to_shift__h102141[122] ?
																																															     8'd122 :
																																															     (mantissa_to_shift__h102141[123] ?
																																																8'd123 :
																																																(mantissa_to_shift__h102141[124] ?
																																																   8'd124 :
																																																   (mantissa_to_shift__h102141[125] ?
																																																      8'd125 :
																																																      (mantissa_to_shift__h102141[126] ?
																																																	 8'd126 :
																																																	 (mantissa_to_shift__h102141[127] ?
																																																	    8'd127 :
																																																	    (mantissa_to_shift__h102141[128] ?
																																																	       8'd128 :
																																																	       (mantissa_to_shift__h102141[129] ?
																																																		  8'd129 :
																																																		  (mantissa_to_shift__h102141[130] ?
																																																		     8'd130 :
																																																		     (mantissa_to_shift__h102141[131] ?
																																																			8'd131 :
																																																			(mantissa_to_shift__h102141[132] ?
																																																			   8'd132 :
																																																			   (mantissa_to_shift__h102141[133] ?
																																																			      8'd133 :
																																																			      (mantissa_to_shift__h102141[134] ?
																																																				 8'd134 :
																																																				 (mantissa_to_shift__h102141[135] ?
																																																				    8'd135 :
																																																				    (mantissa_to_shift__h102141[136] ?
																																																				       8'd136 :
																																																				       (mantissa_to_shift__h102141[137] ?
																																																					  8'd137 :
																																																					  (mantissa_to_shift__h102141[138] ?
																																																					     8'd138 :
																																																					     (mantissa_to_shift__h102141[139] ?
																																																						8'd139 :
																																																						(mantissa_to_shift__h102141[140] ?
																																																						   8'd140 :
																																																						   (mantissa_to_shift__h102141[141] ?
																																																						      8'd141 :
																																																						      (mantissa_to_shift__h102141[142] ?
																																																							 8'd142 :
																																																							 (mantissa_to_shift__h102141[143] ?
																																																							    8'd143 :
																																																							    (mantissa_to_shift__h102141[144] ?
																																																							       8'd144 :
																																																							       (mantissa_to_shift__h102141[145] ?
																																																								  8'd145 :
																																																								  (mantissa_to_shift__h102141[146] ?
																																																								     8'd146 :
																																																								     (mantissa_to_shift__h102141[147] ?
																																																									8'd147 :
																																																									(mantissa_to_shift__h102141[148] ?
																																																									   8'd148 :
																																																									   (mantissa_to_shift__h102141[149] ?
																																																									      8'd149 :
																																																									      (mantissa_to_shift__h102141[150] ?
																																																										 8'd150 :
																																																										 (mantissa_to_shift__h102141[151] ?
																																																										    8'd151 :
																																																										    (mantissa_to_shift__h102141[152] ?
																																																										       8'd152 :
																																																										       (mantissa_to_shift__h102141[153] ?
																																																											  8'd153 :
																																																											  (mantissa_to_shift__h102141[154] ?
																																																											     8'd154 :
																																																											     (mantissa_to_shift__h102141[155] ?
																																																												8'd155 :
																																																												(mantissa_to_shift__h102141[156] ?
																																																												   8'd156 :
																																																												   (mantissa_to_shift__h102141[157] ?
																																																												      8'd157 :
																																																												      (mantissa_to_shift__h102141[158] ?
																																																													 8'd158 :
																																																													 (mantissa_to_shift__h102141[159] ?
																																																													    8'd159 :
																																																													    8'd160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h13766 =
	     { inst_spfpu_sqrt_rg_inter_stage[92:69],
	       !_theResult____h13729[28],
	       1'd0 } ;
  assign x__h14029 =
	     { inst_spfpu_sqrt_rg_inter_stage[27:3],
	       !_theResult____h13729[28] } ;
  assign x__h14418 =
	     inst_spfpu_sqrt_rg_inter_stage[70] | !_theResult____h13729[28] ;
  assign x__h14459 =
	     _theResult____h13729[28] ?
	       lv_remainder__h14481 :
	       _theResult____h13729 ;
  assign x__h14533 =
	     inst_spfpu_sqrt_rg_inter_stage[69] | !_theResult____h13729[28] ;
  assign x__h148002 = ~_theResult_____1__h102152 ;
  assign x__h148009 =
	     inst_dpfm_add_sub_ff_stage2_read__382_BIT_15_4_ETC___d2407 ||
	     inst_dpfm_add_sub_ff_stage2[6] ||
	     (!inst_dpfm_add_sub_ff_stage2[16] ||
	      !inst_dpfm_add_sub_ff_stage2[5]) &&
	     inst_dpfm_add_sub_ff_stage2[4] &&
	     inst_dpfm_add_sub_ff_stage2[14] &&
	     x__h148117 ;
  assign x__h148117 = sign2__h102104 ^ op_xor_sign3__h102117 ;
  assign x__h148125 =
	     (inst_dpfm_add_sub_ff_stage2_read__382_BIT_15_4_ETC___d2407 ||
	      inst_dpfm_add_sub_ff_stage2[6] ||
	      inst_dpfm_add_sub_ff_stage2[16] &&
	      inst_dpfm_add_sub_ff_stage2[5]) ?
	       2'd0 :
	       _theResult_____6_snd_snd__h148082 ;
  assign x__h148157 = x__h148159 & sign2__h102104 ;
  assign x__h148159 = inst_dpfm_add_sub_ff_stage2[4] & y__h148160 ;
  assign x__h148161 = x__h148162 & inst_dpfm_add_sub_ff_stage2[14] ;
  assign x__h148162 = ~inst_dpfm_add_sub_ff_stage2[4] ;
  assign x__h148166 =
	     (inst_dpfm_add_sub_ff_stage2_read__382_BIT_15_4_ETC___d2407 ||
	      inst_dpfm_add_sub_ff_stage2[6]) ?
	       2'd0 :
	       _theResult_____6_snd_snd_snd__h148129 ;
  assign x__h148190 = x__h148202 & y__h148203 ;
  assign x__h148202 =
	     (inst_dpfm_add_sub_ff_stage2_read__382_BIT_15_4_ETC___d2407 ||
	      inst_dpfm_add_sub_ff_stage2[6] ||
	      inst_dpfm_add_sub_ff_stage2[16] &&
	      inst_dpfm_add_sub_ff_stage2[5]) ?
	       inst_dpfm_add_sub_ff_stage2[1] :
	       _theResult_____6_fst__h148079 ;
  assign x__h148232 =
	     (inst_dpfm_add_sub_ff_stage2[1] ||
	      !inst_dpfm_add_sub_ff_stage2[6]) &&
	     inst_dpfm_add_sub_ff_stage2[15] ;
  assign x__h148416 =
	     (_theResult____h148339 == 160'd0) ?
	       ((inst_dpfm_add_sub_ff_stage4[12:10] == 3'b010) ?
		  2'b11 :
		  2'b01) :
	       2'd0 ;
  assign x__h171514 = inst_dpfm_add_sub_ff_stage5[7:0] - 8'd1 ;
  assign x__h171535 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208[106] |
	     IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208[104] ;
  assign x__h171617 =
	     IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208[105] |
	     IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208[104] ;
  assign x__h179844 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5130[7] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5130[6] ;
  assign x__h179975 =
	     _theResult____h179813[31] ?
	       6'd0 :
	       (_theResult____h179813[30] ?
		  6'd1 :
		  (_theResult____h179813[29] ?
		     6'd2 :
		     (_theResult____h179813[28] ?
			6'd3 :
			(_theResult____h179813[27] ?
			   6'd4 :
			   (_theResult____h179813[26] ?
			      6'd5 :
			      (_theResult____h179813[25] ?
				 6'd6 :
				 (_theResult____h179813[24] ?
				    6'd7 :
				    (_theResult____h179813[23] ?
				       6'd8 :
				       (_theResult____h179813[22] ?
					  6'd9 :
					  (_theResult____h179813[21] ?
					     6'd10 :
					     (_theResult____h179813[20] ?
						6'd11 :
						(_theResult____h179813[19] ?
						   6'd12 :
						   (_theResult____h179813[18] ?
						      6'd13 :
						      (_theResult____h179813[17] ?
							 6'd14 :
							 (_theResult____h179813[16] ?
							    6'd15 :
							    (_theResult____h179813[15] ?
							       6'd16 :
							       (_theResult____h179813[14] ?
								  6'd17 :
								  (_theResult____h179813[13] ?
								     6'd18 :
								     (_theResult____h179813[12] ?
									6'd19 :
									(_theResult____h179813[11] ?
									   6'd20 :
									   (_theResult____h179813[10] ?
									      6'd21 :
									      (_theResult____h179813[9] ?
										 6'd22 :
										 (_theResult____h179813[8] ?
										    6'd23 :
										    (_theResult____h179813[7] ?
										       6'd24 :
										       (_theResult____h179813[6] ?
											  6'd25 :
											  (_theResult____h179813[5] ?
											     6'd26 :
											     (_theResult____h179813[4] ?
												6'd27 :
												(_theResult____h179813[3] ?
												   6'd28 :
												   (_theResult____h179813[2] ?
												      6'd29 :
												      (_theResult____h179813[1] ?
													 6'd30 :
													 (_theResult____h179813[0] ?
													    6'd31 :
													    6'd32))))))))))))))))))))))))))))))) ;
  assign x__h184597 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5130[8] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5130[6] ;
  assign x__h184884 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5006[39] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5006[38] ;
  assign x__h185033 =
	     _theResult____h184853[63] ?
	       7'd0 :
	       (_theResult____h184853[62] ?
		  7'd1 :
		  (_theResult____h184853[61] ?
		     7'd2 :
		     (_theResult____h184853[60] ?
			7'd3 :
			(_theResult____h184853[59] ?
			   7'd4 :
			   (_theResult____h184853[58] ?
			      7'd5 :
			      (_theResult____h184853[57] ?
				 7'd6 :
				 (_theResult____h184853[56] ?
				    7'd7 :
				    (_theResult____h184853[55] ?
				       7'd8 :
				       (_theResult____h184853[54] ?
					  7'd9 :
					  (_theResult____h184853[53] ?
					     7'd10 :
					     (_theResult____h184853[52] ?
						7'd11 :
						(_theResult____h184853[51] ?
						   7'd12 :
						   (_theResult____h184853[50] ?
						      7'd13 :
						      (_theResult____h184853[49] ?
							 7'd14 :
							 (_theResult____h184853[48] ?
							    7'd15 :
							    (_theResult____h184853[47] ?
							       7'd16 :
							       (_theResult____h184853[46] ?
								  7'd17 :
								  (_theResult____h184853[45] ?
								     7'd18 :
								     (_theResult____h184853[44] ?
									7'd19 :
									(_theResult____h184853[43] ?
									   7'd20 :
									   (_theResult____h184853[42] ?
									      7'd21 :
									      (_theResult____h184853[41] ?
										 7'd22 :
										 (_theResult____h184853[40] ?
										    7'd23 :
										    (_theResult____h184853[39] ?
										       7'd24 :
										       (_theResult____h184853[38] ?
											  7'd25 :
											  (_theResult____h184853[37] ?
											     7'd26 :
											     (_theResult____h184853[36] ?
												7'd27 :
												(_theResult____h184853[35] ?
												   7'd28 :
												   (_theResult____h184853[34] ?
												      7'd29 :
												      (_theResult____h184853[33] ?
													 7'd30 :
													 (_theResult____h184853[32] ?
													    7'd31 :
													    (_theResult____h184853[31] ?
													       7'd32 :
													       (_theResult____h184853[30] ?
														  7'd33 :
														  (_theResult____h184853[29] ?
														     7'd34 :
														     (_theResult____h184853[28] ?
															7'd35 :
															(_theResult____h184853[27] ?
															   7'd36 :
															   (_theResult____h184853[26] ?
															      7'd37 :
															      (_theResult____h184853[25] ?
																 7'd38 :
																 (_theResult____h184853[24] ?
																    7'd39 :
																    (_theResult____h184853[23] ?
																       7'd40 :
																       (_theResult____h184853[22] ?
																	  7'd41 :
																	  (_theResult____h184853[21] ?
																	     7'd42 :
																	     (_theResult____h184853[20] ?
																		7'd43 :
																		(_theResult____h184853[19] ?
																		   7'd44 :
																		   (_theResult____h184853[18] ?
																		      7'd45 :
																		      (_theResult____h184853[17] ?
																			 7'd46 :
																			 (_theResult____h184853[16] ?
																			    7'd47 :
																			    (_theResult____h184853[15] ?
																			       7'd48 :
																			       (_theResult____h184853[14] ?
																				  7'd49 :
																				  (_theResult____h184853[13] ?
																				     7'd50 :
																				     (_theResult____h184853[12] ?
																					7'd51 :
																					(_theResult____h184853[11] ?
																					   7'd52 :
																					   (_theResult____h184853[10] ?
																					      7'd53 :
																					      (_theResult____h184853[9] ?
																						 7'd54 :
																						 (_theResult____h184853[8] ?
																						    7'd55 :
																						    (_theResult____h184853[7] ?
																						       7'd56 :
																						       (_theResult____h184853[6] ?
																							  7'd57 :
																							  (_theResult____h184853[5] ?
																							     7'd58 :
																							     (_theResult____h184853[4] ?
																								7'd59 :
																								(_theResult____h184853[3] ?
																								   7'd60 :
																								   (_theResult____h184853[2] ?
																								      7'd61 :
																								      (_theResult____h184853[1] ?
																									 7'd62 :
																									 (_theResult____h184853[0] ?
																									    7'd63 :
																									    7'd64))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h194136 =
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5006[40] |
	     IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5006[38] ;
  assign x__h194490 =
	     (setCanonicalNaN_argwget_BITS_191_TO_128__q39[63:32] ==
	      32'hFFFFFFFF) ?
	       setCanonicalNaN_argwget_BITS_191_TO_128__q39[31:0] :
	       32'h7FC00000 ;
  assign x__h194559 =
	     (setCanonicalNaN_argwget_BITS_127_TO_64__q40[63:32] ==
	      32'hFFFFFFFF) ?
	       setCanonicalNaN_argwget_BITS_127_TO_64__q40[31:0] :
	       32'h7FC00000 ;
  assign x__h194599 =
	     (setCanonicalNaN_argwget_BITS_63_TO_0__q41[63:32] ==
	      32'hFFFFFFFF) ?
	       setCanonicalNaN_argwget_BITS_63_TO_0__q41[31:0] :
	       32'h7FC00000 ;
  assign x__h200483 =
	     _theResult____h194396[31] ?
	       6'd0 :
	       (_theResult____h194396[30] ?
		  6'd1 :
		  (_theResult____h194396[29] ?
		     6'd2 :
		     (_theResult____h194396[28] ?
			6'd3 :
			(_theResult____h194396[27] ?
			   6'd4 :
			   (_theResult____h194396[26] ?
			      6'd5 :
			      (_theResult____h194396[25] ?
				 6'd6 :
				 (_theResult____h194396[24] ?
				    6'd7 :
				    (_theResult____h194396[23] ?
				       6'd8 :
				       (_theResult____h194396[22] ?
					  6'd9 :
					  (_theResult____h194396[21] ?
					     6'd10 :
					     (_theResult____h194396[20] ?
						6'd11 :
						(_theResult____h194396[19] ?
						   6'd12 :
						   (_theResult____h194396[18] ?
						      6'd13 :
						      (_theResult____h194396[17] ?
							 6'd14 :
							 (_theResult____h194396[16] ?
							    6'd15 :
							    (_theResult____h194396[15] ?
							       6'd16 :
							       (_theResult____h194396[14] ?
								  6'd17 :
								  (_theResult____h194396[13] ?
								     6'd18 :
								     (_theResult____h194396[12] ?
									6'd19 :
									(_theResult____h194396[11] ?
									   6'd20 :
									   (_theResult____h194396[10] ?
									      6'd21 :
									      (_theResult____h194396[9] ?
										 6'd22 :
										 (_theResult____h194396[8] ?
										    6'd23 :
										    (_theResult____h194396[7] ?
										       6'd24 :
										       (_theResult____h194396[6] ?
											  6'd25 :
											  (_theResult____h194396[5] ?
											     6'd26 :
											     (_theResult____h194396[4] ?
												6'd27 :
												(_theResult____h194396[3] ?
												   6'd28 :
												   (_theResult____h194396[2] ?
												      6'd29 :
												      (_theResult____h194396[1] ?
													 6'd30 :
													 (_theResult____h194396[0] ?
													    6'd31 :
													    6'd32))))))))))))))))))))))))))))))) ;
  assign x__h205133 =
	     IF_NOT_ff_input_first__319_BIT_1_544_558_AND_f_ETC___d3692[10] |
	     IF_NOT_ff_input_first__319_BIT_1_544_558_AND_f_ETC___d3692[9] ;
  assign x__h205213 =
	     _theResult____h194409[63] ?
	       7'd0 :
	       (_theResult____h194409[62] ?
		  7'd1 :
		  (_theResult____h194409[61] ?
		     7'd2 :
		     (_theResult____h194409[60] ?
			7'd3 :
			(_theResult____h194409[59] ?
			   7'd4 :
			   (_theResult____h194409[58] ?
			      7'd5 :
			      (_theResult____h194409[57] ?
				 7'd6 :
				 (_theResult____h194409[56] ?
				    7'd7 :
				    (_theResult____h194409[55] ?
				       7'd8 :
				       (_theResult____h194409[54] ?
					  7'd9 :
					  (_theResult____h194409[53] ?
					     7'd10 :
					     (_theResult____h194409[52] ?
						7'd11 :
						(_theResult____h194409[51] ?
						   7'd12 :
						   (_theResult____h194409[50] ?
						      7'd13 :
						      (_theResult____h194409[49] ?
							 7'd14 :
							 (_theResult____h194409[48] ?
							    7'd15 :
							    (_theResult____h194409[47] ?
							       7'd16 :
							       (_theResult____h194409[46] ?
								  7'd17 :
								  (_theResult____h194409[45] ?
								     7'd18 :
								     (_theResult____h194409[44] ?
									7'd19 :
									(_theResult____h194409[43] ?
									   7'd20 :
									   (_theResult____h194409[42] ?
									      7'd21 :
									      (_theResult____h194409[41] ?
										 7'd22 :
										 (_theResult____h194409[40] ?
										    7'd23 :
										    (_theResult____h194409[39] ?
										       7'd24 :
										       (_theResult____h194409[38] ?
											  7'd25 :
											  (_theResult____h194409[37] ?
											     7'd26 :
											     (_theResult____h194409[36] ?
												7'd27 :
												(_theResult____h194409[35] ?
												   7'd28 :
												   (_theResult____h194409[34] ?
												      7'd29 :
												      (_theResult____h194409[33] ?
													 7'd30 :
													 (_theResult____h194409[32] ?
													    7'd31 :
													    (_theResult____h194409[31] ?
													       7'd32 :
													       (_theResult____h194409[30] ?
														  7'd33 :
														  (_theResult____h194409[29] ?
														     7'd34 :
														     (_theResult____h194409[28] ?
															7'd35 :
															(_theResult____h194409[27] ?
															   7'd36 :
															   (_theResult____h194409[26] ?
															      7'd37 :
															      (_theResult____h194409[25] ?
																 7'd38 :
																 (_theResult____h194409[24] ?
																    7'd39 :
																    (_theResult____h194409[23] ?
																       7'd40 :
																       (_theResult____h194409[22] ?
																	  7'd41 :
																	  (_theResult____h194409[21] ?
																	     7'd42 :
																	     (_theResult____h194409[20] ?
																		7'd43 :
																		(_theResult____h194409[19] ?
																		   7'd44 :
																		   (_theResult____h194409[18] ?
																		      7'd45 :
																		      (_theResult____h194409[17] ?
																			 7'd46 :
																			 (_theResult____h194409[16] ?
																			    7'd47 :
																			    (_theResult____h194409[15] ?
																			       7'd48 :
																			       (_theResult____h194409[14] ?
																				  7'd49 :
																				  (_theResult____h194409[13] ?
																				     7'd50 :
																				     (_theResult____h194409[12] ?
																					7'd51 :
																					(_theResult____h194409[11] ?
																					   7'd52 :
																					   (_theResult____h194409[10] ?
																					      7'd53 :
																					      (_theResult____h194409[9] ?
																						 7'd54 :
																						 (_theResult____h194409[8] ?
																						    7'd55 :
																						    (_theResult____h194409[7] ?
																						       7'd56 :
																						       (_theResult____h194409[6] ?
																							  7'd57 :
																							  (_theResult____h194409[5] ?
																							     7'd58 :
																							     (_theResult____h194409[4] ?
																								7'd59 :
																								(_theResult____h194409[3] ?
																								   7'd60 :
																								   (_theResult____h194409[2] ?
																								      7'd61 :
																								      (_theResult____h194409[1] ?
																									 7'd62 :
																									 (_theResult____h194409[0] ?
																									    7'd63 :
																									    7'd64))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h214309 =
	     IF_NOT_ff_input_first__319_BIT_1_544_558_AND_f_ETC___d3692[11] |
	     IF_NOT_ff_input_first__319_BIT_1_544_558_AND_f_ETC___d3692[9] ;
  assign x__h215489 =
	     { condFlags32_arg_wget[69:62] == 8'd0 &&
	       condFlags32_arg_wget[92:70] != 23'd0,
	       condFlags32_arg_wget[92:70] == 23'd0 &&
	       condFlags32_arg_wget[69:62] == 8'd0,
	       condFlags32_arg_wget[69:62] == 8'd255 &&
	       condFlags32_argwget_BITS_92_TO_70__q50[22],
	       condFlags32_arg_wget[69:62] == 8'd255 &&
	       condFlags32_arg_wget[92:70] == 23'd0,
	       condFlags32_arg_wget[69:62] == 8'd255 &&
	       !condFlags32_argwget_BITS_92_TO_70__q50[22] &&
	       condFlags32_arg_wget[92:70] != 23'd0 } ;
  assign x__h215649 =
	     { condFlags32_arg_wget[38:31] == 8'd0 &&
	       condFlags32_arg_wget[61:39] != 23'd0,
	       condFlags32_arg_wget[61:39] == 23'd0 &&
	       condFlags32_arg_wget[38:31] == 8'd0,
	       condFlags32_arg_wget[38:31] == 8'd255 &&
	       condFlags32_argwget_BITS_61_TO_39__q51[22],
	       condFlags32_arg_wget[38:31] == 8'd255 &&
	       condFlags32_arg_wget[61:39] == 23'd0,
	       condFlags32_arg_wget[38:31] == 8'd255 &&
	       !condFlags32_argwget_BITS_61_TO_39__q51[22] &&
	       condFlags32_arg_wget[61:39] != 23'd0 } ;
  assign x__h215746 =
	     { condFlags32_arg_wget[7:0] == 8'd0 &&
	       condFlags32_arg_wget[30:8] != 23'd0,
	       condFlags32_arg_wget[30:8] == 23'd0 &&
	       condFlags32_arg_wget[7:0] == 8'd0,
	       condFlags32_arg_wget[7:0] == 8'd255 &&
	       condFlags32_argwget_BITS_30_TO_8__q52[22],
	       condFlags32_arg_wget[7:0] == 8'd255 &&
	       condFlags32_arg_wget[30:8] == 23'd0,
	       condFlags32_arg_wget[7:0] == 8'd255 &&
	       !condFlags32_argwget_BITS_30_TO_8__q52[22] &&
	       condFlags32_arg_wget[30:8] != 23'd0 } ;
  assign x__h216812 =
	     final_result__h215913[0] |
	     IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3881[21] ;
  assign x__h217223 =
	     IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3881[22] |
	     IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3881[21] ;
  assign x__h217988 =
	     { condFlags64_arg_wget[136:126] == 11'd0 &&
	       condFlags64_arg_wget[188:137] != 52'd0,
	       condFlags64_arg_wget[188:137] == 52'd0 &&
	       condFlags64_arg_wget[136:126] == 11'd0,
	       condFlags64_arg_wget[136:126] == 11'd2047 &&
	       condFlags64_argwget_BITS_188_TO_137__q30[51],
	       condFlags64_arg_wget[136:126] == 11'd2047 &&
	       condFlags64_arg_wget[188:137] == 52'd0,
	       condFlags64_arg_wget[136:126] == 11'd2047 &&
	       !condFlags64_argwget_BITS_188_TO_137__q30[51] &&
	       condFlags64_arg_wget[188:137] != 52'd0 } ;
  assign x__h218148 =
	     { condFlags64_arg_wget[73:63] == 11'd0 &&
	       condFlags64_arg_wget[125:74] != 52'd0,
	       condFlags64_arg_wget[125:74] == 52'd0 &&
	       condFlags64_arg_wget[73:63] == 11'd0,
	       condFlags64_arg_wget[73:63] == 11'd2047 &&
	       condFlags64_argwget_BITS_125_TO_74__q31[51],
	       condFlags64_arg_wget[73:63] == 11'd2047 &&
	       condFlags64_arg_wget[125:74] == 52'd0,
	       condFlags64_arg_wget[73:63] == 11'd2047 &&
	       !condFlags64_argwget_BITS_125_TO_74__q31[51] &&
	       condFlags64_arg_wget[125:74] != 52'd0 } ;
  assign x__h218245 =
	     { condFlags64_arg_wget[10:0] == 11'd0 &&
	       condFlags64_arg_wget[62:11] != 52'd0,
	       condFlags64_arg_wget[62:11] == 52'd0 &&
	       condFlags64_arg_wget[10:0] == 11'd0,
	       condFlags64_arg_wget[10:0] == 11'd2047 &&
	       condFlags64_argwget_BITS_62_TO_11__q32[51],
	       condFlags64_arg_wget[10:0] == 11'd2047 &&
	       condFlags64_arg_wget[62:11] == 52'd0,
	       condFlags64_arg_wget[10:0] == 11'd2047 &&
	       !condFlags64_argwget_BITS_62_TO_11__q32[51] &&
	       condFlags64_arg_wget[62:11] != 52'd0 } ;
  assign x__h218516 = lv_exp__h218402 - 12'd1023 ;
  assign x__h219315 =
	     final_result__h218413[0] |
	     IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4050[50] ;
  assign x__h219724 =
	     IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4050[51] |
	     IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4050[50] ;
  assign x__h22049 = msb_zeros__h21983 - 6'd1 ;
  assign x__h22075 = { 4'd0, msb_zeros__h21983 } ;
  assign x__h221152 =
	     (setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
	      condFlags32_reswget_BITS_14_TO_10__q53[1]) ?
	       10'd1 :
	       ((setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
		 condFlags32_res_wget[14:10] == 5'd0) ?
		  10'd2 :
		  ((setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
		    condFlags32_reswget_BITS_14_TO_10__q53[4]) ?
		     10'd4 :
		     ((setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
		       condFlags32_reswget_BITS_14_TO_10__q53[3]) ?
			10'd8 :
			((!setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
			  condFlags32_reswget_BITS_14_TO_10__q53[3]) ?
			   10'd16 :
			   ((!setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
			     condFlags32_reswget_BITS_14_TO_10__q53[4]) ?
			      10'd32 :
			      ((!setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
				condFlags32_res_wget[14:10] == 5'd0) ?
				 10'd64 :
				 ((!setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] &&
				   condFlags32_reswget_BITS_14_TO_10__q53[1]) ?
				    10'd128 :
				    (condFlags32_reswget_BITS_14_TO_10__q53[0] ?
				       10'd256 :
				       10'd512)))))))) ;
  assign x__h222057 =
	     (ff_input_D_OUT[208] &&
	      condFlags64_reswget_BITS_14_TO_10__q33[1]) ?
	       10'd1 :
	       ((ff_input_D_OUT[208] && condFlags64_res_wget[14:10] == 5'd0) ?
		  10'd2 :
		  ((ff_input_D_OUT[208] &&
		    condFlags64_reswget_BITS_14_TO_10__q33[4]) ?
		     10'd4 :
		     ((ff_input_D_OUT[208] &&
		       condFlags64_reswget_BITS_14_TO_10__q33[3]) ?
			10'd8 :
			((!ff_input_D_OUT[208] &&
			  condFlags64_reswget_BITS_14_TO_10__q33[3]) ?
			   10'd16 :
			   ((!ff_input_D_OUT[208] &&
			     condFlags64_reswget_BITS_14_TO_10__q33[4]) ?
			      10'd32 :
			      ((!ff_input_D_OUT[208] &&
				condFlags64_res_wget[14:10] == 5'd0) ?
				 10'd64 :
				 ((!ff_input_D_OUT[208] &&
				   condFlags64_reswget_BITS_14_TO_10__q33[1]) ?
				    10'd128 :
				    (condFlags64_reswget_BITS_14_TO_10__q33[0] ?
				       10'd256 :
				       10'd512)))))))) ;
  assign x__h223559 =
	     getMant32_reswget_BITS_68_TO_46__q48[22] ?
	       5'd0 :
	       (getMant32_reswget_BITS_68_TO_46__q48[21] ?
		  5'd1 :
		  (getMant32_reswget_BITS_68_TO_46__q48[20] ?
		     5'd2 :
		     (getMant32_reswget_BITS_68_TO_46__q48[19] ?
			5'd3 :
			(getMant32_reswget_BITS_68_TO_46__q48[18] ?
			   5'd4 :
			   (getMant32_reswget_BITS_68_TO_46__q48[17] ?
			      5'd5 :
			      (getMant32_reswget_BITS_68_TO_46__q48[16] ?
				 5'd6 :
				 (getMant32_reswget_BITS_68_TO_46__q48[15] ?
				    5'd7 :
				    (getMant32_reswget_BITS_68_TO_46__q48[14] ?
				       5'd8 :
				       (getMant32_reswget_BITS_68_TO_46__q48[13] ?
					  5'd9 :
					  (getMant32_reswget_BITS_68_TO_46__q48[12] ?
					     5'd10 :
					     (getMant32_reswget_BITS_68_TO_46__q48[11] ?
						5'd11 :
						(getMant32_reswget_BITS_68_TO_46__q48[10] ?
						   5'd12 :
						   (getMant32_reswget_BITS_68_TO_46__q48[9] ?
						      5'd13 :
						      (getMant32_reswget_BITS_68_TO_46__q48[8] ?
							 5'd14 :
							 (getMant32_reswget_BITS_68_TO_46__q48[7] ?
							    5'd15 :
							    (getMant32_reswget_BITS_68_TO_46__q48[6] ?
							       5'd16 :
							       (getMant32_reswget_BITS_68_TO_46__q48[5] ?
								  5'd17 :
								  (getMant32_reswget_BITS_68_TO_46__q48[4] ?
								     5'd18 :
								     (getMant32_reswget_BITS_68_TO_46__q48[3] ?
									5'd19 :
									(getMant32_reswget_BITS_68_TO_46__q48[2] ?
									   5'd20 :
									   (getMant32_reswget_BITS_68_TO_46__q48[1] ?
									      5'd21 :
									      (getMant32_reswget_BITS_68_TO_46__q48[0] ?
										 5'd22 :
										 5'd23)))))))))))))))))))))) ;
  assign x__h228416 = getExp64_res_wget[32:22] - 11'd896 ;
  assign x__h228736 =
	     IF_IF_getExp64_res_whas__996_THEN_getExp64_res_ETC___d4320[24] |
	     lv_sticky__h228538 ;
  assign x__h228837 = x__h228839 | lv_sticky__h228538 ;
  assign x__h228839 =
	     IF_IF_getExp64_res_whas__996_THEN_getExp64_res_ETC___d4320[25] |
	     IF_IF_getExp64_res_whas__996_THEN_getExp64_res_ETC___d4320[24] ;
  assign x__h230955 =
	     { ~lv_op1_subnormal__h230902, getMant32_res_wget[68:46] } ;
  assign x__h231019 =
	     { ~lv_op2_subnormal__h230903, getMant32_res_wget[45:23] } ;
  assign x__h231092 = x__h231094 + y__h231095 ;
  assign x__h231094 = x__h231096 - 10'd127 ;
  assign x__h231096 = exp1_temp__h230911 + exp2_temp__h230912 ;
  assign x__h231147 =
	     lv_invalid__h215893 ||
	     IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d5235 ||
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[1]) &&
	     (condFlags32_reswget_BITS_14_TO_10__q53[3] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[3]) ;
  assign x__h231410 =
	     !lv_invalid__h215893 &&
	     !IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d5235 &&
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[1]) &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	     !condFlags32_reswget_BITS_9_TO_5__q54[3] ;
  assign x__h231416 =
	     !lv_invalid__h215893 &&
	     !IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d5235 &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	     !condFlags32_reswget_BITS_9_TO_5__q54[1] &&
	     (condFlags32_reswget_BITS_14_TO_10__q53[3] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[3]) ;
  assign x__h231465 =
	     (lv_invalid__h215893 ||
	      IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d5235) ?
	       quiet_nan_two__h230907 :
	       _theResult___fst__h231333 ;
  assign x__h231478 = condFlags32_reswget_BITS_14_TO_10__q53[2] & y__h231481 ;
  assign x__h231568 = lv_op1_subnormal__h230902 | lv_op2_subnormal__h230903 ;
  assign x__h232411 =
	     { ~lv_op1_subnormal__h232358, getMant64_res_wget[155:104] } ;
  assign x__h232475 =
	     { ~lv_op2_subnormal__h232359, getMant64_res_wget[103:52] } ;
  assign x__h232548 = x__h232550 + y__h232551 ;
  assign x__h232550 = x__h232552 - 13'd1023 ;
  assign x__h232552 = exp1_temp__h232367 + exp2_temp__h232368 ;
  assign x__h232599 =
	     lv_invalid__h218392 ||
	     IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d5313 ||
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[1]) &&
	     (condFlags64_reswget_BITS_14_TO_10__q33[3] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[3]) ;
  assign x__h232862 =
	     !lv_invalid__h218392 &&
	     !IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d5313 &&
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[1]) &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	     !condFlags64_reswget_BITS_9_TO_5__q34[3] ;
  assign x__h232868 =
	     !lv_invalid__h218392 &&
	     !IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d5313 &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     !condFlags64_reswget_BITS_9_TO_5__q34[1] &&
	     (condFlags64_reswget_BITS_14_TO_10__q33[3] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[3]) ;
  assign x__h232916 =
	     (lv_invalid__h218392 ||
	      IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d5313) ?
	       quiet_nan_two__h232363 :
	       _theResult___fst__h232785 ;
  assign x__h232929 = condFlags64_reswget_BITS_14_TO_10__q33[2] & y__h232932 ;
  assign x__h233019 = lv_op1_subnormal__h232358 | lv_op2_subnormal__h232359 ;
  assign x__h234943 = exp1__h234888 + y__h234945 ;
  assign x__h234950 =
	     (~condFlags32_reswget_BITS_14_TO_10__q53[4]) ?
	       5'd0 :
	       (getMant32_reswget_BITS_68_TO_46__q48[22] ?
		  5'd1 :
		  (getMant32_reswget_BITS_68_TO_46__q48[21] ?
		     5'd2 :
		     (getMant32_reswget_BITS_68_TO_46__q48[20] ?
			5'd3 :
			(getMant32_reswget_BITS_68_TO_46__q48[19] ?
			   5'd4 :
			   (getMant32_reswget_BITS_68_TO_46__q48[18] ?
			      5'd5 :
			      (getMant32_reswget_BITS_68_TO_46__q48[17] ?
				 5'd6 :
				 (getMant32_reswget_BITS_68_TO_46__q48[16] ?
				    5'd7 :
				    (getMant32_reswget_BITS_68_TO_46__q48[15] ?
				       5'd8 :
				       (getMant32_reswget_BITS_68_TO_46__q48[14] ?
					  5'd9 :
					  (getMant32_reswget_BITS_68_TO_46__q48[13] ?
					     5'd10 :
					     (getMant32_reswget_BITS_68_TO_46__q48[12] ?
						5'd11 :
						(getMant32_reswget_BITS_68_TO_46__q48[11] ?
						   5'd12 :
						   (getMant32_reswget_BITS_68_TO_46__q48[10] ?
						      5'd13 :
						      (getMant32_reswget_BITS_68_TO_46__q48[9] ?
							 5'd14 :
							 (getMant32_reswget_BITS_68_TO_46__q48[8] ?
							    5'd15 :
							    (getMant32_reswget_BITS_68_TO_46__q48[7] ?
							       5'd16 :
							       (getMant32_reswget_BITS_68_TO_46__q48[6] ?
								  5'd17 :
								  (getMant32_reswget_BITS_68_TO_46__q48[5] ?
								     5'd18 :
								     (getMant32_reswget_BITS_68_TO_46__q48[4] ?
									5'd19 :
									(getMant32_reswget_BITS_68_TO_46__q48[3] ?
									   5'd20 :
									   (getMant32_reswget_BITS_68_TO_46__q48[2] ?
									      5'd21 :
									      (getMant32_reswget_BITS_68_TO_46__q48[1] ?
										 5'd22 :
										 (getMant32_reswget_BITS_68_TO_46__q48[0] ?
										    5'd23 :
										    5'd24))))))))))))))))))))))) ;
  assign x__h238340 =
	     (~condFlags32_reswget_BITS_9_TO_5__q54[4]) ?
	       5'd0 :
	       (getMant32_reswget_BITS_45_TO_23__q55[22] ?
		  5'd1 :
		  (getMant32_reswget_BITS_45_TO_23__q55[21] ?
		     5'd2 :
		     (getMant32_reswget_BITS_45_TO_23__q55[20] ?
			5'd3 :
			(getMant32_reswget_BITS_45_TO_23__q55[19] ?
			   5'd4 :
			   (getMant32_reswget_BITS_45_TO_23__q55[18] ?
			      5'd5 :
			      (getMant32_reswget_BITS_45_TO_23__q55[17] ?
				 5'd6 :
				 (getMant32_reswget_BITS_45_TO_23__q55[16] ?
				    5'd7 :
				    (getMant32_reswget_BITS_45_TO_23__q55[15] ?
				       5'd8 :
				       (getMant32_reswget_BITS_45_TO_23__q55[14] ?
					  5'd9 :
					  (getMant32_reswget_BITS_45_TO_23__q55[13] ?
					     5'd10 :
					     (getMant32_reswget_BITS_45_TO_23__q55[12] ?
						5'd11 :
						(getMant32_reswget_BITS_45_TO_23__q55[11] ?
						   5'd12 :
						   (getMant32_reswget_BITS_45_TO_23__q55[10] ?
						      5'd13 :
						      (getMant32_reswget_BITS_45_TO_23__q55[9] ?
							 5'd14 :
							 (getMant32_reswget_BITS_45_TO_23__q55[8] ?
							    5'd15 :
							    (getMant32_reswget_BITS_45_TO_23__q55[7] ?
							       5'd16 :
							       (getMant32_reswget_BITS_45_TO_23__q55[6] ?
								  5'd17 :
								  (getMant32_reswget_BITS_45_TO_23__q55[5] ?
								     5'd18 :
								     (getMant32_reswget_BITS_45_TO_23__q55[4] ?
									5'd19 :
									(getMant32_reswget_BITS_45_TO_23__q55[3] ?
									   5'd20 :
									   (getMant32_reswget_BITS_45_TO_23__q55[2] ?
									      5'd21 :
									      (getMant32_reswget_BITS_45_TO_23__q55[1] ?
										 5'd22 :
										 (getMant32_reswget_BITS_45_TO_23__q55[0] ?
										    5'd23 :
										    5'd24))))))))))))))))))))))) ;
  assign x__h241727 = man1__h234880 << x__h234950 ;
  assign x__h241755 = man2__h234881 << x__h238340 ;
  assign x__h241785 =
	     setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ^
	     setCanonicalNaN_reswget_BITS_63_TO_32__q43[31] ;
  assign x__h241849 =
	     !IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 &&
	     !lv_op2_Nan__h197438 &&
	     (!condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      !condFlags32_reswget_BITS_9_TO_5__q54[1]) &&
	     (!condFlags32_reswget_BITS_14_TO_10__q53[3] ||
	      !condFlags32_reswget_BITS_9_TO_5__q54[3]) &&
	     (condFlags32_reswget_BITS_14_TO_10__q53[1] ||
	      condFlags32_reswget_BITS_9_TO_5__q54[3]) ;
  assign x__h241863 =
	     !IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 &&
	     !lv_op2_Nan__h197438 &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	     condFlags32_reswget_BITS_9_TO_5__q54[3] ;
  assign x__h241868 =
	     !IF_condFlags32_res_whas__353_THEN_condFlags32__ETC___d3359 &&
	     !lv_op2_Nan__h197438 &&
	     !condFlags32_reswget_BITS_14_TO_10__q53[1] &&
	     !condFlags32_reswget_BITS_9_TO_5__q54[3] &&
	     (condFlags32_reswget_BITS_9_TO_5__q54[1] ||
	      condFlags32_reswget_BITS_14_TO_10__q53[3]) ;
  assign x__h243171 = exp1__h243116 + y__h243173 ;
  assign x__h243178 =
	     (~condFlags64_reswget_BITS_14_TO_10__q33[4]) ?
	       6'd0 :
	       (getMant64_reswget_BITS_155_TO_104__q28[51] ?
		  6'd1 :
		  (getMant64_reswget_BITS_155_TO_104__q28[50] ?
		     6'd2 :
		     (getMant64_reswget_BITS_155_TO_104__q28[49] ?
			6'd3 :
			(getMant64_reswget_BITS_155_TO_104__q28[48] ?
			   6'd4 :
			   (getMant64_reswget_BITS_155_TO_104__q28[47] ?
			      6'd5 :
			      (getMant64_reswget_BITS_155_TO_104__q28[46] ?
				 6'd6 :
				 (getMant64_reswget_BITS_155_TO_104__q28[45] ?
				    6'd7 :
				    (getMant64_reswget_BITS_155_TO_104__q28[44] ?
				       6'd8 :
				       (getMant64_reswget_BITS_155_TO_104__q28[43] ?
					  6'd9 :
					  (getMant64_reswget_BITS_155_TO_104__q28[42] ?
					     6'd10 :
					     (getMant64_reswget_BITS_155_TO_104__q28[41] ?
						6'd11 :
						(getMant64_reswget_BITS_155_TO_104__q28[40] ?
						   6'd12 :
						   (getMant64_reswget_BITS_155_TO_104__q28[39] ?
						      6'd13 :
						      (getMant64_reswget_BITS_155_TO_104__q28[38] ?
							 6'd14 :
							 (getMant64_reswget_BITS_155_TO_104__q28[37] ?
							    6'd15 :
							    (getMant64_reswget_BITS_155_TO_104__q28[36] ?
							       6'd16 :
							       (getMant64_reswget_BITS_155_TO_104__q28[35] ?
								  6'd17 :
								  (getMant64_reswget_BITS_155_TO_104__q28[34] ?
								     6'd18 :
								     (getMant64_reswget_BITS_155_TO_104__q28[33] ?
									6'd19 :
									(getMant64_reswget_BITS_155_TO_104__q28[32] ?
									   6'd20 :
									   (getMant64_reswget_BITS_155_TO_104__q28[31] ?
									      6'd21 :
									      (getMant64_reswget_BITS_155_TO_104__q28[30] ?
										 6'd22 :
										 (getMant64_reswget_BITS_155_TO_104__q28[29] ?
										    6'd23 :
										    (getMant64_reswget_BITS_155_TO_104__q28[28] ?
										       6'd24 :
										       (getMant64_reswget_BITS_155_TO_104__q28[27] ?
											  6'd25 :
											  (getMant64_reswget_BITS_155_TO_104__q28[26] ?
											     6'd26 :
											     (getMant64_reswget_BITS_155_TO_104__q28[25] ?
												6'd27 :
												(getMant64_reswget_BITS_155_TO_104__q28[24] ?
												   6'd28 :
												   (getMant64_reswget_BITS_155_TO_104__q28[23] ?
												      6'd29 :
												      (getMant64_reswget_BITS_155_TO_104__q28[22] ?
													 6'd30 :
													 (getMant64_reswget_BITS_155_TO_104__q28[21] ?
													    6'd31 :
													    (getMant64_reswget_BITS_155_TO_104__q28[20] ?
													       6'd32 :
													       (getMant64_reswget_BITS_155_TO_104__q28[19] ?
														  6'd33 :
														  (getMant64_reswget_BITS_155_TO_104__q28[18] ?
														     6'd34 :
														     (getMant64_reswget_BITS_155_TO_104__q28[17] ?
															6'd35 :
															(getMant64_reswget_BITS_155_TO_104__q28[16] ?
															   6'd36 :
															   (getMant64_reswget_BITS_155_TO_104__q28[15] ?
															      6'd37 :
															      (getMant64_reswget_BITS_155_TO_104__q28[14] ?
																 6'd38 :
																 (getMant64_reswget_BITS_155_TO_104__q28[13] ?
																    6'd39 :
																    (getMant64_reswget_BITS_155_TO_104__q28[12] ?
																       6'd40 :
																       (getMant64_reswget_BITS_155_TO_104__q28[11] ?
																	  6'd41 :
																	  (getMant64_reswget_BITS_155_TO_104__q28[10] ?
																	     6'd42 :
																	     (getMant64_reswget_BITS_155_TO_104__q28[9] ?
																		6'd43 :
																		(getMant64_reswget_BITS_155_TO_104__q28[8] ?
																		   6'd44 :
																		   (getMant64_reswget_BITS_155_TO_104__q28[7] ?
																		      6'd45 :
																		      (getMant64_reswget_BITS_155_TO_104__q28[6] ?
																			 6'd46 :
																			 (getMant64_reswget_BITS_155_TO_104__q28[5] ?
																			    6'd47 :
																			    (getMant64_reswget_BITS_155_TO_104__q28[4] ?
																			       6'd48 :
																			       (getMant64_reswget_BITS_155_TO_104__q28[3] ?
																				  6'd49 :
																				  (getMant64_reswget_BITS_155_TO_104__q28[2] ?
																				     6'd50 :
																				     (getMant64_reswget_BITS_155_TO_104__q28[1] ?
																					6'd51 :
																					(getMant64_reswget_BITS_155_TO_104__q28[0] ?
																					   6'd52 :
																					   6'd53)))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h250599 =
	     (~condFlags64_reswget_BITS_9_TO_5__q34[4]) ?
	       6'd0 :
	       (getMant64_reswget_BITS_103_TO_52__q35[51] ?
		  6'd1 :
		  (getMant64_reswget_BITS_103_TO_52__q35[50] ?
		     6'd2 :
		     (getMant64_reswget_BITS_103_TO_52__q35[49] ?
			6'd3 :
			(getMant64_reswget_BITS_103_TO_52__q35[48] ?
			   6'd4 :
			   (getMant64_reswget_BITS_103_TO_52__q35[47] ?
			      6'd5 :
			      (getMant64_reswget_BITS_103_TO_52__q35[46] ?
				 6'd6 :
				 (getMant64_reswget_BITS_103_TO_52__q35[45] ?
				    6'd7 :
				    (getMant64_reswget_BITS_103_TO_52__q35[44] ?
				       6'd8 :
				       (getMant64_reswget_BITS_103_TO_52__q35[43] ?
					  6'd9 :
					  (getMant64_reswget_BITS_103_TO_52__q35[42] ?
					     6'd10 :
					     (getMant64_reswget_BITS_103_TO_52__q35[41] ?
						6'd11 :
						(getMant64_reswget_BITS_103_TO_52__q35[40] ?
						   6'd12 :
						   (getMant64_reswget_BITS_103_TO_52__q35[39] ?
						      6'd13 :
						      (getMant64_reswget_BITS_103_TO_52__q35[38] ?
							 6'd14 :
							 (getMant64_reswget_BITS_103_TO_52__q35[37] ?
							    6'd15 :
							    (getMant64_reswget_BITS_103_TO_52__q35[36] ?
							       6'd16 :
							       (getMant64_reswget_BITS_103_TO_52__q35[35] ?
								  6'd17 :
								  (getMant64_reswget_BITS_103_TO_52__q35[34] ?
								     6'd18 :
								     (getMant64_reswget_BITS_103_TO_52__q35[33] ?
									6'd19 :
									(getMant64_reswget_BITS_103_TO_52__q35[32] ?
									   6'd20 :
									   (getMant64_reswget_BITS_103_TO_52__q35[31] ?
									      6'd21 :
									      (getMant64_reswget_BITS_103_TO_52__q35[30] ?
										 6'd22 :
										 (getMant64_reswget_BITS_103_TO_52__q35[29] ?
										    6'd23 :
										    (getMant64_reswget_BITS_103_TO_52__q35[28] ?
										       6'd24 :
										       (getMant64_reswget_BITS_103_TO_52__q35[27] ?
											  6'd25 :
											  (getMant64_reswget_BITS_103_TO_52__q35[26] ?
											     6'd26 :
											     (getMant64_reswget_BITS_103_TO_52__q35[25] ?
												6'd27 :
												(getMant64_reswget_BITS_103_TO_52__q35[24] ?
												   6'd28 :
												   (getMant64_reswget_BITS_103_TO_52__q35[23] ?
												      6'd29 :
												      (getMant64_reswget_BITS_103_TO_52__q35[22] ?
													 6'd30 :
													 (getMant64_reswget_BITS_103_TO_52__q35[21] ?
													    6'd31 :
													    (getMant64_reswget_BITS_103_TO_52__q35[20] ?
													       6'd32 :
													       (getMant64_reswget_BITS_103_TO_52__q35[19] ?
														  6'd33 :
														  (getMant64_reswget_BITS_103_TO_52__q35[18] ?
														     6'd34 :
														     (getMant64_reswget_BITS_103_TO_52__q35[17] ?
															6'd35 :
															(getMant64_reswget_BITS_103_TO_52__q35[16] ?
															   6'd36 :
															   (getMant64_reswget_BITS_103_TO_52__q35[15] ?
															      6'd37 :
															      (getMant64_reswget_BITS_103_TO_52__q35[14] ?
																 6'd38 :
																 (getMant64_reswget_BITS_103_TO_52__q35[13] ?
																    6'd39 :
																    (getMant64_reswget_BITS_103_TO_52__q35[12] ?
																       6'd40 :
																       (getMant64_reswget_BITS_103_TO_52__q35[11] ?
																	  6'd41 :
																	  (getMant64_reswget_BITS_103_TO_52__q35[10] ?
																	     6'd42 :
																	     (getMant64_reswget_BITS_103_TO_52__q35[9] ?
																		6'd43 :
																		(getMant64_reswget_BITS_103_TO_52__q35[8] ?
																		   6'd44 :
																		   (getMant64_reswget_BITS_103_TO_52__q35[7] ?
																		      6'd45 :
																		      (getMant64_reswget_BITS_103_TO_52__q35[6] ?
																			 6'd46 :
																			 (getMant64_reswget_BITS_103_TO_52__q35[5] ?
																			    6'd47 :
																			    (getMant64_reswget_BITS_103_TO_52__q35[4] ?
																			       6'd48 :
																			       (getMant64_reswget_BITS_103_TO_52__q35[3] ?
																				  6'd49 :
																				  (getMant64_reswget_BITS_103_TO_52__q35[2] ?
																				     6'd50 :
																				     (getMant64_reswget_BITS_103_TO_52__q35[1] ?
																					6'd51 :
																					(getMant64_reswget_BITS_103_TO_52__q35[0] ?
																					   6'd52 :
																					   6'd53)))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h25552 =
	     (!inst_spfm_add_sub_ff_input_register_read__59_B_ETC___d464 ||
	      inst_spfm_add_sub_ff_input_register[107] &&
	      inst_spfm_add_sub_ff_input_register[59:50] == 10'd254) &&
	     (!inst_spfm_add_sub_ff_input_register[2] ||
	      !(x__h25583 ^ inst_spfm_add_sub_ff_input_register[5])) ;
  assign x__h25583 =
	     inst_spfm_add_sub_ff_input_register[49] ^
	     inst_spfm_add_sub_ff_input_register[48] ;
  assign x__h25613 =
	     inst_spfm_add_sub_ff_input_register_read__59_B_ETC___d464 &&
	     (!inst_spfm_add_sub_ff_input_register[107] ||
	      inst_spfm_add_sub_ff_input_register[59:50] != 10'd254) &&
	     (inst_spfm_add_sub_ff_input_register_read__59_B_ETC___d463 ^
	      10'h200) <
	     10'd361 &&
	     (!inst_spfm_add_sub_ff_input_register[2] ||
	      inst_spfm_add_sub_ff_input_register[12] ||
	      inst_spfm_add_sub_ff_input_register[13]) &&
	     !inst_spfm_add_sub_ff_input_register[14] ;
  assign x__h258017 = man1__h243108 << x__h243178 ;
  assign x__h258045 = man2__h243109 << x__h250599 ;
  assign x__h258127 =
	     !IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 &&
	     !lv_op2_Nan__h199317 &&
	     (!condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      !condFlags64_reswget_BITS_9_TO_5__q34[1]) &&
	     (!condFlags64_reswget_BITS_14_TO_10__q33[3] ||
	      !condFlags64_reswget_BITS_9_TO_5__q34[3]) &&
	     (condFlags64_reswget_BITS_14_TO_10__q33[1] ||
	      condFlags64_reswget_BITS_9_TO_5__q34[3]) ;
  assign x__h258141 =
	     !IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 &&
	     !lv_op2_Nan__h199317 &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     condFlags64_reswget_BITS_9_TO_5__q34[3] ;
  assign x__h258146 =
	     !IF_condFlags64_res_whas__438_THEN_condFlags64__ETC___d3444 &&
	     !lv_op2_Nan__h199317 &&
	     !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	     !condFlags64_reswget_BITS_9_TO_5__q34[3] &&
	     (condFlags64_reswget_BITS_9_TO_5__q34[1] ||
	      condFlags64_reswget_BITS_14_TO_10__q33[3]) ;
  assign x__h25952 = x__h25964 | y__h25965 ;
  assign x__h25964 = _theResult_____1__h25846 & sign2__h25798 ;
  assign x__h260344 =
	     condFlags32_reswget_BITS_14_TO_10__q53[4] ?
	       exponent___1__h260373 :
	       exponent__h259730 ;
  assign x__h260375 = { 3'd0, lv_leading_zeros__h259735 } ;
  assign x__h267696 = lv_leading_zeros__h259735 - 6'd1 ;
  assign x__h267722 =
	     { IF_IF_0_CONCAT_IF_IF_IF_condFlags32_res_whas___ETC__q58[24:0],
	       1'd0 } ;
  assign x__h267966 = x__h267968 + 9'd63 ;
  assign x__h267968 =
	     { 1'd0,
	       IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d5803[8:1] } ;
  assign x__h269346 =
	     condFlags64_reswget_BITS_14_TO_10__q33[4] ?
	       exponent___1__h269375 :
	       lv_exp__h218402 ;
  assign x__h269377 = { 5'd0, lv_leading_zeros__h268738 } ;
  assign x__h284818 = lv_leading_zeros__h268738 - 7'd1 ;
  assign x__h284844 =
	     { IF_IF_0_CONCAT_IF_IF_IF_condFlags64_res_whas___ETC__q38[53:0],
	       1'd0 } ;
  assign x__h285088 = x__h285090 + 12'd511 ;
  assign x__h285090 =
	     { 1'd0,
	       IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d5927[11:1] } ;
  assign x__h290760 = ff_input_D_OUT[13] ^ ff_input_D_OUT[14] ;
  assign x__h42116 =
	     mantissa_to_shift__h25835[0] ?
	       7'd0 :
	       (mantissa_to_shift__h25835[1] ?
		  7'd1 :
		  (mantissa_to_shift__h25835[2] ?
		     7'd2 :
		     (mantissa_to_shift__h25835[3] ?
			7'd3 :
			(mantissa_to_shift__h25835[4] ?
			   7'd4 :
			   (mantissa_to_shift__h25835[5] ?
			      7'd5 :
			      (mantissa_to_shift__h25835[6] ?
				 7'd6 :
				 (mantissa_to_shift__h25835[7] ?
				    7'd7 :
				    (mantissa_to_shift__h25835[8] ?
				       7'd8 :
				       (mantissa_to_shift__h25835[9] ?
					  7'd9 :
					  (mantissa_to_shift__h25835[10] ?
					     7'd10 :
					     (mantissa_to_shift__h25835[11] ?
						7'd11 :
						(mantissa_to_shift__h25835[12] ?
						   7'd12 :
						   (mantissa_to_shift__h25835[13] ?
						      7'd13 :
						      (mantissa_to_shift__h25835[14] ?
							 7'd14 :
							 (mantissa_to_shift__h25835[15] ?
							    7'd15 :
							    (mantissa_to_shift__h25835[16] ?
							       7'd16 :
							       (mantissa_to_shift__h25835[17] ?
								  7'd17 :
								  (mantissa_to_shift__h25835[18] ?
								     7'd18 :
								     (mantissa_to_shift__h25835[19] ?
									7'd19 :
									(mantissa_to_shift__h25835[20] ?
									   7'd20 :
									   (mantissa_to_shift__h25835[21] ?
									      7'd21 :
									      (mantissa_to_shift__h25835[22] ?
										 7'd22 :
										 (mantissa_to_shift__h25835[23] ?
										    7'd23 :
										    (mantissa_to_shift__h25835[24] ?
										       7'd24 :
										       (mantissa_to_shift__h25835[25] ?
											  7'd25 :
											  (mantissa_to_shift__h25835[26] ?
											     7'd26 :
											     (mantissa_to_shift__h25835[27] ?
												7'd27 :
												(mantissa_to_shift__h25835[28] ?
												   7'd28 :
												   (mantissa_to_shift__h25835[29] ?
												      7'd29 :
												      (mantissa_to_shift__h25835[30] ?
													 7'd30 :
													 (mantissa_to_shift__h25835[31] ?
													    7'd31 :
													    (mantissa_to_shift__h25835[32] ?
													       7'd32 :
													       (mantissa_to_shift__h25835[33] ?
														  7'd33 :
														  (mantissa_to_shift__h25835[34] ?
														     7'd34 :
														     (mantissa_to_shift__h25835[35] ?
															7'd35 :
															(mantissa_to_shift__h25835[36] ?
															   7'd36 :
															   (mantissa_to_shift__h25835[37] ?
															      7'd37 :
															      (mantissa_to_shift__h25835[38] ?
																 7'd38 :
																 (mantissa_to_shift__h25835[39] ?
																    7'd39 :
																    (mantissa_to_shift__h25835[40] ?
																       7'd40 :
																       (mantissa_to_shift__h25835[41] ?
																	  7'd41 :
																	  (mantissa_to_shift__h25835[42] ?
																	     7'd42 :
																	     (mantissa_to_shift__h25835[43] ?
																		7'd43 :
																		(mantissa_to_shift__h25835[44] ?
																		   7'd44 :
																		   (mantissa_to_shift__h25835[45] ?
																		      7'd45 :
																		      (mantissa_to_shift__h25835[46] ?
																			 7'd46 :
																			 (mantissa_to_shift__h25835[47] ?
																			    7'd47 :
																			    (mantissa_to_shift__h25835[48] ?
																			       7'd48 :
																			       (mantissa_to_shift__h25835[49] ?
																				  7'd49 :
																				  (mantissa_to_shift__h25835[50] ?
																				     7'd50 :
																				     (mantissa_to_shift__h25835[51] ?
																					7'd51 :
																					(mantissa_to_shift__h25835[52] ?
																					   7'd52 :
																					   (mantissa_to_shift__h25835[53] ?
																					      7'd53 :
																					      (mantissa_to_shift__h25835[54] ?
																						 7'd54 :
																						 (mantissa_to_shift__h25835[55] ?
																						    7'd55 :
																						    (mantissa_to_shift__h25835[56] ?
																						       7'd56 :
																						       (mantissa_to_shift__h25835[57] ?
																							  7'd57 :
																							  (mantissa_to_shift__h25835[58] ?
																							     7'd58 :
																							     (mantissa_to_shift__h25835[59] ?
																								7'd59 :
																								(mantissa_to_shift__h25835[60] ?
																								   7'd60 :
																								   (mantissa_to_shift__h25835[61] ?
																								      7'd61 :
																								      (mantissa_to_shift__h25835[62] ?
																									 7'd62 :
																									 (mantissa_to_shift__h25835[63] ?
																									    7'd63 :
																									    (mantissa_to_shift__h25835[64] ?
																									       7'd64 :
																									       (mantissa_to_shift__h25835[65] ?
																										  7'd65 :
																										  (mantissa_to_shift__h25835[66] ?
																										     7'd66 :
																										     (mantissa_to_shift__h25835[67] ?
																											7'd67 :
																											(mantissa_to_shift__h25835[68] ?
																											   7'd68 :
																											   (mantissa_to_shift__h25835[69] ?
																											      7'd69 :
																											      (mantissa_to_shift__h25835[70] ?
																												 7'd70 :
																												 (mantissa_to_shift__h25835[71] ?
																												    7'd71 :
																												    (mantissa_to_shift__h25835[72] ?
																												       7'd72 :
																												       7'd73)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ;
  assign x__h47075 = ~_theResult_____1__h25846 ;
  assign x__h47082 =
	     inst_spfm_add_sub_ff_stage2_read__42_BIT_15_65_ETC___d767 ||
	     inst_spfm_add_sub_ff_stage2[6] ||
	     (!inst_spfm_add_sub_ff_stage2[16] ||
	      !inst_spfm_add_sub_ff_stage2[5]) &&
	     inst_spfm_add_sub_ff_stage2[4] &&
	     inst_spfm_add_sub_ff_stage2[14] &&
	     x__h47190 ;
  assign x__h47190 = sign2__h25798 ^ op_xor_sign3__h25811 ;
  assign x__h47198 =
	     (inst_spfm_add_sub_ff_stage2_read__42_BIT_15_65_ETC___d767 ||
	      inst_spfm_add_sub_ff_stage2[6] ||
	      inst_spfm_add_sub_ff_stage2[16] &&
	      inst_spfm_add_sub_ff_stage2[5]) ?
	       2'd0 :
	       _theResult_____6_snd_snd__h47155 ;
  assign x__h47230 = x__h47232 & sign2__h25798 ;
  assign x__h47232 = inst_spfm_add_sub_ff_stage2[4] & y__h47233 ;
  assign x__h47234 = x__h47235 & inst_spfm_add_sub_ff_stage2[14] ;
  assign x__h47235 = ~inst_spfm_add_sub_ff_stage2[4] ;
  assign x__h47239 =
	     (inst_spfm_add_sub_ff_stage2_read__42_BIT_15_65_ETC___d767 ||
	      inst_spfm_add_sub_ff_stage2[6]) ?
	       2'd0 :
	       _theResult_____6_snd_snd_snd__h47202 ;
  assign x__h47263 = x__h47275 & y__h47276 ;
  assign x__h47275 =
	     (inst_spfm_add_sub_ff_stage2_read__42_BIT_15_65_ETC___d767 ||
	      inst_spfm_add_sub_ff_stage2[6] ||
	      inst_spfm_add_sub_ff_stage2[16] &&
	      inst_spfm_add_sub_ff_stage2[5]) ?
	       inst_spfm_add_sub_ff_stage2[1] :
	       _theResult_____6_fst__h47152 ;
  assign x__h47305 =
	     (inst_spfm_add_sub_ff_stage2[1] ||
	      !inst_spfm_add_sub_ff_stage2[6]) &&
	     inst_spfm_add_sub_ff_stage2[15] ;
  assign x__h47489 =
	     (_theResult____h47412 == 73'd0) ?
	       ((inst_spfm_add_sub_ff_stage4[12:10] == 3'b010) ?
		  2'b11 :
		  2'b01) :
	       2'd0 ;
  assign x__h4761 = { _denominator__h4699, 2'b0, _numerator__h4700, 27'd0 } ;
  assign x__h58407 = inst_spfm_add_sub_ff_stage5[6:0] - 7'd1 ;
  assign x__h58428 =
	     IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220[48] |
	     IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220[46] ;
  assign x__h58510 =
	     IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220[47] |
	     IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220[46] ;
  assign x__h63179 =
	     { _denominator__h63117, 2'b0, _numerator__h63118, 56'd0 } ;
  assign x__h76333 =
	     inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1452 &&
	     inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1453 ;
  assign x__h76338 =
	     (!inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1452 ||
	      inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1453 ||
	      _1_MINUS_inst_dpfpu_divider_rg_stage2_449_BITS__ETC___d1455) ?
	       inst_dpfpu_divider_int_div_wr_final_out_wget[0] :
	       lv_sticky___1__h64542 ;
  assign x__h76558 = _theResult____h76405 | inst_dpfpu_divider_rg_stage3[85] ;
  assign x__h76708 = inst_dpfpu_divider_rg_stage3[84] | _theResult____h76405 ;
  assign x__h76743 = x__h76745 | _theResult____h76405 ;
  assign x__h76745 =
	     inst_dpfpu_divider_rg_stage3[85] |
	     inst_dpfpu_divider_rg_stage3[84] ;
  assign x__h78128 =
	     { inst_dpfpu_sqrt_rg_inter_stage[182:130],
	       !_theResult____h78091[57],
	       1'd0 } ;
  assign x__h78391 =
	     { inst_dpfpu_sqrt_rg_inter_stage[56:3],
	       !_theResult____h78091[57] } ;
  assign x__h78780 =
	     inst_dpfpu_sqrt_rg_inter_stage[131] | !_theResult____h78091[57] ;
  assign x__h78821 =
	     _theResult____h78091[57] ?
	       lv_remainder__h78843 :
	       _theResult____h78091 ;
  assign x__h78895 =
	     inst_dpfpu_sqrt_rg_inter_stage[130] | !_theResult____h78091[57] ;
  assign x__h94469 = msb_zeros__h94403 - 7'd1 ;
  assign x__h94495 = { 6'd0, msb_zeros__h94403 } ;
  assign x_data__h197458 =
	     ff_input_D_OUT[8] ?
	       { 32'hFFFFFFFF, _theResult_____3_snd__h198072 } :
	       { 32'd0, _theResult_____3_snd__h197514 } ;
  assign x_data__h199336 =
	     ff_input_D_OUT[8] ?
	       _theResult_____3_snd__h199919 :
	       _theResult_____3_snd__h199367 ;
  assign x_data__h200255 =
	     { 32'hFFFFFFFF, x1_avValue_final_result__h194302 } ;
  assign x_data__h200411 =
	     (ff_input_D_OUT[208:145] == 64'd0 && ff_input_D_OUT[2] ||
	      ff_input_D_OUT[176:145] == 32'd0 && !ff_input_D_OUT[2]) ?
	       64'b0 :
	       _theResult___snd_final_result__h194417 ;
  assign x_data__h214468 =
	     { 32'hFFFFFFFF, x1_avValue_final_result__h214457 } ;
  assign x_data__h214706 =
	     { CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q8,
	       ff_input_D_OUT[207:145] } ;
  assign x_data__h215936 =
	     (!condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	      NOT_IF_condFlags32_res_whas__353_THEN_condFlag_ETC___d3854) ?
	       _theResult_____3_snd_snd_fst__h216477 :
	       final_result__h215913 ;
  assign x_data__h218436 =
	     (!condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	      NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d4024) ?
	       _theResult_____3_snd_snd_fst__h218980 :
	       final_result__h218413 ;
  assign x_data__h229264 =
	     { 32'hFFFFFFFF,
	       IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4388[31:0] } ;
  assign x_data__h229336 =
	     (ff_input_D_OUT[12:6] == 7'b1110000) ?
	       final_result__h229340 :
	       final_result__h229363 ;
  assign x_data__h292496 =
	     { 32'hFFFFFFFF, inst_spfpu_divider_wr_final_out_wget[36:5] } ;
  assign x_data__h292627 =
	     { 32'hFFFFFFFF, inst_spfpu_sqrt_ff_final_out[36:5] } ;
  assign x_data__h292749 =
	     { 32'hFFFFFFFF, inst_spfm_add_sub_ff_final_out_wget[36:5] } ;
  assign x_fflags__h197460 =
	     ff_input_D_OUT[8] ?
	       _theResult_____3_fst__h198071 :
	       _theResult_____3_fst__h197513 ;
  assign x_fflags__h199338 =
	     ff_input_D_OUT[8] ?
	       _theResult_____3_fst__h199918 :
	       _theResult_____3_fst__h199366 ;
  assign x_fflags__h200257 =
	     (ff_input_D_OUT[208:145] == 64'd0 && ff_input_D_OUT[2] ||
	      ff_input_D_OUT[176:145] == 32'd0 && !ff_input_D_OUT[2]) ?
	       5'b0 :
	       x1_avValue_fflags__h194295 ;
  assign x_fflags__h200413 =
	     (ff_input_D_OUT[208:145] == 64'd0 || !ff_input_D_OUT[2]) ?
	       5'b0 :
	       wr_final_out_fflags__h194416 ;
  assign x_lv_exponent__h5990 =
	     (inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 &&
	      NOT_inst_spfpu_divider_rg_stage2_28_BITS_18_TO_ETC___d245) ?
	       10'd0 :
	       _theResult___snd_fst__h11912 ;
  assign x_lv_exponent__h64408 =
	     (inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1452 &&
	      NOT_inst_dpfpu_divider_rg_stage2_449_BITS_21_T_ETC___d1653) ?
	       13'd0 :
	       _theResult___snd_fst__h76275 ;
  assign x_lv_product_exponent__h15024 =
	     (!inst_spfm_add_sub_ff_input_register_read__59_B_ETC___d464 ||
	      inst_spfm_add_sub_ff_input_register[107] &&
	      inst_spfm_add_sub_ff_input_register[59:50] == 10'd254) ?
	       inst_spfm_add_sub_ff_input_register[59:50] :
	       _theResult___fst__h21995 ;
  assign x_lv_product_exponent__h79382 =
	     (!inst_dpfm_add_sub_ff_input_register_read__867__ETC___d1872 ||
	      inst_dpfm_add_sub_ff_input_register[200] &&
	      inst_dpfm_add_sub_ff_input_register[94:82] == 13'd2046) ?
	       inst_dpfm_add_sub_ff_input_register[94:82] :
	       _theResult___fst__h94415 ;
  assign x_lv_product_mantissa__h15025 =
	     (!inst_spfm_add_sub_ff_input_register_read__59_B_ETC___d464 ||
	      inst_spfm_add_sub_ff_input_register[107] &&
	      inst_spfm_add_sub_ff_input_register[59:50] == 10'd254) ?
	       lv_product_mantissa__h14957 :
	       _theResult___snd_fst__h22080 ;
  assign x_lv_product_mantissa__h79383 =
	     (!inst_dpfm_add_sub_ff_input_register_read__867__ETC___d1872 ||
	      inst_dpfm_add_sub_ff_input_register[200] &&
	      inst_dpfm_add_sub_ff_input_register[94:82] == 13'd2046) ?
	       lv_product_mantissa__h79315 :
	       _theResult___snd_fst__h94500 ;
  assign x_lv_quotient__h5989 =
	     inst_spfpu_divider_rg_stage2_28_BITS_18_TO_9_2_ETC___d131 ?
	       _theResult___fst__h6087 :
	       inst_spfpu_divider_int_div_wr_final_out_wget[26:0] ;
  assign x_lv_quotient__h64407 =
	     inst_dpfpu_divider_rg_stage2_449_BITS_21_TO_9__ETC___d1452 ?
	       _theResult___fst__h64505 :
	       inst_dpfpu_divider_int_div_wr_final_out_wget[55:0] ;
  assign y__h102271 = x__h148002 & op_xor_sign3__h102117 ;
  assign y__h12344 = x__h12345 | inst_spfpu_divider_rg_stage3[54] ;
  assign y__h12381 = ~inst_spfpu_divider_rg_stage3[12] ;
  assign y__h14139 = x__h14418 | lv_sticky__h14062 ;
  assign y__h14521 = ~inst_spfpu_sqrt_rg_inter_stage[58] ;
  assign y__h148158 = x__h148161 & op_xor_sign3__h102117 ;
  assign y__h148160 = ~inst_dpfm_add_sub_ff_stage2[14] ;
  assign y__h148203 = ~inst_dpfm_add_sub_ff_stage2[13] ;
  assign y__h171395 = x__h171535 | lv_sticky__h170949 ;
  assign y__h171631 = ~inst_dpfm_add_sub_ff_stage5[23] ;
  assign y__h184596 = x__h184597 | _theResult____h179825 ;
  assign y__h184634 =
	     ~(!inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q23[31]) ;
  assign y__h194135 = x__h194136 | _theResult____h184865 ;
  assign y__h194173 =
	     ~(!inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
	       inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q24[63]) ;
  assign y__h214308 = x__h214309 | _theResult____h205114 ;
  assign y__h214345 = ~sign__h205112 ;
  assign y__h216566 = x__h216812 | lv_sticky__h215916 ;
  assign y__h217236 = ~setCanonicalNaN_reswget_BITS_95_TO_64__q42[31] ;
  assign y__h219069 = x__h219315 | lv_sticky__h218416 ;
  assign y__h219737 = ~ff_input_D_OUT[208] ;
  assign y__h22074 = x__h22075 - 10'd1 ;
  assign y__h228698 =
	     x__h228736 |
	     IF_IF_getExp64_res_whas__996_THEN_getExp64_res_ETC___d4320[26] ;
  assign y__h231093 = { 9'd0, lv_op2_subnormal__h230903 } ;
  assign y__h231095 = { 9'd0, lv_op1_subnormal__h230902 } ;
  assign y__h231479 = condFlags32_reswget_BITS_9_TO_5__q54[2] & y__h231525 ;
  assign y__h231481 = ~condFlags32_reswget_BITS_9_TO_5__q54[0] ;
  assign y__h231525 = ~condFlags32_reswget_BITS_14_TO_10__q53[0] ;
  assign y__h232549 = { 12'd0, lv_op2_subnormal__h232359 } ;
  assign y__h232551 = { 12'd0, lv_op1_subnormal__h232358 } ;
  assign y__h232930 = condFlags64_reswget_BITS_9_TO_5__q34[2] & y__h232976 ;
  assign y__h232932 = ~condFlags64_reswget_BITS_9_TO_5__q34[0] ;
  assign y__h232976 = ~condFlags64_reswget_BITS_14_TO_10__q33[0] ;
  assign y__h234942 = x__h234943 - y__h234944 ;
  assign y__h234944 = exp2__h234889 + y__h238339 ;
  assign y__h234945 = { 9'd0, condFlags32_reswget_BITS_14_TO_10__q53[4] } ;
  assign y__h238339 = { 9'd0, condFlags32_reswget_BITS_9_TO_5__q54[4] } ;
  assign y__h243170 = x__h243171 - y__h243172 ;
  assign y__h243172 = exp2__h243117 + y__h250598 ;
  assign y__h243173 = { 12'd0, condFlags64_reswget_BITS_14_TO_10__q33[4] } ;
  assign y__h250598 = { 12'd0, condFlags64_reswget_BITS_9_TO_5__q34[4] } ;
  assign y__h25965 = x__h47075 & op_xor_sign3__h25811 ;
  assign y__h259993 = ff_input_D_OUT[176] & y__h260014 ;
  assign y__h260014 = ~condFlags32_reswget_BITS_14_TO_10__q53[2] ;
  assign y__h260345 = x__h260375 - 9'd1 ;
  assign y__h267967 =
	     { 8'd0,
	       IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d5803[0] } ;
  assign y__h268995 = ff_input_D_OUT[208] & y__h269016 ;
  assign y__h269016 = ~condFlags64_reswget_BITS_14_TO_10__q33[2] ;
  assign y__h269347 = x__h269377 - 12'd1 ;
  assign y__h285089 =
	     { 11'd0,
	       IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d5927[0] } ;
  assign y__h47231 = x__h47234 & op_xor_sign3__h25811 ;
  assign y__h47233 = ~inst_spfm_add_sub_ff_stage2[14] ;
  assign y__h47276 = ~inst_spfm_add_sub_ff_stage2[13] ;
  assign y__h58288 = x__h58428 | lv_sticky__h57842 ;
  assign y__h58524 = ~inst_spfm_add_sub_ff_stage5[22] ;
  assign y__h76707 = x__h76708 | inst_dpfpu_divider_rg_stage3[86] ;
  assign y__h76744 = ~inst_dpfpu_divider_rg_stage3[12] ;
  assign y__h78501 = x__h78780 | lv_sticky__h78424 ;
  assign y__h78883 = ~inst_dpfpu_sqrt_rg_inter_stage[116] ;
  assign y__h94494 = x__h94495 - 13'd1 ;
  assign y_avValue__h228062 =
	     { 5'd5, CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q2 } ;
  assign y_avValue__h228211 =
	     { result__h228939, x1_avValue_snd_fst__h229172 } ;
  assign y_avValue_snd_fst__h229169 =
	     IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4310 ?
	       res__h228536 :
	       res___1__h229177 ;
  assign y_avValue_snd_snd_fst__h228724 =
	     IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4312 ?
	       man__h228296 :
	       man__h228395 ;
  assign y_avValue_snd_snd_snd__h228772 =
	     man__h228296[23:0] != 24'd0 || lv_sticky__h228192 ;
  assign y_avValue_snd_snd_snd_snd_snd_snd__h228768 =
	     IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4312 ?
	       y_avValue_snd_snd_snd__h228772 :
	       lv_sticky__h228192 ;
  always@(ff_input_D_OUT)
  begin
    case (ff_input_D_OUT[5:3])
      3'b001:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q2 =
	      { ff_input_D_OUT[208], 31'h7F7FFFFF };
      3'b010:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q2 =
	      ff_input_D_OUT[208] ? 32'hFF800000 : 32'h7F7FFFFF;
      default: CASE_ff_inputD_OUT_BITS_5_TO_3_0b1_ff_inputD_ETC__q2 =
		   (ff_input_D_OUT[5:3] == 3'b011 && ff_input_D_OUT[208]) ?
		     32'hFF7FFFFF :
		     { ff_input_D_OUT[208], 31'h7F800000 };
    endcase
  end
  always@(inst_spfpu_divider_rg_stage3 or
	  x__h12380 or lv_round_up___1__h12332 or lv_round_up___1__h12368)
  begin
    case (inst_spfpu_divider_rg_stage3[4:2])
      3'b0:
	  IF_inst_spfpu_divider_rg_stage3_71_BITS_4_TO_2_ETC___d316 =
	      lv_round_up___1__h12332;
      3'b011:
	  IF_inst_spfpu_divider_rg_stage3_71_BITS_4_TO_2_ETC___d316 =
	      lv_round_up___1__h12368;
      3'b100:
	  IF_inst_spfpu_divider_rg_stage3_71_BITS_4_TO_2_ETC___d316 =
	      inst_spfpu_divider_rg_stage3[53];
      default: IF_inst_spfpu_divider_rg_stage3_71_BITS_4_TO_2_ETC___d316 =
		   inst_spfpu_divider_rg_stage3[4:2] == 3'b010 &&
		   x__h12380 & inst_spfpu_divider_rg_stage3[12];
    endcase
  end
  always@(inst_spfpu_sqrt_rg_inter_stage or
	  lv_inexact__h14064 or
	  lv_roundup___1__h14127 or lv_roundup___1__h14509)
  begin
    case (inst_spfpu_sqrt_rg_inter_stage[2:0])
      3'b0:
	  IF_inst_spfpu_sqrt_rg_inter_stage_read__80_BIT_ETC___d434 =
	      lv_roundup___1__h14127;
      3'b011:
	  IF_inst_spfpu_sqrt_rg_inter_stage_read__80_BIT_ETC___d434 =
	      lv_roundup___1__h14509;
      3'b100:
	  IF_inst_spfpu_sqrt_rg_inter_stage_read__80_BIT_ETC___d434 =
	      inst_spfpu_sqrt_rg_inter_stage[69];
      default: IF_inst_spfpu_sqrt_rg_inter_stage_read__80_BIT_ETC___d434 =
		   inst_spfpu_sqrt_rg_inter_stage[2:0] == 3'b010 &&
		   lv_inexact__h14064 & inst_spfpu_sqrt_rg_inter_stage[58];
    endcase
  end
  always@(inst_spfm_add_sub_ff_stage5 or
	  lv_inexact__h57844 or
	  y__h58524 or
	  lv_round_up___1__h58276 or
	  lv_round_up___1__h58498 or
	  IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220)
  begin
    case (inst_spfm_add_sub_ff_stage5[21:19])
      3'b0:
	  IF_inst_spfm_add_sub_ff_stage5_read__177_BITS__ETC___d1241 =
	      lv_round_up___1__h58276;
      3'b010:
	  IF_inst_spfm_add_sub_ff_stage5_read__177_BITS__ETC___d1241 =
	      lv_round_up___1__h58498;
      3'b100:
	  IF_inst_spfm_add_sub_ff_stage5_read__177_BITS__ETC___d1241 =
	      IF_inst_spfm_add_sub_ff_stage5_read__177_BIT_9_ETC___d1220[47];
      default: IF_inst_spfm_add_sub_ff_stage5_read__177_BITS__ETC___d1241 =
		   inst_spfm_add_sub_ff_stage5[21:19] == 3'b011 &&
		   lv_inexact__h57844 & y__h58524;
    endcase
  end
  always@(inst_dpfpu_divider_rg_stage3 or
	  x__h76743 or lv_round_up___1__h76695 or lv_round_up___1__h76731)
  begin
    case (inst_dpfpu_divider_rg_stage3[4:2])
      3'b0:
	  IF_inst_dpfpu_divider_rg_stage3_679_BITS_4_TO__ETC___d1724 =
	      lv_round_up___1__h76695;
      3'b011:
	  IF_inst_dpfpu_divider_rg_stage3_679_BITS_4_TO__ETC___d1724 =
	      lv_round_up___1__h76731;
      3'b100:
	  IF_inst_dpfpu_divider_rg_stage3_679_BITS_4_TO__ETC___d1724 =
	      inst_dpfpu_divider_rg_stage3[85];
      default: IF_inst_dpfpu_divider_rg_stage3_679_BITS_4_TO__ETC___d1724 =
		   inst_dpfpu_divider_rg_stage3[4:2] == 3'b010 &&
		   x__h76743 & inst_dpfpu_divider_rg_stage3[12];
    endcase
  end
  always@(inst_dpfpu_sqrt_rg_inter_stage or
	  lv_inexact__h78426 or
	  lv_roundup___1__h78489 or lv_roundup___1__h78871)
  begin
    case (inst_dpfpu_sqrt_rg_inter_stage[2:0])
      3'b0:
	  IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_BI_ETC___d1842 =
	      lv_roundup___1__h78489;
      3'b011:
	  IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_BI_ETC___d1842 =
	      lv_roundup___1__h78871;
      3'b100:
	  IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_BI_ETC___d1842 =
	      inst_dpfpu_sqrt_rg_inter_stage[130];
      default: IF_inst_dpfpu_sqrt_rg_inter_stage_read__788_BI_ETC___d1842 =
		   inst_dpfpu_sqrt_rg_inter_stage[2:0] == 3'b010 &&
		   lv_inexact__h78426 & inst_dpfpu_sqrt_rg_inter_stage[116];
    endcase
  end
  always@(inst_dpfm_add_sub_ff_stage5 or
	  lv_inexact__h170951 or
	  y__h171631 or
	  lv_round_up___1__h171383 or
	  lv_round_up___1__h171605 or
	  IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208)
  begin
    case (inst_dpfm_add_sub_ff_stage5[22:20])
      3'b0:
	  IF_inst_dpfm_add_sub_ff_stage5_read__165_BITS__ETC___d3229 =
	      lv_round_up___1__h171383;
      3'b010:
	  IF_inst_dpfm_add_sub_ff_stage5_read__165_BITS__ETC___d3229 =
	      lv_round_up___1__h171605;
      3'b100:
	  IF_inst_dpfm_add_sub_ff_stage5_read__165_BITS__ETC___d3229 =
	      IF_inst_dpfm_add_sub_ff_stage5_read__165_BIT_1_ETC___d3208[105];
      default: IF_inst_dpfm_add_sub_ff_stage5_read__165_BITS__ETC___d3229 =
		   inst_dpfm_add_sub_ff_stage5[22:20] == 3'b011 &&
		   lv_inexact__h170951 & y__h171631;
    endcase
  end
  always@(ff_input_D_OUT or
	  inexact__h205115 or
	  sign__h205112 or
	  lv_roundup___1__h214296 or
	  lv_roundup___1__h214332 or
	  IF_NOT_ff_input_first__319_BIT_1_544_558_AND_f_ETC___d3692)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3712 =
	      lv_roundup___1__h214296;
      3'b011:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3712 =
	      lv_roundup___1__h214332;
      3'b100:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3712 =
	      IF_NOT_ff_input_first__319_BIT_1_544_558_AND_f_ETC___d3692[10];
      default: IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3712 =
		   ff_input_D_OUT[5:3] == 3'b010 &&
		   inexact__h205115 & sign__h205112;
    endcase
  end
  always@(ff_input_D_OUT or
	  ff_input_first__319_BIT_208_457_XOR_ff_input_f_ETC___d3820)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q8 =
	      ff_input_D_OUT[144];
      3'b001:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q8 =
	      ~ff_input_D_OUT[144];
      default: CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_ff_inputD_ETC__q8 =
		   ff_input_first__319_BIT_208_457_XOR_ff_input_f_ETC___d3820;
    endcase
  end
  always@(inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget or
	  inexact__h179826 or
	  inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q23 or
	  lv_roundup___1__h184584 or
	  lv_roundup___1__h184621 or
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5130)
  begin
    case (inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[2:0])
      3'b0:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5155 =
	      lv_roundup___1__h184584;
      3'b011:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5155 =
	      lv_roundup___1__h184621;
      3'b100:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5155 =
	      IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5130[7];
      default: IF_IF_inst_fpu_int_to_fp_fcvt_s_wwu_arg_whas___ETC___d5155 =
		   inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[2:0] == 3'b010 &&
		   inexact__h179826 &
		   (!inst_fpu_int_to_fp_fcvt_s_wwu_arg_wget[3] &&
		    inst_fpu_int_to_fp_fcvt_s_wwu_argwget_BITS_35_ETC__q23[31]);
    endcase
  end
  always@(inst_fpu_int_to_fp_fcvt_s_llu_arg_wget or
	  inexact__h184866 or
	  inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q24 or
	  lv_roundup___1__h194123 or
	  lv_roundup___1__h194160 or
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5006)
  begin
    case (inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[2:0])
      3'b0:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5031 =
	      lv_roundup___1__h194123;
      3'b011:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5031 =
	      lv_roundup___1__h194160;
      3'b100:
	  IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5031 =
	      IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5006[39];
      default: IF_IF_inst_fpu_int_to_fp_fcvt_s_llu_arg_whas___ETC___d5031 =
		   inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[2:0] == 3'b010 &&
		   inexact__h184866 &
		   (!inst_fpu_int_to_fp_fcvt_s_llu_arg_wget[3] &&
		    inst_fpu_int_to_fp_fcvt_s_llu_argwget_BITS_67_ETC__q24[63]);
    endcase
  end
  always@(ff_input_D_OUT or
	  x__h228837 or
	  lv_round_up___1__h228686 or
	  lv_round_up___1__h228825 or
	  IF_IF_getExp64_res_whas__996_THEN_getExp64_res_ETC___d4320)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0: _theResult_____4___1__h228666 = lv_round_up___1__h228686;
      3'b011: _theResult_____4___1__h228666 = lv_round_up___1__h228825;
      3'b100:
	  _theResult_____4___1__h228666 =
	      IF_IF_getExp64_res_whas__996_THEN_getExp64_res_ETC___d4320[25];
      default: _theResult_____4___1__h228666 =
		   ff_input_D_OUT[5:3] == 3'b010 &&
		   x__h228837 & ff_input_D_OUT[208];
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_compare_result__h199321 or
	  condFlags64_reswget_BITS_14_TO_10__q33 or
	  condFlags64_reswget_BITS_9_TO_5__q34)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3511 =
	      (lv_compare_result__h199321[0] ||
	       condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	       condFlags64_reswget_BITS_9_TO_5__q34[3]) ?
		64'd1 :
		64'd0;
      3'b001:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3511 =
	      (lv_compare_result__h199321 == 2'b01 &&
	       (!condFlags64_reswget_BITS_14_TO_10__q33[3] ||
		!condFlags64_reswget_BITS_9_TO_5__q34[3])) ?
		64'd1 :
		64'd0;
      3'b010:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3511 =
	      (lv_compare_result__h199321 == 2'b11 ||
	       condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	       condFlags64_reswget_BITS_9_TO_5__q34[3]) ?
		64'd1 :
		64'd0;
      default: IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3511 =
		   64'd0;
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_inexact1__h218418 or
	  y__h219737 or
	  lv_round_up___1__h219057 or
	  lv_round_up___1__h219712 or
	  IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4050)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d4112 =
	      lv_round_up___1__h219057;
      3'b010:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d4112 =
	      lv_round_up___1__h219712;
      3'b100:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d4112 =
	      IF_IF_condFlags64_res_whas__438_THEN_condFlags_ETC___d4050[51];
      default: IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d4112 =
		   ff_input_D_OUT[5:3] == 3'b011 &&
		   lv_inexact1__h218418 & y__h219737;
    endcase
  end
  always@(ff_input_D_OUT or
	  x__h241785 or setCanonicalNaN_reswget_BITS_63_TO_32__q43)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q44 =
	      setCanonicalNaN_reswget_BITS_63_TO_32__q43[31];
      3'b001:
	  CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q44 =
	      ~setCanonicalNaN_reswget_BITS_63_TO_32__q43[31];
      default: CASE_ff_inputD_OUT_BITS_5_TO_3_0b0_setCanonic_ETC__q44 =
		   x__h241785;
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_compare_result__h197442 or
	  condFlags32_reswget_BITS_14_TO_10__q53 or
	  condFlags32_reswget_BITS_9_TO_5__q54)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3434 =
	      (lv_compare_result__h197442[0] ||
	       condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	       condFlags32_reswget_BITS_9_TO_5__q54[3]) ?
		32'd1 :
		32'd0;
      3'b001:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3434 =
	      (lv_compare_result__h197442 == 2'b01 &&
	       (!condFlags32_reswget_BITS_14_TO_10__q53[3] ||
		!condFlags32_reswget_BITS_9_TO_5__q54[3])) ?
		32'd1 :
		32'd0;
      3'b010:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3434 =
	      (lv_compare_result__h197442 == 2'b11 ||
	       condFlags32_reswget_BITS_14_TO_10__q53[3] &&
	       condFlags32_reswget_BITS_9_TO_5__q54[3]) ?
		32'd1 :
		32'd0;
      default: IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b10_ETC___d3434 =
		   32'd0;
    endcase
  end
  always@(ff_input_D_OUT or
	  lv_inexact1__h215918 or
	  y__h217236 or
	  lv_round_up___1__h216554 or
	  lv_round_up___1__h217211 or
	  IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3881)
  begin
    case (ff_input_D_OUT[5:3])
      3'b0:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3944 =
	      lv_round_up___1__h216554;
      3'b010:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3944 =
	      lv_round_up___1__h217211;
      3'b100:
	  IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3944 =
	      IF_IF_condFlags32_res_whas__353_THEN_condFlags_ETC___d3881[22];
      default: IF_ff_input_first__319_BITS_5_TO_3_328_EQ_0b0__ETC___d3944 =
		   ff_input_D_OUT[5:3] == 3'b011 &&
		   lv_inexact1__h215918 & y__h217236;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        inst_dpfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inst_dpfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	inst_dpfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inst_dpfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      69'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	inst_dpfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	    294'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	inst_dpfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	inst_spfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 3'd0;
	inst_spfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	inst_spfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY 2'd0;
	inst_spfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	inst_spfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	    146'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	inst_spfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_multicycle_op <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_result <= `BSV_ASSIGNMENT_DELAY
	    { 64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ,
	      6'd0 };
      end
    else
      begin
        if (inst_dpfm_add_sub_rg_state_handler_EN)
	  inst_dpfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfm_add_sub_rg_state_handler_D_IN;
	if (inst_dpfpu_divider_int_div_rg_state_EN)
	  inst_dpfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_divider_int_div_rg_state_D_IN;
	if (inst_dpfpu_divider_rg_state_handler_EN)
	  inst_dpfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_divider_rg_state_handler_D_IN;
	if (inst_dpfpu_sqrt_ff_final_out_EN)
	  inst_dpfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_sqrt_ff_final_out_D_IN;
	if (inst_dpfpu_sqrt_rg_inter_stage_EN)
	  inst_dpfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_sqrt_rg_inter_stage_D_IN;
	if (inst_dpfpu_sqrt_rg_state_EN)
	  inst_dpfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_dpfpu_sqrt_rg_state_D_IN;
	if (inst_spfm_add_sub_rg_state_handler_EN)
	  inst_spfm_add_sub_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_spfm_add_sub_rg_state_handler_D_IN;
	if (inst_spfpu_divider_int_div_rg_state_EN)
	  inst_spfpu_divider_int_div_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_divider_int_div_rg_state_D_IN;
	if (inst_spfpu_divider_rg_state_handler_EN)
	  inst_spfpu_divider_rg_state_handler <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_divider_rg_state_handler_D_IN;
	if (inst_spfpu_sqrt_ff_final_out_EN)
	  inst_spfpu_sqrt_ff_final_out <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sqrt_ff_final_out_D_IN;
	if (inst_spfpu_sqrt_rg_inter_stage_EN)
	  inst_spfpu_sqrt_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sqrt_rg_inter_stage_D_IN;
	if (inst_spfpu_sqrt_rg_state_EN)
	  inst_spfpu_sqrt_rg_state <= `BSV_ASSIGNMENT_DELAY
	      inst_spfpu_sqrt_rg_state_D_IN;
	if (rg_multicycle_op_EN)
	  rg_multicycle_op <= `BSV_ASSIGNMENT_DELAY rg_multicycle_op_D_IN;
	if (rg_result_EN) rg_result <= `BSV_ASSIGNMENT_DELAY rg_result_D_IN;
      end
    if (inst_dpfm_add_sub_ff_input_register_EN)
      inst_dpfm_add_sub_ff_input_register <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_input_register_D_IN;
    if (inst_dpfm_add_sub_ff_stage2_EN)
      inst_dpfm_add_sub_ff_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_stage2_D_IN;
    if (inst_dpfm_add_sub_ff_stage4_EN)
      inst_dpfm_add_sub_ff_stage4 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_stage4_D_IN;
    if (inst_dpfm_add_sub_ff_stage5_EN)
      inst_dpfm_add_sub_ff_stage5 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfm_add_sub_ff_stage5_D_IN;
    if (inst_dpfpu_divider_int_div_rg_inter_stage_EN)
      inst_dpfpu_divider_int_div_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_int_div_rg_inter_stage_D_IN;
    if (inst_dpfpu_divider_rg_stage1_EN)
      inst_dpfpu_divider_rg_stage1 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_rg_stage1_D_IN;
    if (inst_dpfpu_divider_rg_stage2_EN)
      inst_dpfpu_divider_rg_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_rg_stage2_D_IN;
    if (inst_dpfpu_divider_rg_stage3_EN)
      inst_dpfpu_divider_rg_stage3 <= `BSV_ASSIGNMENT_DELAY
	  inst_dpfpu_divider_rg_stage3_D_IN;
    if (inst_spfm_add_sub_ff_input_register_EN)
      inst_spfm_add_sub_ff_input_register <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_input_register_D_IN;
    if (inst_spfm_add_sub_ff_stage2_EN)
      inst_spfm_add_sub_ff_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_stage2_D_IN;
    if (inst_spfm_add_sub_ff_stage4_EN)
      inst_spfm_add_sub_ff_stage4 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_stage4_D_IN;
    if (inst_spfm_add_sub_ff_stage5_EN)
      inst_spfm_add_sub_ff_stage5 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfm_add_sub_ff_stage5_D_IN;
    if (inst_spfpu_divider_int_div_rg_inter_stage_EN)
      inst_spfpu_divider_int_div_rg_inter_stage <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_int_div_rg_inter_stage_D_IN;
    if (inst_spfpu_divider_rg_stage1_EN)
      inst_spfpu_divider_rg_stage1 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_rg_stage1_D_IN;
    if (inst_spfpu_divider_rg_stage2_EN)
      inst_spfpu_divider_rg_stage2 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_rg_stage2_D_IN;
    if (inst_spfpu_divider_rg_stage3_EN)
      inst_spfpu_divider_rg_stage3 <= `BSV_ASSIGNMENT_DELAY
	  inst_spfpu_divider_rg_stage3_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    inst_dpfm_add_sub_ff_input_register =
	201'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_ff_stage2 =
	204'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_ff_stage4 =
	349'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_ff_stage5 =
	197'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfm_add_sub_rg_state_handler = 3'h2;
    inst_dpfpu_divider_int_div_rg_inter_stage =
	170'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_divider_int_div_rg_state = 6'h2A;
    inst_dpfpu_divider_rg_stage1 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_divider_rg_stage2 = 22'h2AAAAA;
    inst_dpfpu_divider_rg_stage3 = 139'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_divider_rg_state_handler = 2'h2;
    inst_dpfpu_sqrt_ff_final_out = 70'h2AAAAAAAAAAAAAAAAA;
    inst_dpfpu_sqrt_rg_inter_stage =
	294'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_dpfpu_sqrt_rg_state = 6'h2A;
    inst_spfm_add_sub_ff_input_register = 108'hAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage2 = 111'h2AAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage4 =
	172'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_ff_stage5 = 106'h2AAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfm_add_sub_rg_state_handler = 3'h2;
    inst_spfpu_divider_int_div_rg_inter_stage = 83'h2AAAAAAAAAAAAAAAAAAAA;
    inst_spfpu_divider_int_div_rg_state = 6'h2A;
    inst_spfpu_divider_rg_stage1 = 67'h2AAAAAAAAAAAAAAAA;
    inst_spfpu_divider_rg_stage2 = 19'h2AAAA;
    inst_spfpu_divider_rg_stage3 = 78'h2AAAAAAAAAAAAAAAAAAA;
    inst_spfpu_divider_rg_state_handler = 2'h2;
    inst_spfpu_sqrt_ff_final_out = 38'h2AAAAAAAAA;
    inst_spfpu_sqrt_rg_inter_stage =
	146'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    inst_spfpu_sqrt_rg_state = 6'h2A;
    rg_multicycle_op = 1'h0;
    rg_result = 70'h2AAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6005 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6006 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6007 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  v__h293004 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6005 ||
	   TASK_testplusargs___d6006 && TASK_testplusargs___d6007))
	$write("[%10d", v__h293004, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6005 ||
	   TASK_testplusargs___d6006 && TASK_testplusargs___d6007))
	$write("FPU: op1:%h op2:%h op3:%h",
	       _start_operand1,
	       _start_operand2,
	       _start_operand3);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6005 ||
	   TASK_testplusargs___d6006 && TASK_testplusargs___d6007))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6011 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6012 = $test$plusargs("mfpu");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  TASK_testplusargs___d6013 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start)
	begin
	  v__h293150 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6011 ||
	   TASK_testplusargs___d6012 && TASK_testplusargs___d6013))
	$write("[%10d", v__h293150, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6011 ||
	   TASK_testplusargs___d6012 && TASK_testplusargs___d6013))
	$write("FPU: opcode:%b f7:%h f3:%b imm:%h issp:%b",
	       _start_opcode,
	       _start_funct7,
	       _start_funct3,
	       _start_imm,
	       _start_issp);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN__start &&
	  (TASK_testplusargs___d6011 ||
	   TASK_testplusargs___d6012 && TASK_testplusargs___d6013))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_rl_flush] and\n  [RL_inst_spfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_rl_flush] and\n  [RL_inst_spfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_rl_flush] and\n  [RL_inst_spfpu_divider_int_div_stage_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_stage_1] and\n  [RL_inst_spfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_stage_1] and\n  [RL_inst_spfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_int_div_recursive_stage &&
	  WILL_FIRE_RL_inst_spfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_divider_int_div_recursive_stage] and\n  [RL_inst_spfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_rl_stage3)
	$display("Error: \"src/fpu//fpu_divider.bsv\", line 124, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_divider_rl_flush]\n  and [RL_inst_spfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_divider_rl_stage2)
	$display("Error: \"src/fpu//fpu_divider.bsv\", line 124, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_divider_rl_flush]\n  and [RL_inst_spfpu_divider_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_divider_rl_stage2 &&
	  WILL_FIRE_RL_inst_spfpu_divider_rl_stage3)
	$display("Error: \"src/fpu//fpu_divider.bsv\", line 124, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_divider_rl_stage2]\n  and [RL_inst_spfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_flush] and\n  [RL_inst_spfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_flush] and\n  [RL_inst_spfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_flush] and\n  [RL_inst_spfpu_sqrt_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_stage2]\n  and [RL_inst_spfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_spfpu_sqrt_rl_stage2]\n  and [RL_inst_spfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_spfpu_sqrt_rl_inter_stage &&
	  WILL_FIRE_RL_inst_spfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_spfpu_sqrt_rl_inter_stage] and [RL_inst_spfpu_sqrt_rl_final_stage]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_rl_flush] and\n  [RL_inst_dpfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_rl_flush] and\n  [RL_inst_dpfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_rl_flush] and\n  [RL_inst_dpfpu_divider_int_div_stage_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_stage_1] and\n  [RL_inst_dpfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_int_div_stage_1 &&
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_stage_1] and\n  [RL_inst_dpfpu_divider_int_div_recursive_stage] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_int_div_recursive_stage &&
	  WILL_FIRE_RL_inst_dpfpu_divider_int_div_end_stage)
	$display("Error: \"src/fpu//integer_divider.bsv\", line 93, column 46: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_divider_int_div_recursive_stage] and\n  [RL_inst_dpfpu_divider_int_div_end_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3)
	$display("Error: \"src/fpu//fpu_divider.bsv\", line 124, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_divider_rl_flush]\n  and [RL_inst_dpfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2)
	$display("Error: \"src/fpu//fpu_divider.bsv\", line 124, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_divider_rl_flush]\n  and [RL_inst_dpfpu_divider_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_divider_rl_stage2 &&
	  WILL_FIRE_RL_inst_dpfpu_divider_rl_stage3)
	$display("Error: \"src/fpu//fpu_divider.bsv\", line 124, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_divider_rl_stage2]\n  and [RL_inst_dpfpu_divider_rl_stage3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_flush] and\n  [RL_inst_dpfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_flush] and\n  [RL_inst_dpfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_flush && WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_flush] and\n  [RL_inst_dpfpu_sqrt_rl_stage2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_stage2]\n  and [RL_inst_dpfpu_sqrt_rl_final_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_sqrt_rl_stage2 &&
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 38: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_inst_dpfpu_sqrt_rl_stage2]\n  and [RL_inst_dpfpu_sqrt_rl_inter_stage] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_inst_dpfpu_sqrt_rl_inter_stage &&
	  WILL_FIRE_RL_inst_dpfpu_sqrt_rl_final_stage)
	$display("Error: \"src/fpu//fpu_sqrt.bsv\", line 114, column 48: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_inst_dpfpu_sqrt_rl_inter_stage] and [RL_inst_dpfpu_sqrt_rl_final_stage]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and\n  [RL_rl_get_output_from_dpfm_add_sub] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and [RL_rl_get_output_from_fm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and [RL_rl_get_output_from_dpfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and [RL_rl_get_output_from_spfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_divider)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_divider] and\n  [RL_rl_get_output_from_dpfpu_divider] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and\n  [RL_rl_get_output_from_dpfm_add_sub] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and [RL_rl_get_output_from_fm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and [RL_rl_get_output_from_dpfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_divider &&
	  WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 58: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_divider] and [RL_rl_get_output_from_spfpu_sqrt]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 91: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_sqrt] and [RL_rl_get_output_from_dpfm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 91: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_sqrt] and [RL_rl_get_output_from_fm_add_sub] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_spfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 91: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_spfpu_sqrt] and [RL_rl_get_output_from_dpfpu_sqrt] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 122: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_sqrt] and [RL_rl_get_output_from_dpfm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_dpfpu_sqrt &&
	  WILL_FIRE_RL_rl_get_output_from_fm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 122: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_dpfpu_sqrt] and [RL_rl_get_output_from_fm_add_sub] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_get_output_from_fm_add_sub &&
	  WILL_FIRE_RL_rl_get_output_from_dpfm_add_sub)
	$display("Error: \"src/fpu//fpu.bsv\", line 216, column 152: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_rl_get_output_from_fm_add_sub] and [RL_rl_get_output_from_dpfm_add_sub]\n  ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0])
	$display("sign : %b exponent %b mantissa %b rounding_mode %b flags %b",
		 ff_input_D_OUT[208],
		 getExp64_res_wget[32:22],
		 getMant64_res_wget[155:104],
		 ff_input_D_OUT[5:3],
		 condFlags64_res_wget[14:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0])
	$display("sign : %b exponent : %b mantissa : %b flags : %b",
		 ff_input_D_OUT[208],
		 getExp64_res_wget[32:22],
		 getMant64_res_wget[155:104],
		 condFlags64_res_wget[14:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_first__319_BIT_0_351_AND_NOT_IF_condF_ETC___d5170)
	$display("sign : %b exponent %b mantissa %b rounding %b flags %b",
		 ff_input_D_OUT[208],
		 getExp64_res_wget[32:22],
		 getMant64_res_wget[155:104],
		 ff_input_D_OUT[5:3],
		 condFlags64_res_wget[14:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_first__319_BIT_0_351_AND_NOT_IF_condF_ETC___d5170)
	$display("exponent : %d", getExp64_res_wget[32:22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d5173)
	$display("Denormal lv_sticky : %b", lv_sticky__h228192);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d5173)
	$display("lv_guard : %b shiftDist : %d", 1'd0, shiftDist__h228295);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d5173)
	$display("expo : %b man : %b", 8'd0, man__h228296);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  NOT_IF_condFlags64_res_whas__438_THEN_condFlag_ETC___d5179)
	$display("expo : %b man : %b", x__h228416[7:0], man__h228395);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_first__319_BIT_0_351_AND_NOT_IF_condF_ETC___d5170)
	$display("lv_roundup : %b", _theResult_____4___1__h228666);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_first__319_BIT_0_351_AND_NOT_IF_condF_ETC___d5170)
	$display("fman: %b", fman__h228865);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  ff_input_D_OUT[0] &&
	  !condFlags64_reswget_BITS_14_TO_10__q33[3] &&
	  !condFlags64_reswget_BITS_14_TO_10__q33[2] &&
	  !condFlags64_reswget_BITS_14_TO_10__q33[0] &&
	  !condFlags64_reswget_BITS_14_TO_10__q33[1] &&
	  !IF_getExp64_res_whas__996_THEN_getExp64_res_wg_ETC___d4309)
	$display("overflow");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage && ff_input_D_OUT[12:8] == 5'b01000 &&
	  ff_input_D_OUT[16:13] == 4'b0100 &&
	  !ff_input_D_OUT[0])
	$display("sign : %b exponent %b mantissa %b rounding_mode %b flags %b",
		 setCanonicalNaN_reswget_BITS_95_TO_64__q42[31],
		 getExp32_res_wget[23:16],
		 getMant32_res_wget[68:46],
		 ff_input_D_OUT[5:3],
		 condFlags32_res_wget[14:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5360)
	$display("Divide_by_zero");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_start_stage &&
	  (ff_input_D_OUT[12:6] != 7'b1110000 &&
	   ff_input_D_OUT[12:6] != 7'b1111000 ||
	   ff_input_D_OUT[5:3] != 3'b0) &&
	  NOT_ff_input_first__319_BITS_12_TO_6_332_EQ_0b_ETC___d5481)
	$display("Divide_by_zero");
  end
  // synopsys translate_on
endmodule  // mkfpu

