//
// Generated by Bluespec Compiler (build 8d454e4)
//
// On Fri Oct  9 13:12:30 IST 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_inst_response_put          O     1 reg
// rx_from_stage0_deq_ena         O     1
// tx_to_stage2_enq_ena           O     1
// tx_to_stage2_enq_data          O   119
// tx_to_stage2_inst_enq_ena      O     1
// tx_to_stage2_inst_enq_data     O    32
// RDY_update_eEpoch              O     1 const
// RDY_update_wEpoch              O     1 const
// RDY_csr_misa_c                 O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// inst_response_put              I    41
// rx_from_stage0_notEmpty_b      I     1
// rx_from_stage0_first_deq_rdy_b  I     1
// rx_from_stage0_first_x         I    77
// tx_to_stage2_notFull_b         I     1
// tx_to_stage2_enq_rdy_b         I     1
// tx_to_stage2_inst_notFull_b    I     1 unused
// tx_to_stage2_inst_enq_rdy_b    I     1
// csr_misa_c_c                   I     1
// EN_inst_response_put           I     1
// EN_update_eEpoch               I     1
// EN_update_wEpoch               I     1
// EN_csr_misa_c                  I     1
//
// Combinational paths from inputs to outputs:
//   (inst_response_put,
//    rx_from_stage0_notEmpty_b,
//    rx_from_stage0_first_deq_rdy_b,
//    tx_to_stage2_notFull_b,
//    tx_to_stage2_enq_rdy_b,
//    tx_to_stage2_inst_enq_rdy_b,
//    EN_inst_response_put,
//    EN_csr_misa_c) -> rx_from_stage0_deq_ena
//   (inst_response_put,
//    rx_from_stage0_notEmpty_b,
//    rx_from_stage0_first_deq_rdy_b,
//    rx_from_stage0_first_x,
//    tx_to_stage2_notFull_b,
//    tx_to_stage2_enq_rdy_b,
//    tx_to_stage2_inst_enq_rdy_b,
//    csr_misa_c_c,
//    EN_inst_response_put,
//    EN_csr_misa_c) -> tx_to_stage2_enq_ena
//   (inst_response_put,
//    rx_from_stage0_notEmpty_b,
//    rx_from_stage0_first_deq_rdy_b,
//    rx_from_stage0_first_x,
//    tx_to_stage2_notFull_b,
//    tx_to_stage2_enq_rdy_b,
//    tx_to_stage2_inst_enq_rdy_b,
//    csr_misa_c_c,
//    EN_inst_response_put,
//    EN_csr_misa_c) -> tx_to_stage2_enq_data
//   (inst_response_put,
//    rx_from_stage0_notEmpty_b,
//    rx_from_stage0_first_deq_rdy_b,
//    rx_from_stage0_first_x,
//    tx_to_stage2_notFull_b,
//    tx_to_stage2_enq_rdy_b,
//    tx_to_stage2_inst_enq_rdy_b,
//    csr_misa_c_c,
//    EN_inst_response_put,
//    EN_csr_misa_c) -> tx_to_stage2_inst_enq_ena
//   (inst_response_put,
//    rx_from_stage0_notEmpty_b,
//    rx_from_stage0_first_deq_rdy_b,
//    rx_from_stage0_first_x,
//    tx_to_stage2_notFull_b,
//    tx_to_stage2_enq_rdy_b,
//    tx_to_stage2_inst_enq_rdy_b,
//    csr_misa_c_c,
//    EN_inst_response_put,
//    EN_csr_misa_c) -> tx_to_stage2_inst_enq_data
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkstage1(CLK,
		RST_N,

		inst_response_put,
		EN_inst_response_put,
		RDY_inst_response_put,

		rx_from_stage0_notEmpty_b,

		rx_from_stage0_first_deq_rdy_b,

		rx_from_stage0_first_x,

		rx_from_stage0_deq_ena,

		tx_to_stage2_notFull_b,

		tx_to_stage2_enq_rdy_b,

		tx_to_stage2_enq_ena,

		tx_to_stage2_enq_data,

		tx_to_stage2_inst_notFull_b,

		tx_to_stage2_inst_enq_rdy_b,

		tx_to_stage2_inst_enq_ena,

		tx_to_stage2_inst_enq_data,

		EN_update_eEpoch,
		RDY_update_eEpoch,

		EN_update_wEpoch,
		RDY_update_wEpoch,

		csr_misa_c_c,
		EN_csr_misa_c,
		RDY_csr_misa_c);
  parameter [63 : 0] hartid = 64'b0;
  input  CLK;
  input  RST_N;

  // action method inst_response_put
  input  [40 : 0] inst_response_put;
  input  EN_inst_response_put;
  output RDY_inst_response_put;

  // action method rx_from_stage0_notEmpty
  input  rx_from_stage0_notEmpty_b;

  // action method rx_from_stage0_first_deq_rdy
  input  rx_from_stage0_first_deq_rdy_b;

  // action method rx_from_stage0_first
  input  [76 : 0] rx_from_stage0_first_x;

  // value method rx_from_stage0_deq_ena
  output rx_from_stage0_deq_ena;

  // action method tx_to_stage2_notFull
  input  tx_to_stage2_notFull_b;

  // action method tx_to_stage2_enq_rdy
  input  tx_to_stage2_enq_rdy_b;

  // value method tx_to_stage2_enq_ena
  output tx_to_stage2_enq_ena;

  // value method tx_to_stage2_enq_data
  output [118 : 0] tx_to_stage2_enq_data;

  // action method tx_to_stage2_inst_notFull
  input  tx_to_stage2_inst_notFull_b;

  // action method tx_to_stage2_inst_enq_rdy
  input  tx_to_stage2_inst_enq_rdy_b;

  // value method tx_to_stage2_inst_enq_ena
  output tx_to_stage2_inst_enq_ena;

  // value method tx_to_stage2_inst_enq_data
  output [31 : 0] tx_to_stage2_inst_enq_data;

  // action method update_eEpoch
  input  EN_update_eEpoch;
  output RDY_update_eEpoch;

  // action method update_wEpoch
  input  EN_update_wEpoch;
  output RDY_update_wEpoch;

  // action method csr_misa_c
  input  csr_misa_c_c;
  input  EN_csr_misa_c;
  output RDY_csr_misa_c;

  // signals for module outputs
  wire [118 : 0] tx_to_stage2_enq_data;
  wire [31 : 0] tx_to_stage2_inst_enq_data;
  wire RDY_csr_misa_c,
       RDY_inst_response_put,
       RDY_update_eEpoch,
       RDY_update_wEpoch,
       rx_from_stage0_deq_ena,
       tx_to_stage2_enq_ena,
       tx_to_stage2_inst_enq_ena;

  // inlined wires
  wire ff_memory_response_dequeueing_whas, tx_tostage2_w_ena_whas;

  // register rg_action
  reg rg_action;
  wire rg_action_D_IN, rg_action_EN;

  // register rg_eEpoch
  reg rg_eEpoch;
  wire rg_eEpoch_D_IN, rg_eEpoch_EN;

  // register rg_prev
  reg [93 : 0] rg_prev;
  wire [93 : 0] rg_prev_D_IN;
  wire rg_prev_EN;

  // register rg_receiving_upper
  reg rg_receiving_upper;
  wire rg_receiving_upper_D_IN, rg_receiving_upper_EN;

  // register rg_wEpoch
  reg rg_wEpoch;
  wire rg_wEpoch_D_IN, rg_wEpoch_EN;

  // ports of submodule ff_memory_response_ff
  wire [40 : 0] ff_memory_response_ff_D_IN, ff_memory_response_ff_D_OUT;
  wire ff_memory_response_ff_CLR,
       ff_memory_response_ff_DEQ,
       ff_memory_response_ff_EMPTY_N,
       ff_memory_response_ff_ENQ,
       ff_memory_response_ff_FULL_N;

  // ports of submodule ff_memory_response_firstValid
  wire ff_memory_response_firstValid_D_IN,
       ff_memory_response_firstValid_EN,
       ff_memory_response_firstValid_Q_OUT;

  // rule scheduling signals
  wire CAN_FIRE_RL_ff_memory_response_dequeue,
       CAN_FIRE_RL_ff_memory_response_enqueue,
       CAN_FIRE_RL_process_instruction,
       CAN_FIRE_csr_misa_c,
       CAN_FIRE_inst_response_put,
       CAN_FIRE_rx_from_stage0_first,
       CAN_FIRE_rx_from_stage0_first_deq_rdy,
       CAN_FIRE_rx_from_stage0_notEmpty,
       CAN_FIRE_tx_to_stage2_enq_rdy,
       CAN_FIRE_tx_to_stage2_inst_enq_rdy,
       CAN_FIRE_tx_to_stage2_inst_notFull,
       CAN_FIRE_tx_to_stage2_notFull,
       CAN_FIRE_update_eEpoch,
       CAN_FIRE_update_wEpoch,
       WILL_FIRE_RL_ff_memory_response_dequeue,
       WILL_FIRE_RL_ff_memory_response_enqueue,
       WILL_FIRE_RL_process_instruction,
       WILL_FIRE_csr_misa_c,
       WILL_FIRE_inst_response_put,
       WILL_FIRE_rx_from_stage0_first,
       WILL_FIRE_rx_from_stage0_first_deq_rdy,
       WILL_FIRE_rx_from_stage0_notEmpty,
       WILL_FIRE_tx_to_stage2_enq_rdy,
       WILL_FIRE_tx_to_stage2_inst_enq_rdy,
       WILL_FIRE_tx_to_stage2_inst_notFull,
       WILL_FIRE_tx_to_stage2_notFull,
       WILL_FIRE_update_eEpoch,
       WILL_FIRE_update_wEpoch;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d292;
  reg TASK_testplusargs___d293;
  reg TASK_testplusargs___d294;
  reg [63 : 0] v__h4512;
  reg TASK_testplusargs___d24;
  reg TASK_testplusargs___d25;
  reg TASK_testplusargs___d26;
  reg [63 : 0] v__h1518;
  reg TASK_testplusargs___d120;
  reg TASK_testplusargs___d121;
  reg TASK_testplusargs___d122;
  reg [63 : 0] v__h1960;
  reg TASK_testplusargs___d156;
  reg TASK_testplusargs___d157;
  reg TASK_testplusargs___d158;
  reg [63 : 0] v__h3504;
  reg TASK_testplusargs___d186;
  reg TASK_testplusargs___d187;
  reg TASK_testplusargs___d188;
  reg [63 : 0] v__h3794;
  reg TASK_testplusargs___d243;
  reg TASK_testplusargs___d244;
  reg TASK_testplusargs___d245;
  reg [63 : 0] v__h4263;
  reg TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d252;
  reg TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d254;
  reg TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d258;
  reg TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d260;
  reg TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d265;
  reg TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d267;
  reg TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d279;
  reg TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d282;
  reg TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d285;
  reg TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d288;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d37;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d39;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d45;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d47;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d51;
  reg TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d53;
  reg NOT_rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff__ETC___d125;
  reg TASK_testplusargs_56_OR_TASK_testplusargs_57_A_ETC___d178;
  reg TASK_testplusargs_56_OR_TASK_testplusargs_57_A_ETC___d181;
  reg TASK_testplusargs_86_OR_TASK_testplusargs_87_A_ETC___d192;
  reg TASK_testplusargs_86_OR_TASK_testplusargs_87_A_ETC___d193;
  reg rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248;
  reg TASK_testplusargs_92_OR_TASK_testplusargs_93_A_ETC___d300;
  reg TASK_testplusargs_92_OR_TASK_testplusargs_93_A_ETC___d302;
  // synopsys translate_on

  // remaining internal signals
  wire [63 : 0] IF_rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_m_ETC___d171,
		rx_from_stage0_first_x_BITS_76_TO_13__q1,
		x1_avValue_fst_address__h3558,
		x1_avValue_fst_address__h3564,
		x1_avValue_snd_fst_address__h3567,
		x1_avValue_snd_fst_address__h3570,
		x1_avValue_snd_snd_snd_pc__h3301,
		x1_avValue_snd_snd_snd_pc__h3305,
		x1_avValue_snd_snd_snd_snd_pc__h3200,
		x1_avValue_snd_snd_snd_snd_snd_pc__h3267,
		x1_avValue_snd_snd_snd_snd_snd_snd_pc__h3309,
		x1_avValue_snd_snd_snd_snd_snd_snd_pc__h3313,
		x_pc__h3115,
		y_avValue_fst_address__h3561;
  wire [31 : 0] IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71,
		final_instruction___1__h4106,
		final_instruction__h3091,
		pipedata_instruction__h4095,
		y_avValue_snd_fst__h3277,
		y_avValue_snd_snd_snd_fst__h3154,
		y_avValue_snd_snd_snd_fst__h3156,
		y_avValue_snd_snd_snd_fst__h3215,
		y_avValue_snd_snd_snd_fst__h3217;
  wire [15 : 0] x1_avValue_snd_snd_snd_instruction__h3302,
		x1_avValue_snd_snd_snd_instruction__h3306,
		x1_avValue_snd_snd_snd_snd_instruction__h3201,
		x1_avValue_snd_snd_snd_snd_snd_instruction__h3268,
		x1_avValue_snd_snd_snd_snd_snd_snd_instruction__h3310,
		x1_avValue_snd_snd_snd_snd_snd_snd_instruction__h3314,
		x_instruction__h3116;
  wire [13 : 0] rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_CONCAT_IF_rg__ETC___d154;
  wire [12 : 0] IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d239;
  wire [11 : 0] IF_IF_ff_memory_response_ff_i_notEmpty_THEN_ff_ETC___d150,
		IF_IF_rx_fromstage0_w_data_whas__0_THEN_rx_fro_ETC___d151,
		IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d152;
  wire [7 : 0] x1_avValue_fst_history__h4158;
  wire [5 : 0] cause__h3436;
  wire [1 : 0] curr_epoch__h1421,
	       x1_avValue_fst_prediction__h4143,
	       x1_avValue_fst_prediction__h4147,
	       x1_avValue_fst_prediction__h4151,
	       x1_avValue_fst_prediction__h4155,
	       x__h2252,
	       y__h1739,
	       y_avValue_fst_prediction__h4131,
	       y_avValue_fst_prediction__h4139;
  wire IF_IF_ff_memory_response_ff_i_notEmpty_THEN_ff_ETC___d233,
       IF_IF_ff_memory_response_ff_i_notEmpty_THEN_ff_ETC___d276,
       IF_IF_rx_fromstage0_w_data_whas__0_THEN_rx_fro_ETC___d115,
       IF_IF_rx_fromstage0_w_data_whas__0_THEN_rx_fro_ETC___d211,
       IF_IF_rx_fromstage0_w_data_whas__0_THEN_rx_fro_ETC___d234,
       IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d212,
       IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d218,
       IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d251,
       IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d264,
       IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d278,
       IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d281,
       IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d284,
       IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d287,
       IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d99,
       IF_ff_memory_response_ff_i_notEmpty_THEN_NOT_f_ETC___d177,
       IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d180,
       IF_rg_prev_8_BIT_8_1_THEN_rg_prev_8_BITS_11_TO_ETC___d94,
       IF_rx_fromstage0_w_data_whas__0_THEN_rx_fromst_ETC___d96,
       NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d109,
       NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d198,
       NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d88,
       ff_memory_response_firstValid_read_AND_ff_memo_ETC___d19,
       rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86,
       rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63;

  // action method inst_response_put
  assign RDY_inst_response_put = ff_memory_response_ff_FULL_N ;
  assign CAN_FIRE_inst_response_put = ff_memory_response_ff_FULL_N ;
  assign WILL_FIRE_inst_response_put = EN_inst_response_put ;

  // action method rx_from_stage0_notEmpty
  assign CAN_FIRE_rx_from_stage0_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_from_stage0_notEmpty = 1'd1 ;

  // action method rx_from_stage0_first_deq_rdy
  assign CAN_FIRE_rx_from_stage0_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_from_stage0_first_deq_rdy = 1'd1 ;

  // action method rx_from_stage0_first
  assign CAN_FIRE_rx_from_stage0_first = 1'd1 ;
  assign WILL_FIRE_rx_from_stage0_first = 1'd1 ;

  // value method rx_from_stage0_deq_ena
  assign rx_from_stage0_deq_ena = ff_memory_response_dequeueing_whas ;

  // action method tx_to_stage2_notFull
  assign CAN_FIRE_tx_to_stage2_notFull = 1'd1 ;
  assign WILL_FIRE_tx_to_stage2_notFull = 1'd1 ;

  // action method tx_to_stage2_enq_rdy
  assign CAN_FIRE_tx_to_stage2_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_to_stage2_enq_rdy = 1'd1 ;

  // value method tx_to_stage2_enq_ena
  assign tx_to_stage2_enq_ena = tx_tostage2_w_ena_whas ;

  // value method tx_to_stage2_enq_data
  assign tx_to_stage2_enq_data =
	     { IF_rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_m_ETC___d171,
	       pipedata_instruction__h4095,
	       curr_epoch__h1421,
	       IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d218,
	       cause__h3436,
	       rg_receiving_upper &&
	       IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d180,
	       IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d239 } ;

  // action method tx_to_stage2_inst_notFull
  assign CAN_FIRE_tx_to_stage2_inst_notFull = 1'd1 ;
  assign WILL_FIRE_tx_to_stage2_inst_notFull = 1'd1 ;

  // action method tx_to_stage2_inst_enq_rdy
  assign CAN_FIRE_tx_to_stage2_inst_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_to_stage2_inst_enq_rdy = 1'd1 ;

  // value method tx_to_stage2_inst_enq_ena
  assign tx_to_stage2_inst_enq_ena = tx_tostage2_w_ena_whas ;

  // value method tx_to_stage2_inst_enq_data
  assign tx_to_stage2_inst_enq_data =
	     (!rg_action &&
	      rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63) ?
	       y_avValue_snd_snd_snd_fst__h3154 :
	       y_avValue_snd_snd_snd_fst__h3156 ;

  // action method update_eEpoch
  assign RDY_update_eEpoch = 1'd1 ;
  assign CAN_FIRE_update_eEpoch = 1'd1 ;
  assign WILL_FIRE_update_eEpoch = EN_update_eEpoch ;

  // action method update_wEpoch
  assign RDY_update_wEpoch = 1'd1 ;
  assign CAN_FIRE_update_wEpoch = 1'd1 ;
  assign WILL_FIRE_update_wEpoch = EN_update_wEpoch ;

  // action method csr_misa_c
  assign RDY_csr_misa_c = 1'd1 ;
  assign CAN_FIRE_csr_misa_c = 1'd1 ;
  assign WILL_FIRE_csr_misa_c = EN_csr_misa_c ;

  // submodule ff_memory_response_ff
  FIFO2 #(.width(32'd41), .guarded(32'd0)) ff_memory_response_ff(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(ff_memory_response_ff_D_IN),
								 .ENQ(ff_memory_response_ff_ENQ),
								 .DEQ(ff_memory_response_ff_DEQ),
								 .CLR(ff_memory_response_ff_CLR),
								 .D_OUT(ff_memory_response_ff_D_OUT),
								 .FULL_N(ff_memory_response_ff_FULL_N),
								 .EMPTY_N(ff_memory_response_ff_EMPTY_N));

  // submodule ff_memory_response_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ff_memory_response_firstValid(.CLK(CLK),
							 .D_IN(ff_memory_response_firstValid_D_IN),
							 .EN(ff_memory_response_firstValid_EN),
							 .Q_OUT(ff_memory_response_firstValid_Q_OUT));

  // rule RL_process_instruction
  assign CAN_FIRE_RL_process_instruction =
	     ff_memory_response_firstValid_read_AND_ff_memo_ETC___d19 &&
	     rx_from_stage0_notEmpty_b &&
	     tx_to_stage2_notFull_b ;
  assign WILL_FIRE_RL_process_instruction = CAN_FIRE_RL_process_instruction ;

  // rule RL_ff_memory_response_enqueue
  assign CAN_FIRE_RL_ff_memory_response_enqueue =
	     EN_inst_response_put &&
	     (!ff_memory_response_dequeueing_whas ||
	      ff_memory_response_ff_EMPTY_N) ;
  assign WILL_FIRE_RL_ff_memory_response_enqueue =
	     CAN_FIRE_RL_ff_memory_response_enqueue ;

  // rule RL_ff_memory_response_dequeue
  assign CAN_FIRE_RL_ff_memory_response_dequeue =
	     ff_memory_response_dequeueing_whas &&
	     ff_memory_response_ff_EMPTY_N ;
  assign WILL_FIRE_RL_ff_memory_response_dequeue =
	     CAN_FIRE_RL_ff_memory_response_dequeue ;

  // inlined wires
  assign tx_tostage2_w_ena_whas =
	     WILL_FIRE_RL_process_instruction &&
	     rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 &&
	     NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d198 ;
  assign ff_memory_response_dequeueing_whas =
	     WILL_FIRE_RL_process_instruction &&
	     (rg_prev[15:14] == 2'b11 || rg_action ||
	      !rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63 ||
	      !rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86) ;

  // register rg_action
  assign rg_action_D_IN =
	     !rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 ||
	     !rg_action &&
	     rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63 ||
	     IF_IF_rx_fromstage0_w_data_whas__0_THEN_rx_fro_ETC___d115 ;
  assign rg_action_EN =
	     WILL_FIRE_RL_process_instruction &&
	     (NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d109 ||
	      !rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86) ;

  // register rg_eEpoch
  assign rg_eEpoch_D_IN = ~rg_eEpoch ;
  assign rg_eEpoch_EN = EN_update_eEpoch ;

  // register rg_prev
  assign rg_prev_D_IN =
	     { x_pc__h3115,
	       x_instruction__h3116,
	       rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_CONCAT_IF_rg__ETC___d154 } ;
  assign rg_prev_EN = CAN_FIRE_RL_process_instruction ;

  // register rg_receiving_upper
  assign rg_receiving_upper_D_IN =
	     rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 &&
	     IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d99 ;
  assign rg_receiving_upper_EN =
	     WILL_FIRE_RL_process_instruction &&
	     NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d88 ;

  // register rg_wEpoch
  assign rg_wEpoch_D_IN = ~rg_wEpoch ;
  assign rg_wEpoch_EN = EN_update_wEpoch ;

  // submodule ff_memory_response_ff
  assign ff_memory_response_ff_D_IN = inst_response_put ;
  assign ff_memory_response_ff_ENQ = CAN_FIRE_RL_ff_memory_response_enqueue ;
  assign ff_memory_response_ff_DEQ = CAN_FIRE_RL_ff_memory_response_dequeue ;
  assign ff_memory_response_ff_CLR = 1'b0 ;

  // submodule ff_memory_response_firstValid
  assign ff_memory_response_firstValid_D_IN = 1'd1 ;
  assign ff_memory_response_firstValid_EN =
	     ff_memory_response_dequeueing_whas ;

  // remaining internal signals
  module_fn_decompress instance_fn_decompress_0(.fn_decompress_inst(final_instruction__h3091[15:0]),
						.fn_decompress(final_instruction___1__h4106));
  assign IF_IF_ff_memory_response_ff_i_notEmpty_THEN_ff_ETC___d150 =
	     (IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[1:0] ==
	      2'b11) ?
	       rg_prev[11:0] :
	       (csr_misa_c_c ? rx_from_stage0_first_x[11:0] : rg_prev[11:0]) ;
  assign IF_IF_ff_memory_response_ff_i_notEmpty_THEN_ff_ETC___d233 =
	     (IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[1:0] ==
	      2'b11) ?
	       rx_from_stage0_first_x[9] :
	       (csr_misa_c_c ?
		  !rx_from_stage0_first_x[8] && rx_from_stage0_first_x[9] :
		  rx_from_stage0_first_x[9]) ;
  assign IF_IF_ff_memory_response_ff_i_notEmpty_THEN_ff_ETC___d276 =
	     (IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[1:0] ==
	      2'b11) ?
	       !rx_from_stage0_first_x[9] :
	       (csr_misa_c_c ?
		  rx_from_stage0_first_x[8] || !rx_from_stage0_first_x[9] :
		  !rx_from_stage0_first_x[9]) ;
  assign IF_IF_rx_fromstage0_w_data_whas__0_THEN_rx_fro_ETC___d115 =
	     (rx_from_stage0_first_x[12] && csr_misa_c_c) ?
	       IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[17:16] !=
	       2'b11 :
	       IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[1:0] ==
	       2'b11 ||
	       !rx_from_stage0_first_x[8] &&
	       !IF_rx_fromstage0_w_data_whas__0_THEN_rx_fromst_ETC___d96 ;
  assign IF_IF_rx_fromstage0_w_data_whas__0_THEN_rx_fro_ETC___d151 =
	     (rx_from_stage0_first_x[12] && csr_misa_c_c) ?
	       ((IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[17:16] ==
		 2'b11) ?
		  rx_from_stage0_first_x[11:0] :
		  rg_prev[11:0]) :
	       IF_IF_ff_memory_response_ff_i_notEmpty_THEN_ff_ETC___d150 ;
  assign IF_IF_rx_fromstage0_w_data_whas__0_THEN_rx_fro_ETC___d211 =
	     (rx_from_stage0_first_x[12] && csr_misa_c_c) ?
	       IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[17:16] !=
	       2'b11 :
	       IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[1:0] !=
	       2'b11 &&
	       csr_misa_c_c ;
  assign IF_IF_rx_fromstage0_w_data_whas__0_THEN_rx_fro_ETC___d234 =
	     (rx_from_stage0_first_x[12] && csr_misa_c_c) ?
	       rx_from_stage0_first_x[8] && rx_from_stage0_first_x[9] :
	       IF_IF_ff_memory_response_ff_i_notEmpty_THEN_ff_ETC___d233 ;
  assign IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d152 =
	     (!rg_action &&
	      rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63) ?
	       ((rg_prev[15:14] == 2'b11) ?
		  rx_from_stage0_first_x[11:0] :
		  rg_prev[11:0]) :
	       IF_IF_rx_fromstage0_w_data_whas__0_THEN_rx_fro_ETC___d151 ;
  assign IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d212 =
	     (!rg_action &&
	      rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63) ?
	       rg_prev[15:14] != 2'b11 :
	       IF_IF_rx_fromstage0_w_data_whas__0_THEN_rx_fro_ETC___d211 ;
  assign IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d218 =
	     (!rg_action &&
	      rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63) ?
	       rg_prev[15:14] == 2'b11 &&
	       IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d180 :
	       IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d180 ;
  assign IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d239 =
	     (!rg_action &&
	      rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63) ?
	       { rg_prev[15:14] != 2'b11,
		 x__h2252,
		 rg_prev[8] && rg_prev[9],
		 rg_prev[8:0] } :
	       { IF_IF_rx_fromstage0_w_data_whas__0_THEN_rx_fro_ETC___d211,
		 x1_avValue_fst_prediction__h4151,
		 IF_IF_rx_fromstage0_w_data_whas__0_THEN_rx_fro_ETC___d234,
		 rx_from_stage0_first_x[8:0] } ;
  assign IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d251 =
	     (!rg_action &&
	      rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63) ?
	       rg_prev[15:14] != 2'b11 ||
	       IF_ff_memory_response_ff_i_notEmpty_THEN_NOT_f_ETC___d177 :
	       IF_ff_memory_response_ff_i_notEmpty_THEN_NOT_f_ETC___d177 ;
  assign IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d264 =
	     (!rg_action &&
	      rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63) ?
	       rg_prev[15:14] == 2'b11 :
	       ((rx_from_stage0_first_x[12] && csr_misa_c_c) ?
		  IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[17:16] ==
		  2'b11 :
		  IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[1:0] ==
		  2'b11 ||
		  !csr_misa_c_c) ;
  assign IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d278 =
	     (!rg_action &&
	      rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63) ?
	       !rg_prev[8] || !rg_prev[9] :
	       ((rx_from_stage0_first_x[12] && csr_misa_c_c) ?
		  !rx_from_stage0_first_x[8] || !rx_from_stage0_first_x[9] :
		  IF_IF_ff_memory_response_ff_i_notEmpty_THEN_ff_ETC___d276) ;
  assign IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d281 =
	     (!rg_action &&
	      rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63) ?
	       rg_prev[8] && rg_prev[9] :
	       IF_IF_rx_fromstage0_w_data_whas__0_THEN_rx_fro_ETC___d234 ;
  assign IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d284 =
	     (!rg_action &&
	      rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63) ?
	       !rg_prev[8] :
	       !rx_from_stage0_first_x[8] ;
  assign IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d287 =
	     (!rg_action &&
	      rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63) ?
	       rg_prev[8] :
	       rx_from_stage0_first_x[8] ;
  assign IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d99 =
	     (!rg_action &&
	      rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63) ?
	       rg_prev[15:14] == 2'b11 &&
	       IF_rg_prev_8_BIT_8_1_THEN_rg_prev_8_BITS_11_TO_ETC___d94 :
	       rx_from_stage0_first_x[12] && csr_misa_c_c ||
	       rx_from_stage0_first_x[8] ||
	       IF_rx_fromstage0_w_data_whas__0_THEN_rx_fromst_ETC___d96 ;
  assign IF_ff_memory_response_ff_i_notEmpty_THEN_NOT_f_ETC___d177 =
	     ff_memory_response_ff_EMPTY_N ?
	       !ff_memory_response_ff_D_OUT[8] :
	       !inst_response_put[8] ;
  assign IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d180 =
	     ff_memory_response_ff_EMPTY_N ?
	       ff_memory_response_ff_D_OUT[8] :
	       inst_response_put[8] ;
  assign IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71 =
	     ff_memory_response_ff_EMPTY_N ?
	       ff_memory_response_ff_D_OUT[40:9] :
	       inst_response_put[40:9] ;
  assign IF_rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_m_ETC___d171 =
	     rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 ?
	       x1_avValue_snd_fst_address__h3570 :
	       rx_from_stage0_first_x[76:13] ;
  assign IF_rg_prev_8_BIT_8_1_THEN_rg_prev_8_BITS_11_TO_ETC___d94 =
	     x__h2252 <= 2'd1 ;
  assign IF_rx_fromstage0_w_data_whas__0_THEN_rx_fromst_ETC___d96 =
	     rx_from_stage0_first_x[11:10] <= 2'd1 ;
  assign NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d109 =
	     !rg_action &&
	     rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63 &&
	     (!IF_rg_prev_8_BIT_8_1_THEN_rg_prev_8_BITS_11_TO_ETC___d94 ||
	      rg_prev[15:14] != 2'b11) ||
	     (rg_action ||
	      !rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63) &&
	     (IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[1:0] ==
	      2'b11 ||
	      csr_misa_c_c) ;
  assign NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d198 =
	     !rg_action &&
	     rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63 ||
	     !rx_from_stage0_first_x[12] ||
	     !csr_misa_c_c ||
	     IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[17:16] !=
	     2'b11 ;
  assign NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d88 =
	     !rg_action &&
	     rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63 ||
	     rx_from_stage0_first_x[12] && csr_misa_c_c &&
	     IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[17:16] ==
	     2'b11 ||
	     !rx_from_stage0_first_x[12] &&
	     IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[1:0] !=
	     2'b11 &&
	     csr_misa_c_c ||
	     !rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 ;
  assign cause__h3436 =
	     ff_memory_response_ff_EMPTY_N ?
	       ff_memory_response_ff_D_OUT[7:2] :
	       inst_response_put[7:2] ;
  assign curr_epoch__h1421 = { rg_eEpoch, rg_wEpoch } ;
  assign ff_memory_response_firstValid_read_AND_ff_memo_ETC___d19 =
	     ff_memory_response_firstValid_Q_OUT &&
	     (ff_memory_response_ff_EMPTY_N || EN_inst_response_put) &&
	     rx_from_stage0_first_deq_rdy_b &&
	     EN_csr_misa_c &&
	     tx_to_stage2_inst_enq_rdy_b &&
	     tx_to_stage2_enq_rdy_b ;
  assign final_instruction__h3091 = tx_to_stage2_inst_enq_data ;
  assign pipedata_instruction__h4095 =
	     (rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 &&
	      IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d212) ?
	       final_instruction___1__h4106 :
	       final_instruction__h3091 ;
  assign rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_CONCAT_IF_rg__ETC___d154 =
	     { curr_epoch__h1421,
	       rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 ?
		 IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d152 :
		 rg_prev[11:0] } ;
  assign rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 =
	     curr_epoch__h1421 == y__h1739 ;
  assign rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63 =
	     rg_prev[13:12] == curr_epoch__h1421 ;
  assign rx_from_stage0_first_x_BITS_76_TO_13__q1 =
	     rx_from_stage0_first_x[76:13] ;
  assign x1_avValue_fst_address__h3558 =
	     { rg_prev[93:32], 1'd1, rg_prev[30] } ;
  assign x1_avValue_fst_address__h3564 =
	     (IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[17:16] ==
	      2'b11) ?
	       rx_from_stage0_first_x[76:13] :
	       y_avValue_fst_address__h3561 ;
  assign x1_avValue_fst_history__h4158 =
	     (!rg_action &&
	      rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63) ?
	       rg_prev[7:0] :
	       rx_from_stage0_first_x[7:0] ;
  assign x1_avValue_fst_prediction__h4143 =
	     csr_misa_c_c ?
	       y_avValue_fst_prediction__h4139 :
	       rx_from_stage0_first_x[11:10] ;
  assign x1_avValue_fst_prediction__h4147 =
	     (IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[1:0] ==
	      2'b11) ?
	       rx_from_stage0_first_x[11:10] :
	       x1_avValue_fst_prediction__h4143 ;
  assign x1_avValue_fst_prediction__h4151 =
	     (rx_from_stage0_first_x[12] && csr_misa_c_c) ?
	       y_avValue_fst_prediction__h4131 :
	       x1_avValue_fst_prediction__h4147 ;
  assign x1_avValue_fst_prediction__h4155 =
	     (!rg_action &&
	      rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63) ?
	       x__h2252 :
	       x1_avValue_fst_prediction__h4151 ;
  assign x1_avValue_snd_fst_address__h3567 =
	     (rx_from_stage0_first_x[12] && csr_misa_c_c) ?
	       x1_avValue_fst_address__h3564 :
	       rx_from_stage0_first_x[76:13] ;
  assign x1_avValue_snd_fst_address__h3570 =
	     (!rg_action &&
	      rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63) ?
	       x1_avValue_fst_address__h3558 :
	       x1_avValue_snd_fst_address__h3567 ;
  assign x1_avValue_snd_snd_snd_instruction__h3302 =
	     csr_misa_c_c ?
	       IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[31:16] :
	       rg_prev[29:14] ;
  assign x1_avValue_snd_snd_snd_instruction__h3306 =
	     (IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[1:0] ==
	      2'b11) ?
	       rg_prev[29:14] :
	       x1_avValue_snd_snd_snd_instruction__h3302 ;
  assign x1_avValue_snd_snd_snd_pc__h3301 =
	     csr_misa_c_c ? rx_from_stage0_first_x[76:13] : rg_prev[93:30] ;
  assign x1_avValue_snd_snd_snd_pc__h3305 =
	     (IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[1:0] ==
	      2'b11) ?
	       rg_prev[93:30] :
	       x1_avValue_snd_snd_snd_pc__h3301 ;
  assign x1_avValue_snd_snd_snd_snd_instruction__h3201 =
	     (rg_prev[15:14] == 2'b11) ?
	       IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[31:16] :
	       rg_prev[29:14] ;
  assign x1_avValue_snd_snd_snd_snd_pc__h3200 =
	     (rg_prev[15:14] == 2'b11) ?
	       rx_from_stage0_first_x[76:13] :
	       rg_prev[93:30] ;
  assign x1_avValue_snd_snd_snd_snd_snd_instruction__h3268 =
	     (IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[17:16] ==
	      2'b11) ?
	       IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[31:16] :
	       rg_prev[29:14] ;
  assign x1_avValue_snd_snd_snd_snd_snd_pc__h3267 =
	     (IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[17:16] ==
	      2'b11) ?
	       rx_from_stage0_first_x[76:13] :
	       rg_prev[93:30] ;
  assign x1_avValue_snd_snd_snd_snd_snd_snd_instruction__h3310 =
	     (rx_from_stage0_first_x[12] && csr_misa_c_c) ?
	       x1_avValue_snd_snd_snd_snd_snd_instruction__h3268 :
	       x1_avValue_snd_snd_snd_instruction__h3306 ;
  assign x1_avValue_snd_snd_snd_snd_snd_snd_instruction__h3314 =
	     (!rg_action &&
	      rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63) ?
	       x1_avValue_snd_snd_snd_snd_instruction__h3201 :
	       x1_avValue_snd_snd_snd_snd_snd_snd_instruction__h3310 ;
  assign x1_avValue_snd_snd_snd_snd_snd_snd_pc__h3309 =
	     (rx_from_stage0_first_x[12] && csr_misa_c_c) ?
	       x1_avValue_snd_snd_snd_snd_snd_pc__h3267 :
	       x1_avValue_snd_snd_snd_pc__h3305 ;
  assign x1_avValue_snd_snd_snd_snd_snd_snd_pc__h3313 =
	     (!rg_action &&
	      rg_prev_8_BITS_13_TO_12_9_EQ_rg_eEpoch_0_CONCA_ETC___d63) ?
	       x1_avValue_snd_snd_snd_snd_pc__h3200 :
	       x1_avValue_snd_snd_snd_snd_snd_snd_pc__h3309 ;
  assign x__h2252 = rg_prev[8] ? rg_prev[11:10] : 2'd1 ;
  assign x_instruction__h3116 =
	     rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 ?
	       x1_avValue_snd_snd_snd_snd_snd_snd_instruction__h3314 :
	       rg_prev[29:14] ;
  assign x_pc__h3115 =
	     rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 ?
	       x1_avValue_snd_snd_snd_snd_snd_snd_pc__h3313 :
	       rg_prev[93:30] ;
  assign y__h1739 =
	     ff_memory_response_ff_EMPTY_N ?
	       ff_memory_response_ff_D_OUT[1:0] :
	       inst_response_put[1:0] ;
  assign y_avValue_fst_address__h3561 =
	     { rx_from_stage0_first_x_BITS_76_TO_13__q1[63:2],
	       1'd1,
	       rx_from_stage0_first_x_BITS_76_TO_13__q1[0] } ;
  assign y_avValue_fst_prediction__h4131 =
	     rx_from_stage0_first_x[8] ?
	       rx_from_stage0_first_x[11:10] :
	       2'd1 ;
  assign y_avValue_fst_prediction__h4139 =
	     rx_from_stage0_first_x[8] ?
	       2'd1 :
	       rx_from_stage0_first_x[11:10] ;
  assign y_avValue_snd_fst__h3277 =
	     { 16'd0,
	       IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[15:0] } ;
  assign y_avValue_snd_snd_snd_fst__h3154 =
	     { (rg_prev[15:14] == 2'b11) ?
		 IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[15:0] :
		 16'd0,
	       rg_prev[29:14] } ;
  assign y_avValue_snd_snd_snd_fst__h3156 =
	     (rx_from_stage0_first_x[12] && csr_misa_c_c) ?
	       y_avValue_snd_snd_snd_fst__h3215 :
	       y_avValue_snd_snd_snd_fst__h3217 ;
  assign y_avValue_snd_snd_snd_fst__h3215 =
	     { 16'd0,
	       IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[31:16] } ;
  assign y_avValue_snd_snd_snd_fst__h3217 =
	     (IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71[1:0] ==
	      2'b11) ?
	       IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71 :
	       y_avValue_snd_fst__h3277 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_action <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_eEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_prev <= `BSV_ASSIGNMENT_DELAY
	    94'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
	rg_receiving_upper <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_wEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_action_EN) rg_action <= `BSV_ASSIGNMENT_DELAY rg_action_D_IN;
	if (rg_eEpoch_EN) rg_eEpoch <= `BSV_ASSIGNMENT_DELAY rg_eEpoch_D_IN;
	if (rg_prev_EN) rg_prev <= `BSV_ASSIGNMENT_DELAY rg_prev_D_IN;
	if (rg_receiving_upper_EN)
	  rg_receiving_upper <= `BSV_ASSIGNMENT_DELAY rg_receiving_upper_D_IN;
	if (rg_wEpoch_EN) rg_wEpoch <= `BSV_ASSIGNMENT_DELAY rg_wEpoch_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_action = 1'h0;
    rg_eEpoch = 1'h0;
    rg_prev = 94'h2AAAAAAAAAAAAAAAAAAAAAAA;
    rg_receiving_upper = 1'h0;
    rg_wEpoch = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inst_response_put)
	begin
	  TASK_testplusargs___d292 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inst_response_put)
	begin
	  TASK_testplusargs___d293 = $test$plusargs("mstage1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inst_response_put)
	begin
	  TASK_testplusargs___d294 = $test$plusargs("l3");
	  #0;
	end
    TASK_testplusargs_92_OR_TASK_testplusargs_93_A_ETC___d300 =
	(TASK_testplusargs___d292 ||
	 TASK_testplusargs___d293 && TASK_testplusargs___d294) &&
	inst_response_put[8];
    TASK_testplusargs_92_OR_TASK_testplusargs_93_A_ETC___d302 =
	(TASK_testplusargs___d292 ||
	 TASK_testplusargs___d293 && TASK_testplusargs___d294) &&
	!inst_response_put[8];
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inst_response_put)
	begin
	  v__h4512 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inst_response_put &&
	  (TASK_testplusargs___d292 ||
	   TASK_testplusargs___d293 && TASK_testplusargs___d294))
	$write("[%10d", v__h4512, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inst_response_put &&
	  (TASK_testplusargs___d292 ||
	   TASK_testplusargs___d293 && TASK_testplusargs___d294))
	$write("[%2d]STAGE1: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inst_response_put &&
	  (TASK_testplusargs___d292 ||
	   TASK_testplusargs___d293 && TASK_testplusargs___d294))
	$write("IMem_core_response { ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inst_response_put &&
	  (TASK_testplusargs___d292 ||
	   TASK_testplusargs___d293 && TASK_testplusargs___d294))
	$write("'h%h", inst_response_put[40:9]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inst_response_put &&
	  (TASK_testplusargs___d292 ||
	   TASK_testplusargs___d293 && TASK_testplusargs___d294))
	$write(", ", "trap: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inst_response_put &&
	  TASK_testplusargs_92_OR_TASK_testplusargs_93_A_ETC___d300)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inst_response_put &&
	  TASK_testplusargs_92_OR_TASK_testplusargs_93_A_ETC___d302)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inst_response_put &&
	  (TASK_testplusargs___d292 ||
	   TASK_testplusargs___d293 && TASK_testplusargs___d294))
	$write(", ", "cause: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inst_response_put &&
	  (TASK_testplusargs___d292 ||
	   TASK_testplusargs___d293 && TASK_testplusargs___d294))
	$write("'h%h", inst_response_put[7:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inst_response_put &&
	  (TASK_testplusargs___d292 ||
	   TASK_testplusargs___d293 && TASK_testplusargs___d294))
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inst_response_put &&
	  (TASK_testplusargs___d292 ||
	   TASK_testplusargs___d293 && TASK_testplusargs___d294))
	$write("'h%h", inst_response_put[1:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_inst_response_put &&
	  (TASK_testplusargs___d292 ||
	   TASK_testplusargs___d293 && TASK_testplusargs___d294))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction)
	begin
	  TASK_testplusargs___d24 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction)
	begin
	  TASK_testplusargs___d25 = $test$plusargs("mstage1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction)
	begin
	  TASK_testplusargs___d26 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d37 =
	(TASK_testplusargs___d24 ||
	 TASK_testplusargs___d25 && TASK_testplusargs___d26) &&
	!rx_from_stage0_first_x[12];
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d39 =
	(TASK_testplusargs___d24 ||
	 TASK_testplusargs___d25 && TASK_testplusargs___d26) &&
	rx_from_stage0_first_x[12];
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d45 =
	(TASK_testplusargs___d24 ||
	 TASK_testplusargs___d25 && TASK_testplusargs___d26) &&
	!rx_from_stage0_first_x[9];
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d47 =
	(TASK_testplusargs___d24 ||
	 TASK_testplusargs___d25 && TASK_testplusargs___d26) &&
	rx_from_stage0_first_x[9];
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d53 =
	(TASK_testplusargs___d24 ||
	 TASK_testplusargs___d25 && TASK_testplusargs___d26) &&
	rx_from_stage0_first_x[8];
    TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d51 =
	(TASK_testplusargs___d24 ||
	 TASK_testplusargs___d25 && TASK_testplusargs___d26) &&
	!rx_from_stage0_first_x[8];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction)
	begin
	  v__h1518 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d24 ||
	   TASK_testplusargs___d25 && TASK_testplusargs___d26))
	$write("[%10d", v__h1518, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d24 ||
	   TASK_testplusargs___d25 && TASK_testplusargs___d26))
	$write("[%2d]STAGE1 : Prediction: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d24 ||
	   TASK_testplusargs___d25 && TASK_testplusargs___d26))
	$write("Stage0PC { ", "address: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d24 ||
	   TASK_testplusargs___d25 && TASK_testplusargs___d26))
	$write("'h%h", rx_from_stage0_first_x[76:13]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d24 ||
	   TASK_testplusargs___d25 && TASK_testplusargs___d26))
	$write(", ", "discard: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d37)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d39)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d24 ||
	   TASK_testplusargs___d25 && TASK_testplusargs___d26))
	$write(", ", "btbresponse: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d24 ||
	   TASK_testplusargs___d25 && TASK_testplusargs___d26))
	$write("BTBResponse { ", "prediction: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d24 ||
	   TASK_testplusargs___d25 && TASK_testplusargs___d26))
	$write("'h%h", rx_from_stage0_first_x[11:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d24 ||
	   TASK_testplusargs___d25 && TASK_testplusargs___d26))
	$write(", ", "btbhit: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d45)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d47)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d24 ||
	   TASK_testplusargs___d25 && TASK_testplusargs___d26))
	$write(", ", "hi: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d51)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  TASK_testplusargs_4_OR_TASK_testplusargs_5_AND_ETC___d53)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d24 ||
	   TASK_testplusargs___d25 && TASK_testplusargs___d26))
	$write(", ", "history: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d24 ||
	   TASK_testplusargs___d25 && TASK_testplusargs___d26))
	$write("'h%h", rx_from_stage0_first_x[7:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d24 ||
	   TASK_testplusargs___d25 && TASK_testplusargs___d26))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d24 ||
	   TASK_testplusargs___d25 && TASK_testplusargs___d26))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  !rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86)
	begin
	  TASK_testplusargs___d120 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  !rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86)
	begin
	  TASK_testplusargs___d121 = $test$plusargs("mstage1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  !rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86)
	begin
	  TASK_testplusargs___d122 = $test$plusargs("l1");
	  #0;
	end
    NOT_rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff__ETC___d125 =
	!rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 &&
	(TASK_testplusargs___d120 ||
	 TASK_testplusargs___d121 && TASK_testplusargs___d122);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  !rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86)
	begin
	  v__h1960 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  NOT_rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff__ETC___d125)
	$write("[%10d", v__h1960, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  NOT_rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff__ETC___d125)
	$write("[%2d]STAGE1 : Dropping Instruction. ExpEpoch:%b CurrEpoch:%b",
	       hartid,
	       y__h1739,
	       curr_epoch__h1421);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  NOT_rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff__ETC___d125)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction)
	begin
	  TASK_testplusargs___d156 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction)
	begin
	  TASK_testplusargs___d157 = $test$plusargs("mstage1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction)
	begin
	  TASK_testplusargs___d158 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_56_OR_TASK_testplusargs_57_A_ETC___d178 =
	(TASK_testplusargs___d156 ||
	 TASK_testplusargs___d157 && TASK_testplusargs___d158) &&
	IF_ff_memory_response_ff_i_notEmpty_THEN_NOT_f_ETC___d177;
    TASK_testplusargs_56_OR_TASK_testplusargs_57_A_ETC___d181 =
	(TASK_testplusargs___d156 ||
	 TASK_testplusargs___d157 && TASK_testplusargs___d158) &&
	IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d180;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction)
	begin
	  v__h3504 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d156 ||
	   TASK_testplusargs___d157 && TASK_testplusargs___d158))
	$write("[%10d", v__h3504, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d156 ||
	   TASK_testplusargs___d157 && TASK_testplusargs___d158))
	$write("[%2d]STAGE1 : PC:%h: ",
	       hartid,
	       IF_rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_m_ETC___d171);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d156 ||
	   TASK_testplusargs___d157 && TASK_testplusargs___d158))
	$write("IMem_core_response { ", "word: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d156 ||
	   TASK_testplusargs___d157 && TASK_testplusargs___d158))
	$write("'h%h",
	       IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d71);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d156 ||
	   TASK_testplusargs___d157 && TASK_testplusargs___d158))
	$write(", ", "trap: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  TASK_testplusargs_56_OR_TASK_testplusargs_57_A_ETC___d178)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  TASK_testplusargs_56_OR_TASK_testplusargs_57_A_ETC___d181)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d156 ||
	   TASK_testplusargs___d157 && TASK_testplusargs___d158))
	$write(", ", "cause: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d156 ||
	   TASK_testplusargs___d157 && TASK_testplusargs___d158))
	$write("'h%h", cause__h3436);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d156 ||
	   TASK_testplusargs___d157 && TASK_testplusargs___d158))
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d156 ||
	   TASK_testplusargs___d157 && TASK_testplusargs___d158))
	$write("'h%h", y__h1739, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d156 ||
	   TASK_testplusargs___d157 && TASK_testplusargs___d158))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction)
	begin
	  TASK_testplusargs___d186 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction)
	begin
	  TASK_testplusargs___d187 = $test$plusargs("mstage1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction)
	begin
	  TASK_testplusargs___d188 = $test$plusargs("l1");
	  #0;
	end
    TASK_testplusargs_86_OR_TASK_testplusargs_87_A_ETC___d192 =
	(TASK_testplusargs___d186 ||
	 TASK_testplusargs___d187 && TASK_testplusargs___d188) &&
	rg_action;
    TASK_testplusargs_86_OR_TASK_testplusargs_87_A_ETC___d193 =
	(TASK_testplusargs___d186 ||
	 TASK_testplusargs___d187 && TASK_testplusargs___d188) &&
	!rg_action;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction)
	begin
	  v__h3794 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d186 ||
	   TASK_testplusargs___d187 && TASK_testplusargs___d188))
	$write("[%10d", v__h3794, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d186 ||
	   TASK_testplusargs___d187 && TASK_testplusargs___d188))
	$write("[%2d]STAGE1 : rg_action: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  TASK_testplusargs_86_OR_TASK_testplusargs_87_A_ETC___d192)
	$write("None");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  TASK_testplusargs_86_OR_TASK_testplusargs_87_A_ETC___d193)
	$write("CheckPrev");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d186 ||
	   TASK_testplusargs___d187 && TASK_testplusargs___d188))
	$write(" misa[c]:%b discard:%b rg_receiving_upper:%b",
	       hartid,
	       csr_misa_c_c,
	       rx_from_stage0_first_x[12],
	       rg_receiving_upper);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  (TASK_testplusargs___d186 ||
	   TASK_testplusargs___d187 && TASK_testplusargs___d188))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 &&
	  NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d198)
	begin
	  TASK_testplusargs___d243 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 &&
	  NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d198)
	begin
	  TASK_testplusargs___d244 = $test$plusargs("mstage1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 &&
	  NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d198)
	begin
	  TASK_testplusargs___d245 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d252 =
	(TASK_testplusargs___d243 ||
	 TASK_testplusargs___d244 && TASK_testplusargs___d245) &&
	IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d251;
    TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d254 =
	(TASK_testplusargs___d243 ||
	 TASK_testplusargs___d244 && TASK_testplusargs___d245) &&
	IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d218;
    TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d258 =
	(TASK_testplusargs___d243 ||
	 TASK_testplusargs___d244 && TASK_testplusargs___d245) &&
	(!rg_receiving_upper ||
	 IF_ff_memory_response_ff_i_notEmpty_THEN_NOT_f_ETC___d177);
    TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d260 =
	(TASK_testplusargs___d243 ||
	 TASK_testplusargs___d244 && TASK_testplusargs___d245) &&
	rg_receiving_upper &&
	IF_ff_memory_response_ff_i_notEmpty_THEN_ff_me_ETC___d180;
    TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d265 =
	(TASK_testplusargs___d243 ||
	 TASK_testplusargs___d244 && TASK_testplusargs___d245) &&
	IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d264;
    TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d267 =
	(TASK_testplusargs___d243 ||
	 TASK_testplusargs___d244 && TASK_testplusargs___d245) &&
	IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d212;
    TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d279 =
	(TASK_testplusargs___d243 ||
	 TASK_testplusargs___d244 && TASK_testplusargs___d245) &&
	IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d278;
    TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d282 =
	(TASK_testplusargs___d243 ||
	 TASK_testplusargs___d244 && TASK_testplusargs___d245) &&
	IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d281;
    TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d285 =
	(TASK_testplusargs___d243 ||
	 TASK_testplusargs___d244 && TASK_testplusargs___d245) &&
	IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d284;
    rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248 =
	rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 &&
	NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d198 &&
	(TASK_testplusargs___d243 ||
	 TASK_testplusargs___d244 && TASK_testplusargs___d245);
    TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d288 =
	(TASK_testplusargs___d243 ||
	 TASK_testplusargs___d244 && TASK_testplusargs___d245) &&
	IF_NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO__ETC___d287;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 &&
	  NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d198)
	begin
	  v__h4263 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248)
	$write("[%10d", v__h4263, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248)
	$write("[%2d]STAGE1 : Enquing: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248)
	$write("PIPE1 { ", "program_counter: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248)
	$write("'h%h",
	       IF_rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_m_ETC___d171);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248)
	$write(", ", "instruction: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248)
	$write("'h%h", pipedata_instruction__h4095);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248)
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248)
	$write("'h%h", curr_epoch__h1421);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248)
	$write(", ", "trap: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 &&
	  NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d198 &&
	  TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d252)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 &&
	  NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d198 &&
	  TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d254)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248)
	$write(", ", "cause: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248)
	$write("'h%h", cause__h3436);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248)
	$write(", ", "upper_err: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 &&
	  NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d198 &&
	  TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d258)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 &&
	  NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d198 &&
	  TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d260)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248)
	$write(", ", "compressed: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 &&
	  NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d198 &&
	  TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d265)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 &&
	  NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d198 &&
	  TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d267)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248)
	$write(", ", "btbresponse: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248)
	$write("BTBResponse { ", "prediction: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248)
	$write("'h%h", x1_avValue_fst_prediction__h4155);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248)
	$write(", ", "btbhit: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 &&
	  NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d198 &&
	  TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d279)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 &&
	  NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d198 &&
	  TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d282)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248)
	$write(", ", "hi: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 &&
	  NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d198 &&
	  TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d285)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d86 &&
	  NOT_rg_action_6_7_AND_rg_prev_8_BITS_13_TO_12__ETC___d198 &&
	  TASK_testplusargs_43_OR_TASK_testplusargs_44_A_ETC___d288)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248)
	$write(", ", "history: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248)
	$write("'h%h", x1_avValue_fst_history__h4158, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248)
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_process_instruction &&
	  rg_eEpoch_0_CONCAT_rg_wEpoch_1_2_EQ_IF_ff_memo_ETC___d248)
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkstage1

