//
// Generated by Bluespec Compiler (build 8d454e4)
//
// On Fri Oct  9 13:12:39 IST 2020
//
//
// Ports:
// Name                         I/O  size props
// rx_from_stage1_deq_ena         O     1
// tx_meta_to_stage3_enq_ena      O     1
// tx_meta_to_stage3_enq_data     O   100
// tx_mtval_to_stage3_enq_ena     O     1
// tx_mtval_to_stage3_enq_data    O    64
// mv_op1                         O    71
// mv_op2                         O    72
// mv_op3                         O    70
// rx_inst_deq_ena                O     1
// tx_inst_enq_ena                O     1
// tx_inst_enq_data               O    32
// RDY_commit_rd                  O     1
// RDY_clear_stall                O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// rx_from_stage1_notEmpty_b      I     1
// rx_from_stage1_first_deq_rdy_b  I     1
// rx_from_stage1_first_x         I   119
// tx_meta_to_stage3_notFull_b    I     1 unused
// tx_meta_to_stage3_enq_rdy_b    I     1
// tx_mtval_to_stage3_notFull_b   I     1
// tx_mtval_to_stage3_enq_rdy_b   I     1
// rx_inst_notEmpty_b             I     1 unused
// rx_inst_first_deq_rdy_b        I     1
// rx_inst_first_x                I    32
// tx_inst_notFull_b              I     1 unused
// tx_inst_enq_rdy_b              I     1
// commit_rd_commit               I    70
// csrs_csr                       I   145
// clear_stall_upd                I     1
// ma_resume_wfi_w                I     1
// EN_commit_rd                   I     1
// EN_csrs                        I     1
// EN_clear_stall                 I     1
// EN_update_eEpoch               I     1
// EN_update_wEpoch               I     1
// EN_ma_resume_wfi               I     1
//
// Combinational paths from inputs to outputs:
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    tx_inst_enq_rdy_b,
//    EN_csrs) -> rx_from_stage1_deq_ena
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    rx_from_stage1_first_x,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    tx_inst_enq_rdy_b,
//    csrs_csr,
//    EN_csrs) -> tx_meta_to_stage3_enq_ena
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    rx_from_stage1_first_x,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    tx_inst_enq_rdy_b,
//    csrs_csr,
//    EN_csrs) -> tx_meta_to_stage3_enq_data
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    rx_from_stage1_first_x,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    tx_inst_enq_rdy_b,
//    csrs_csr,
//    EN_csrs) -> tx_mtval_to_stage3_enq_ena
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    rx_from_stage1_first_x,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    tx_inst_enq_rdy_b,
//    csrs_csr,
//    EN_csrs) -> tx_mtval_to_stage3_enq_data
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    tx_inst_enq_rdy_b,
//    EN_csrs) -> rx_inst_deq_ena
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    rx_from_stage1_first_x,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    tx_inst_enq_rdy_b,
//    csrs_csr,
//    EN_csrs) -> tx_inst_enq_ena
//   (rx_from_stage1_notEmpty_b,
//    rx_from_stage1_first_deq_rdy_b,
//    rx_from_stage1_first_x,
//    tx_meta_to_stage3_enq_rdy_b,
//    tx_mtval_to_stage3_notFull_b,
//    tx_mtval_to_stage3_enq_rdy_b,
//    rx_inst_first_deq_rdy_b,
//    rx_inst_first_x,
//    tx_inst_enq_rdy_b,
//    csrs_csr,
//    EN_csrs) -> tx_inst_enq_data
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkstage2(CLK,
		RST_N,

		rx_from_stage1_notEmpty_b,

		rx_from_stage1_first_deq_rdy_b,

		rx_from_stage1_first_x,

		rx_from_stage1_deq_ena,

		tx_meta_to_stage3_notFull_b,

		tx_meta_to_stage3_enq_rdy_b,

		tx_meta_to_stage3_enq_ena,

		tx_meta_to_stage3_enq_data,

		tx_mtval_to_stage3_notFull_b,

		tx_mtval_to_stage3_enq_rdy_b,

		tx_mtval_to_stage3_enq_ena,

		tx_mtval_to_stage3_enq_data,

		mv_op1,

		mv_op2,

		mv_op3,

		rx_inst_notEmpty_b,

		rx_inst_first_deq_rdy_b,

		rx_inst_first_x,

		rx_inst_deq_ena,

		tx_inst_notFull_b,

		tx_inst_enq_rdy_b,

		tx_inst_enq_ena,

		tx_inst_enq_data,

		commit_rd_commit,
		EN_commit_rd,
		RDY_commit_rd,

		csrs_csr,
		EN_csrs,

		clear_stall_upd,
		EN_clear_stall,
		RDY_clear_stall,

		EN_update_eEpoch,

		EN_update_wEpoch,

		ma_resume_wfi_w,
		EN_ma_resume_wfi);
  parameter [63 : 0] hartid = 64'b0;
  input  CLK;
  input  RST_N;

  // action method rx_from_stage1_notEmpty
  input  rx_from_stage1_notEmpty_b;

  // action method rx_from_stage1_first_deq_rdy
  input  rx_from_stage1_first_deq_rdy_b;

  // action method rx_from_stage1_first
  input  [118 : 0] rx_from_stage1_first_x;

  // value method rx_from_stage1_deq_ena
  output rx_from_stage1_deq_ena;

  // action method tx_meta_to_stage3_notFull
  input  tx_meta_to_stage3_notFull_b;

  // action method tx_meta_to_stage3_enq_rdy
  input  tx_meta_to_stage3_enq_rdy_b;

  // value method tx_meta_to_stage3_enq_ena
  output tx_meta_to_stage3_enq_ena;

  // value method tx_meta_to_stage3_enq_data
  output [99 : 0] tx_meta_to_stage3_enq_data;

  // action method tx_mtval_to_stage3_notFull
  input  tx_mtval_to_stage3_notFull_b;

  // action method tx_mtval_to_stage3_enq_rdy
  input  tx_mtval_to_stage3_enq_rdy_b;

  // value method tx_mtval_to_stage3_enq_ena
  output tx_mtval_to_stage3_enq_ena;

  // value method tx_mtval_to_stage3_enq_data
  output [63 : 0] tx_mtval_to_stage3_enq_data;

  // value method mv_op1
  output [70 : 0] mv_op1;

  // value method mv_op2
  output [71 : 0] mv_op2;

  // value method mv_op3
  output [69 : 0] mv_op3;

  // action method rx_inst_notEmpty
  input  rx_inst_notEmpty_b;

  // action method rx_inst_first_deq_rdy
  input  rx_inst_first_deq_rdy_b;

  // action method rx_inst_first
  input  [31 : 0] rx_inst_first_x;

  // value method rx_inst_deq_ena
  output rx_inst_deq_ena;

  // action method tx_inst_notFull
  input  tx_inst_notFull_b;

  // action method tx_inst_enq_rdy
  input  tx_inst_enq_rdy_b;

  // value method tx_inst_enq_ena
  output tx_inst_enq_ena;

  // value method tx_inst_enq_data
  output [31 : 0] tx_inst_enq_data;

  // action method commit_rd
  input  [69 : 0] commit_rd_commit;
  input  EN_commit_rd;
  output RDY_commit_rd;

  // action method csrs
  input  [144 : 0] csrs_csr;
  input  EN_csrs;

  // action method clear_stall
  input  clear_stall_upd;
  input  EN_clear_stall;
  output RDY_clear_stall;

  // action method update_eEpoch
  input  EN_update_eEpoch;

  // action method update_wEpoch
  input  EN_update_wEpoch;

  // action method ma_resume_wfi
  input  ma_resume_wfi_w;
  input  EN_ma_resume_wfi;

  // signals for module outputs
  wire [99 : 0] tx_meta_to_stage3_enq_data;
  wire [71 : 0] mv_op2;
  wire [70 : 0] mv_op1;
  wire [69 : 0] mv_op3;
  wire [63 : 0] tx_mtval_to_stage3_enq_data;
  wire [31 : 0] tx_inst_enq_data;
  wire RDY_clear_stall,
       RDY_commit_rd,
       rx_from_stage1_deq_ena,
       rx_inst_deq_ena,
       tx_inst_enq_ena,
       tx_meta_to_stage3_enq_ena,
       tx_mtval_to_stage3_enq_ena;

  // inlined wires
  wire [144 : 0] wr_csrs_wget;
  wire [99 : 0] tx_meta_w_data_wget;
  wire [71 : 0] rg_op2_port0__write_1,
		rg_op2_port1__read,
		rg_op2_port1__write_1,
		rg_op2_port2__read;
  wire [70 : 0] rg_op1_port0__write_1,
		rg_op1_port1__read,
		rg_op1_port1__write_1,
		rg_op1_port2__read;
  wire [69 : 0] rg_op3_port0__write_1,
		rg_op3_port1__read,
		rg_op3_port1__write_1,
		rg_op3_port2__read;
  wire rg_op1_EN_port1__write, rg_op2_EN_port1__write, rg_op3_EN_port1__write;

  // register eEpoch
  reg eEpoch;
  wire eEpoch_D_IN, eEpoch_EN;

  // register rg_fencei_rerun
  reg rg_fencei_rerun;
  wire rg_fencei_rerun_D_IN, rg_fencei_rerun_EN;

  // register rg_op1
  reg [70 : 0] rg_op1;
  wire [70 : 0] rg_op1_D_IN;
  wire rg_op1_EN;

  // register rg_op2
  reg [71 : 0] rg_op2;
  wire [71 : 0] rg_op2_D_IN;
  wire rg_op2_EN;

  // register rg_op3
  reg [69 : 0] rg_op3;
  wire [69 : 0] rg_op3_D_IN;
  wire rg_op3_EN;

  // register rg_rerun
  reg rg_rerun;
  wire rg_rerun_D_IN, rg_rerun_EN;

  // register rg_sfence_rerun
  reg rg_sfence_rerun;
  wire rg_sfence_rerun_D_IN, rg_sfence_rerun_EN;

  // register rg_stall
  reg rg_stall;
  wire rg_stall_D_IN, rg_stall_EN;

  // register rg_wfi
  reg rg_wfi;
  wire rg_wfi_D_IN, rg_wfi_EN;

  // register wEpoch
  reg wEpoch;
  wire wEpoch_D_IN, wEpoch_EN;

  // ports of submodule registerfile
  wire [69 : 0] registerfile_commit_rd_c;
  wire [63 : 0] registerfile_read_rs1,
		registerfile_read_rs2,
		registerfile_read_rs3;
  wire [4 : 0] registerfile_read_rs1_addr,
	       registerfile_read_rs2_addr,
	       registerfile_read_rs3_addr;
  wire registerfile_EN_commit_rd,
       registerfile_EN_read_rs1,
       registerfile_EN_read_rs2,
       registerfile_EN_read_rs3,
       registerfile_RDY_commit_rd,
       registerfile_RDY_read_rs1,
       registerfile_RDY_read_rs2,
       registerfile_RDY_read_rs3,
       registerfile_read_rs1_rs1type,
       registerfile_read_rs2_rs2type;

  // rule scheduling signals
  wire CAN_FIRE_RL_decode_and_opfetch,
       CAN_FIRE_RL_rl_wait_for_interrupt,
       CAN_FIRE_clear_stall,
       CAN_FIRE_commit_rd,
       CAN_FIRE_csrs,
       CAN_FIRE_ma_resume_wfi,
       CAN_FIRE_rx_from_stage1_first,
       CAN_FIRE_rx_from_stage1_first_deq_rdy,
       CAN_FIRE_rx_from_stage1_notEmpty,
       CAN_FIRE_rx_inst_first,
       CAN_FIRE_rx_inst_first_deq_rdy,
       CAN_FIRE_rx_inst_notEmpty,
       CAN_FIRE_tx_inst_enq_rdy,
       CAN_FIRE_tx_inst_notFull,
       CAN_FIRE_tx_meta_to_stage3_enq_rdy,
       CAN_FIRE_tx_meta_to_stage3_notFull,
       CAN_FIRE_tx_mtval_to_stage3_enq_rdy,
       CAN_FIRE_tx_mtval_to_stage3_notFull,
       CAN_FIRE_update_eEpoch,
       CAN_FIRE_update_wEpoch,
       WILL_FIRE_RL_decode_and_opfetch,
       WILL_FIRE_RL_rl_wait_for_interrupt,
       WILL_FIRE_clear_stall,
       WILL_FIRE_commit_rd,
       WILL_FIRE_csrs,
       WILL_FIRE_ma_resume_wfi,
       WILL_FIRE_rx_from_stage1_first,
       WILL_FIRE_rx_from_stage1_first_deq_rdy,
       WILL_FIRE_rx_from_stage1_notEmpty,
       WILL_FIRE_rx_inst_first,
       WILL_FIRE_rx_inst_first_deq_rdy,
       WILL_FIRE_rx_inst_notEmpty,
       WILL_FIRE_tx_inst_enq_rdy,
       WILL_FIRE_tx_inst_notFull,
       WILL_FIRE_tx_meta_to_stage3_enq_rdy,
       WILL_FIRE_tx_meta_to_stage3_notFull,
       WILL_FIRE_tx_mtval_to_stage3_enq_rdy,
       WILL_FIRE_tx_mtval_to_stage3_notFull,
       WILL_FIRE_update_eEpoch,
       WILL_FIRE_update_wEpoch;

  // inputs to muxes for submodule ports
  wire MUX_rg_rerun_write_1__SEL_1,
       MUX_rg_rerun_write_1__SEL_2,
       MUX_rg_rerun_write_1__VAL_2,
       MUX_rg_stall_write_1__VAL_2,
       MUX_rg_wfi_write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d28;
  reg TASK_testplusargs___d29;
  reg TASK_testplusargs___d30;
  reg [63 : 0] v__h2604;
  reg TASK_testplusargs___d50;
  reg TASK_testplusargs___d51;
  reg TASK_testplusargs___d52;
  reg [63 : 0] v__h2904;
  reg TASK_testplusargs___d62;
  reg TASK_testplusargs___d63;
  reg TASK_testplusargs___d64;
  reg [63 : 0] v__h3109;
  reg TASK_testplusargs___d91;
  reg TASK_testplusargs___d92;
  reg TASK_testplusargs___d93;
  reg [63 : 0] v__h3492;
  reg TASK_testplusargs___d163;
  reg TASK_testplusargs___d164;
  reg TASK_testplusargs___d165;
  reg [63 : 0] v__h3916;
  reg TASK_testplusargs___d200;
  reg TASK_testplusargs___d201;
  reg TASK_testplusargs___d202;
  reg [63 : 0] v__h4381;
  reg TASK_testplusargs___d214;
  reg TASK_testplusargs___d215;
  reg TASK_testplusargs___d216;
  reg [63 : 0] v__h4564;
  reg TASK_testplusargs___d296;
  reg TASK_testplusargs___d297;
  reg TASK_testplusargs___d298;
  reg [63 : 0] v__h5782;
  reg TASK_testplusargs___d407;
  reg TASK_testplusargs___d408;
  reg TASK_testplusargs___d409;
  reg [63 : 0] v__h4150;
  reg TASK_testplusargs___d482;
  reg TASK_testplusargs___d483;
  reg TASK_testplusargs___d484;
  reg [63 : 0] v__h7172;
  reg TASK_testplusargs___d494;
  reg TASK_testplusargs___d495;
  reg TASK_testplusargs___d496;
  reg [63 : 0] v__h7341;
  reg TASK_testplusargs___d512;
  reg TASK_testplusargs___d513;
  reg TASK_testplusargs___d514;
  reg [63 : 0] v__h7570;
  reg NOT_wr_flush_from_exe_whas__87_88_OR_NOT_wr_fl_ETC___d205;
  reg wr_flush_from_exe_whas__87_AND_wr_flush_from_e_ETC___d219;
  reg NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d304;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d307;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d310;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d313;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d316;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d319;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d323;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d325;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d328;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d331;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d334;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d337;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d339;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d342;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d358;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d361;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d364;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d367;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d371;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d376;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d379;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d387;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d391;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d397;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d401;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d37;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d39;
  reg TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d43;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d101;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d125;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d130;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d134;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d140;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d143;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d146;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d154;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d156;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d158;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d160;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d162;
  reg NOT_eEpoch_read__80_CONCAT_wEpoch_read__81_82__ETC___d412;
  reg TASK_testplusargs_82_OR_TASK_testplusargs_83_A_ETC___d491;
  reg TASK_testplusargs_82_OR_TASK_testplusargs_83_A_ETC___d493;
  reg TASK_testplusargs_94_OR_TASK_testplusargs_95_A_ETC___d505;
  reg TASK_testplusargs_94_OR_TASK_testplusargs_95_A_ETC___d507;
  reg TASK_testplusargs_94_OR_TASK_testplusargs_95_A_ETC___d511;
  reg TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d523;
  reg TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d525;
  reg TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d527;
  reg TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d529;
  reg TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d537;
  // synopsys translate_on

  // remaining internal signals
  reg [2 : 0] CASE_IF_tx_meta_w_data_whas__23_THEN_IF_tx_met_ETC__q7,
	      CASE_decoder_func_32_1_BITS_43_TO_41_0_decoder_ETC__q5,
	      CASE_decoder_func_32_1_BITS_52_TO_50_1_decoder_ETC__q6,
	      CASE_rg_op2_BITS_2_TO_0_0_rg_op2_BITS_2_TO_0_1_ETC__q2,
	      CASE_rg_op2port1__read_BITS_2_TO_0_0_rg_op2p_ETC__q9,
	      IF_tx_meta_w_data_whas__23_THEN_IF_tx_meta_w_d_ETC___d440;
  reg [1 : 0] CASE_csrs_csr_BITS_144_TO_143_1_csrs_csr_BITS__ETC__q3,
	      CASE_rg_op1_BITS_1_TO_0_0_rg_op1_BITS_1_TO_0_2_ETC__q1,
	      CASE_rg_op1port1__read_BITS_1_TO_0_0_rg_op1p_ETC__q8,
	      IF_wr_csrs_wget__4_BITS_144_TO_143_5_EQ_3_6_OR_ETC___d70;
  wire [74 : 0] decoder_func_32___d81;
  wire [63 : 0] IF_IF_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_ETC___d283,
		IF_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_ETC___d178,
		IF_NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0__ETC___d284,
		SEXT_decoder_func_32_1_BITS_40_TO_9_78___d279,
		_theResult_____1__h3849,
		mtval___1__h3992,
		mtval___1__h4011,
		op1__h4864,
		op2__h4865,
		op4__h4866;
  wire [31 : 0] decoder_func_32_1_BITS_40_TO_9__q4, x_wget_instruction__h2972;
  wire [28 : 0] IF_decoder_func_32_1_BITS_43_TO_41_34_EQ_0_37__ETC___d263;
  wire [18 : 0] value__h2730, value__h2734;
  wire [6 : 0] _theResult___fst__h3229,
	       _theResult___fst__h3248,
	       chk_interrupt___d71,
	       func_cause___1__h3194,
	       func_cause___1__h3231,
	       func_cause___1__h3251,
	       func_cause__h2812;
  wire [4 : 0] value__h3163, x1_avValue_op_addr_rs2addr__h3166;
  wire [3 : 0] IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83;
  wire [1 : 0] IF_NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0__ETC___d273;
  wire IF_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_ETC___d123,
       IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d129,
       IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d198,
       IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d212,
       decode_word32___d258,
       eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185,
       wr_csrs_whas_AND_registerfile_RDY_read_rs1_AND_ETC___d15,
       wr_resume_wfi_whas__14_AND_wr_resume_wfi_wget__ETC___d418;

  // action method rx_from_stage1_notEmpty
  assign CAN_FIRE_rx_from_stage1_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_from_stage1_notEmpty = 1'd1 ;

  // action method rx_from_stage1_first_deq_rdy
  assign CAN_FIRE_rx_from_stage1_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_from_stage1_first_deq_rdy = 1'd1 ;

  // action method rx_from_stage1_first
  assign CAN_FIRE_rx_from_stage1_first = 1'd1 ;
  assign WILL_FIRE_rx_from_stage1_first = 1'd1 ;

  // value method rx_from_stage1_deq_ena
  assign rx_from_stage1_deq_ena = CAN_FIRE_RL_decode_and_opfetch ;

  // action method tx_meta_to_stage3_notFull
  assign CAN_FIRE_tx_meta_to_stage3_notFull = 1'd1 ;
  assign WILL_FIRE_tx_meta_to_stage3_notFull = 1'd1 ;

  // action method tx_meta_to_stage3_enq_rdy
  assign CAN_FIRE_tx_meta_to_stage3_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_meta_to_stage3_enq_rdy = 1'd1 ;

  // value method tx_meta_to_stage3_enq_ena
  assign tx_meta_to_stage3_enq_ena = MUX_rg_rerun_write_1__SEL_2 ;

  // value method tx_meta_to_stage3_enq_data
  assign tx_meta_to_stage3_enq_data =
	     { tx_meta_w_data_wget[99:29],
	       CASE_IF_tx_meta_w_data_whas__23_THEN_IF_tx_met_ETC__q7,
	       tx_meta_w_data_wget[25:0] } ;

  // action method tx_mtval_to_stage3_notFull
  assign CAN_FIRE_tx_mtval_to_stage3_notFull = 1'd1 ;
  assign WILL_FIRE_tx_mtval_to_stage3_notFull = 1'd1 ;

  // action method tx_mtval_to_stage3_enq_rdy
  assign CAN_FIRE_tx_mtval_to_stage3_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_mtval_to_stage3_enq_rdy = 1'd1 ;

  // value method tx_mtval_to_stage3_enq_ena
  assign tx_mtval_to_stage3_enq_ena = MUX_rg_rerun_write_1__SEL_2 ;

  // value method tx_mtval_to_stage3_enq_data
  assign tx_mtval_to_stage3_enq_data =
	     (IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 ==
	      4'd6 &&
	      func_cause__h2812 == 7'd12 &&
	      rx_from_stage1_first_x[13]) ?
	       mtval___1__h3992 :
	       IF_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_ETC___d178 ;

  // value method mv_op1
  assign mv_op1 =
	     { rg_op1[70:2],
	       CASE_rg_op1_BITS_1_TO_0_0_rg_op1_BITS_1_TO_0_2_ETC__q1 } ;

  // value method mv_op2
  assign mv_op2 =
	     { rg_op2[71:3],
	       CASE_rg_op2_BITS_2_TO_0_0_rg_op2_BITS_2_TO_0_1_ETC__q2 } ;

  // value method mv_op3
  assign mv_op3 = rg_op3 ;

  // action method rx_inst_notEmpty
  assign CAN_FIRE_rx_inst_notEmpty = 1'd1 ;
  assign WILL_FIRE_rx_inst_notEmpty = 1'd1 ;

  // action method rx_inst_first_deq_rdy
  assign CAN_FIRE_rx_inst_first_deq_rdy = 1'd1 ;
  assign WILL_FIRE_rx_inst_first_deq_rdy = 1'd1 ;

  // action method rx_inst_first
  assign CAN_FIRE_rx_inst_first = 1'd1 ;
  assign WILL_FIRE_rx_inst_first = 1'd1 ;

  // value method rx_inst_deq_ena
  assign rx_inst_deq_ena = CAN_FIRE_RL_decode_and_opfetch ;

  // action method tx_inst_notFull
  assign CAN_FIRE_tx_inst_notFull = 1'd1 ;
  assign WILL_FIRE_tx_inst_notFull = 1'd1 ;

  // action method tx_inst_enq_rdy
  assign CAN_FIRE_tx_inst_enq_rdy = 1'd1 ;
  assign WILL_FIRE_tx_inst_enq_rdy = 1'd1 ;

  // value method tx_inst_enq_ena
  assign tx_inst_enq_ena = MUX_rg_rerun_write_1__SEL_2 ;

  // value method tx_inst_enq_data
  assign tx_inst_enq_data = rx_inst_first_x ;

  // action method commit_rd
  assign RDY_commit_rd = registerfile_RDY_commit_rd ;
  assign CAN_FIRE_commit_rd = registerfile_RDY_commit_rd ;
  assign WILL_FIRE_commit_rd = EN_commit_rd ;

  // action method csrs
  assign CAN_FIRE_csrs = 1'd1 ;
  assign WILL_FIRE_csrs = EN_csrs ;

  // action method clear_stall
  assign RDY_clear_stall = rg_stall ;
  assign CAN_FIRE_clear_stall = rg_stall ;
  assign WILL_FIRE_clear_stall = EN_clear_stall ;

  // action method update_eEpoch
  assign CAN_FIRE_update_eEpoch = 1'd1 ;
  assign WILL_FIRE_update_eEpoch = EN_update_eEpoch ;

  // action method update_wEpoch
  assign CAN_FIRE_update_wEpoch = 1'd1 ;
  assign WILL_FIRE_update_wEpoch = EN_update_wEpoch ;

  // action method ma_resume_wfi
  assign CAN_FIRE_ma_resume_wfi = 1'd1 ;
  assign WILL_FIRE_ma_resume_wfi = EN_ma_resume_wfi ;

  // submodule registerfile
  mkregisterfile #(.hartid(hartid)) registerfile(.CLK(CLK),
						 .RST_N(RST_N),
						 .commit_rd_c(registerfile_commit_rd_c),
						 .read_rs1_addr(registerfile_read_rs1_addr),
						 .read_rs1_rs1type(registerfile_read_rs1_rs1type),
						 .read_rs2_addr(registerfile_read_rs2_addr),
						 .read_rs2_rs2type(registerfile_read_rs2_rs2type),
						 .read_rs3_addr(registerfile_read_rs3_addr),
						 .EN_read_rs1(registerfile_EN_read_rs1),
						 .EN_read_rs2(registerfile_EN_read_rs2),
						 .EN_read_rs3(registerfile_EN_read_rs3),
						 .EN_commit_rd(registerfile_EN_commit_rd),
						 .read_rs1(registerfile_read_rs1),
						 .RDY_read_rs1(registerfile_RDY_read_rs1),
						 .read_rs2(registerfile_read_rs2),
						 .RDY_read_rs2(registerfile_RDY_read_rs2),
						 .read_rs3(registerfile_read_rs3),
						 .RDY_read_rs3(registerfile_RDY_read_rs3),
						 .RDY_commit_rd(registerfile_RDY_commit_rd));

  // rule RL_decode_and_opfetch
  assign CAN_FIRE_RL_decode_and_opfetch =
	     rx_from_stage1_first_deq_rdy_b && rx_inst_first_deq_rdy_b &&
	     wr_csrs_whas_AND_registerfile_RDY_read_rs1_AND_ETC___d15 &&
	     !rg_stall &&
	     rx_from_stage1_notEmpty_b &&
	     tx_mtval_to_stage3_notFull_b &&
	     !rg_wfi ;
  assign WILL_FIRE_RL_decode_and_opfetch = CAN_FIRE_RL_decode_and_opfetch ;

  // rule RL_rl_wait_for_interrupt
  assign CAN_FIRE_RL_rl_wait_for_interrupt = rg_wfi ;
  assign WILL_FIRE_RL_rl_wait_for_interrupt = rg_wfi ;

  // inputs to muxes for submodule ports
  assign MUX_rg_rerun_write_1__SEL_1 = EN_clear_stall && clear_stall_upd ;
  assign MUX_rg_rerun_write_1__SEL_2 =
	     WILL_FIRE_RL_decode_and_opfetch &&
	     eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	     IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 !=
	     4'd7 ;
  assign MUX_rg_wfi_write_1__SEL_1 =
	     WILL_FIRE_RL_decode_and_opfetch &&
	     eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	     IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d198 ;
  assign MUX_rg_rerun_write_1__VAL_2 =
	     !rg_rerun && decoder_func_32___d81[1] && !EN_update_eEpoch &&
	     !EN_update_wEpoch ;
  assign MUX_rg_stall_write_1__VAL_2 =
	     !EN_update_eEpoch && !EN_update_wEpoch ;

  // inlined wires
  assign tx_meta_w_data_wget =
	     { rx_from_stage1_first_x[118:55],
	       func_cause__h2812,
	       IF_decoder_func_32_1_BITS_43_TO_41_34_EQ_0_37__ETC___d263 } ;
  assign wr_csrs_wget =
	     { CASE_csrs_csr_BITS_144_TO_143_1_csrs_csr_BITS__ETC__q3,
	       csrs_csr[142:0] } ;
  assign rg_op1_port0__write_1 =
	     { value__h3163,
	       op1__h4864,
	       IF_NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0__ETC___d273 } ;
  assign rg_op1_port1__read =
	     MUX_rg_rerun_write_1__SEL_2 ? rg_op1_port0__write_1 : rg_op1 ;
  assign rg_op1_EN_port1__write =
	     EN_commit_rd &&
	     commit_rd_commit[69:65] == rg_op1_port1__read[70:66] &&
	     (commit_rd_commit[0] && rg_op1_port1__read[1:0] == 2'd2 ||
	      !commit_rd_commit[0] && rg_op1_port1__read[70:66] != 5'd0 &&
	      rg_op1_port1__read[1:0] != 2'd2) ;
  assign rg_op1_port1__write_1 =
	     { rg_op1_port1__read[70:66],
	       commit_rd_commit[64:1],
	       CASE_rg_op1port1__read_BITS_1_TO_0_0_rg_op1p_ETC__q8 } ;
  assign rg_op1_port2__read =
	     rg_op1_EN_port1__write ?
	       rg_op1_port1__write_1 :
	       rg_op1_port1__read ;
  assign rg_op2_port0__write_1 =
	     { x1_avValue_op_addr_rs2addr__h3166,
	       op2__h4865,
	       (IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 !=
		4'd6 &&
		decoder_func_32___d81[52:50] == 3'd4) ?
		 3'd4 :
		 ((IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 ==
		   4'd6 ||
		   decoder_func_32___d81[52:50] == 3'd0) ?
		    3'd0 :
		    CASE_decoder_func_32_1_BITS_52_TO_50_1_decoder_ETC__q6) } ;
  assign rg_op2_port1__read =
	     MUX_rg_rerun_write_1__SEL_2 ? rg_op2_port0__write_1 : rg_op2 ;
  assign rg_op2_EN_port1__write =
	     EN_commit_rd &&
	     commit_rd_commit[69:65] == rg_op2_port1__read[71:67] &&
	     (commit_rd_commit[0] && rg_op2_port1__read[2:0] == 3'd4 ||
	      !commit_rd_commit[0] && rg_op2_port1__read[71:67] != 5'd0 &&
	      rg_op2_port1__read[2:0] != 3'd4) ;
  assign rg_op2_port1__write_1 =
	     { rg_op2_port1__read[71:67],
	       commit_rd_commit[64:1],
	       CASE_rg_op2port1__read_BITS_2_TO_0_0_rg_op2p_ETC__q9 } ;
  assign rg_op2_port2__read =
	     rg_op2_EN_port1__write ?
	       rg_op2_port1__write_1 :
	       rg_op2_port1__read ;
  assign rg_op3_port0__write_1 =
	     { op4__h4866,
	       decoder_func_32___d81[59:55],
	       decoder_func_32___d81[49] } ;
  assign rg_op3_port1__read =
	     MUX_rg_rerun_write_1__SEL_2 ? rg_op3_port0__write_1 : rg_op3 ;
  assign rg_op3_EN_port1__write =
	     EN_commit_rd &&
	     rg_op3_port1__read[5:1] == commit_rd_commit[69:65] &&
	     rg_op3_port1__read[0] &&
	     commit_rd_commit[0] ;
  assign rg_op3_port1__write_1 =
	     { commit_rd_commit[64:1], rg_op3_port1__read[5:0] } ;
  assign rg_op3_port2__read =
	     rg_op3_EN_port1__write ?
	       rg_op3_port1__write_1 :
	       rg_op3_port1__read ;

  // register eEpoch
  assign eEpoch_D_IN = ~eEpoch ;
  assign eEpoch_EN = EN_update_eEpoch ;

  // register rg_fencei_rerun
  assign rg_fencei_rerun_D_IN =
	     IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 ==
	     4'd1 &&
	     decoder_func_32___d81[43:41] == 3'd4 ;
  assign rg_fencei_rerun_EN = MUX_rg_rerun_write_1__SEL_2 ;

  // register rg_op1
  assign rg_op1_D_IN = rg_op1_port2__read ;
  assign rg_op1_EN = 1'b1 ;

  // register rg_op2
  assign rg_op2_D_IN = rg_op2_port2__read ;
  assign rg_op2_EN = 1'b1 ;

  // register rg_op3
  assign rg_op3_D_IN = rg_op3_port2__read ;
  assign rg_op3_EN = 1'b1 ;

  // register rg_rerun
  assign rg_rerun_D_IN =
	     !MUX_rg_rerun_write_1__SEL_1 && MUX_rg_rerun_write_1__VAL_2 ;
  assign rg_rerun_EN =
	     EN_clear_stall && clear_stall_upd ||
	     WILL_FIRE_RL_decode_and_opfetch &&
	     eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	     IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 !=
	     4'd7 ;

  // register rg_sfence_rerun
  assign rg_sfence_rerun_D_IN =
	     IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 ==
	     4'd1 &&
	     decoder_func_32___d81[43:41] != 3'd0 &&
	     decoder_func_32___d81[43:41] != 3'd1 &&
	     decoder_func_32___d81[43:41] != 3'd3 &&
	     decoder_func_32___d81[43:41] != 3'd4 &&
	     decoder_func_32___d81[43:41] != 3'd2 ;
  assign rg_sfence_rerun_EN = MUX_rg_rerun_write_1__SEL_2 ;

  // register rg_stall
  assign rg_stall_D_IN =
	     !MUX_rg_rerun_write_1__SEL_1 && MUX_rg_stall_write_1__VAL_2 ;
  assign rg_stall_EN =
	     EN_clear_stall && clear_stall_upd ||
	     WILL_FIRE_RL_decode_and_opfetch &&
	     eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	     IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 ==
	     4'd6 ;

  // register rg_wfi
  assign rg_wfi_D_IN = MUX_rg_wfi_write_1__SEL_1 ;
  assign rg_wfi_EN =
	     WILL_FIRE_RL_decode_and_opfetch &&
	     eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	     IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d198 ||
	     rg_wfi &&
	     wr_resume_wfi_whas__14_AND_wr_resume_wfi_wget__ETC___d418 ;

  // register wEpoch
  assign wEpoch_D_IN = ~wEpoch ;
  assign wEpoch_EN = EN_update_wEpoch ;

  // submodule registerfile
  assign registerfile_commit_rd_c = commit_rd_commit ;
  assign registerfile_read_rs1_addr = x_wget_instruction__h2972[19:15] ;
  assign registerfile_read_rs1_rs1type =
	     IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 !=
	     4'd6 &&
	     decoder_func_32___d81[54:53] == 2'd2 ;
  assign registerfile_read_rs2_addr = x_wget_instruction__h2972[24:20] ;
  assign registerfile_read_rs2_rs2type =
	     IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 !=
	     4'd6 &&
	     decoder_func_32___d81[52:50] == 3'd4 ;
  assign registerfile_read_rs3_addr = x_wget_instruction__h2972[31:27] ;
  assign registerfile_EN_read_rs1 = MUX_rg_rerun_write_1__SEL_2 ;
  assign registerfile_EN_read_rs2 = MUX_rg_rerun_write_1__SEL_2 ;
  assign registerfile_EN_read_rs3 = MUX_rg_rerun_write_1__SEL_2 ;
  assign registerfile_EN_commit_rd = EN_commit_rd ;

  // remaining internal signals
  module_decode_word32 instance_decode_word32_0(.decode_word32_inst(x_wget_instruction__h2972),
						.decode_word32_misa_c(wr_csrs_wget[81]),
						.decode_word32(decode_word32___d258));
  module_chk_interrupt instance_chk_interrupt_1(.chk_interrupt_prv(IF_wr_csrs_wget__4_BITS_144_TO_143_5_EQ_3_6_OR_ETC___d70),
						.chk_interrupt_mstatus(wr_csrs_wget[75:12]),
						.chk_interrupt_mip(value__h2730),
						.chk_interrupt_mie(value__h2734),
						.chk_interrupt_mideleg(wr_csrs_wget[11:0]),
						.chk_interrupt(chk_interrupt___d71));
  module_decoder_func_32 instance_decoder_func_32_2(.decoder_func_32_inst(x_wget_instruction__h2972),
						    .decoder_func_32_csrs({ IF_wr_csrs_wget__4_BITS_144_TO_143_5_EQ_3_6_OR_ETC___d70,
									    wr_csrs_wget[142:0] }),
						    .decoder_func_32_compressed(rx_from_stage1_first_x[12]),
						    .decoder_func_32(decoder_func_32___d81));
  assign IF_IF_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_ETC___d283 =
	     (x1_avValue_op_addr_rs2addr__h3166 == 5'd0 &&
	      (IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 ==
	       4'd6 ||
	       decoder_func_32___d81[52:50] == 3'd0)) ?
	       64'd0 :
	       registerfile_read_rs2 ;
  assign IF_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_ETC___d123 =
	     (IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 ==
	      4'd6) ?
	       func_cause__h2812 != 7'd1 && func_cause__h2812 != 7'd12 :
	       decoder_func_32___d81[54:53] == 2'd0 ;
  assign IF_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_ETC___d178 =
	     (IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 ==
	      4'd6 &&
	      func_cause__h2812 == 7'd12) ?
	       rx_from_stage1_first_x[118:55] :
	       ((IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 ==
		 4'd6 &&
		 func_cause__h2812 == 7'd2) ?
		  mtval___1__h4011 :
		  64'd0) ;
  assign IF_NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0__ETC___d273 =
	     (IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 !=
	      4'd6 &&
	      decoder_func_32___d81[54:53] == 2'd2) ?
	       2'd2 :
	       (IF_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_ETC___d123 ?
		  2'd0 :
		  2'd1) ;
  assign IF_NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0__ETC___d284 =
	     (IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 !=
	      4'd6 &&
	      decoder_func_32___d81[52:50] == 3'd1) ?
	       SEXT_decoder_func_32_1_BITS_40_TO_9_78___d279 :
	       IF_IF_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_ETC___d283 ;
  assign IF_decoder_func_32_1_BITS_43_TO_41_34_EQ_0_37__ETC___d263 =
	     { CASE_decoder_func_32_1_BITS_43_TO_41_0_decoder_ETC__q5,
	       IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83,
	       rx_from_stage1_first_x[22:21],
	       decoder_func_32___d81[64:60],
	       decoder_func_32___d81[48],
	       decode_word32___d258,
	       rx_from_stage1_first_x[12:0] } ;
  assign IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d129 =
	     (IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 ==
	      4'd6 ||
	      decoder_func_32___d81[54:53] != 2'd2) &&
	     ((IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 ==
	       4'd6) ?
		func_cause__h2812 == 7'd1 || func_cause__h2812 == 7'd12 :
		decoder_func_32___d81[54:53] != 2'd0) ;
  assign IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d198 =
	     IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 ==
	     4'd7 &&
	     !EN_update_eEpoch &&
	     !EN_update_wEpoch ;
  assign IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d212 =
	     IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 ==
	     4'd7 &&
	     (EN_update_eEpoch || EN_update_wEpoch) ;
  assign IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 =
	     (rg_rerun || chk_interrupt___d71[0] ||
	      rx_from_stage1_first_x[20]) ?
	       4'd6 :
	       decoder_func_32___d81[47:44] ;
  assign SEXT_decoder_func_32_1_BITS_40_TO_9_78___d279 =
	     { {32{decoder_func_32_1_BITS_40_TO_9__q4[31]}},
	       decoder_func_32_1_BITS_40_TO_9__q4 } ;
  assign _theResult_____1__h3849 = tx_mtval_to_stage3_enq_data ;
  assign _theResult___fst__h3229 =
	     chk_interrupt___d71[0] ?
	       func_cause___1__h3231 :
	       _theResult___fst__h3248 ;
  assign _theResult___fst__h3248 =
	     rx_from_stage1_first_x[20] ?
	       func_cause___1__h3251 :
	       decoder_func_32___d81[8:2] ;
  assign decoder_func_32_1_BITS_40_TO_9__q4 = decoder_func_32___d81[40:9] ;
  assign eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 =
	     { eEpoch, wEpoch } == rx_from_stage1_first_x[22:21] ;
  assign func_cause___1__h3194 =
	     rg_fencei_rerun ? 7'd24 : (rg_sfence_rerun ? 7'd25 : 7'd23) ;
  assign func_cause___1__h3231 = { 1'd0, chk_interrupt___d71[6:1] } ;
  assign func_cause___1__h3251 = { 1'd0, rx_from_stage1_first_x[19:14] } ;
  assign func_cause__h2812 =
	     rg_rerun ? func_cause___1__h3194 : _theResult___fst__h3229 ;
  assign mtval___1__h3992 = rx_from_stage1_first_x[118:55] + 64'd2 ;
  assign mtval___1__h4011 = { 32'd0, rx_from_stage1_first_x[54:23] } ;
  assign op1__h4864 =
	     (IF_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_ETC___d123 &&
	      value__h3163 == 5'd0) ?
	       64'd0 :
	       registerfile_read_rs1 ;
  assign op2__h4865 =
	     (IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 !=
	      4'd6 &&
	      decoder_func_32___d81[52:50] != 3'd4 &&
	      decoder_func_32___d81[52:50] != 3'd0 &&
	      decoder_func_32___d81[52:50] != 3'd1 &&
	      decoder_func_32___d81[52:50] != 3'd2) ?
	       64'd2 :
	       ((IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 !=
		 4'd6 &&
		 decoder_func_32___d81[52:50] == 3'd2) ?
		  64'd4 :
		  IF_NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0__ETC___d284) ;
  assign op4__h4866 =
	     decoder_func_32___d81[49] ?
	       registerfile_read_rs3 :
	       SEXT_decoder_func_32_1_BITS_40_TO_9_78___d279 ;
  assign value__h2730 = wr_csrs_wget[142:124] ;
  assign value__h2734 = wr_csrs_wget[123:105] ;
  assign value__h3163 =
	     (IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 ==
	      4'd6) ?
	       5'd0 :
	       decoder_func_32___d81[74:70] ;
  assign wr_csrs_whas_AND_registerfile_RDY_read_rs1_AND_ETC___d15 =
	     EN_csrs && registerfile_RDY_read_rs1 &&
	     registerfile_RDY_read_rs2 &&
	     registerfile_RDY_read_rs3 &&
	     tx_meta_to_stage3_enq_rdy_b &&
	     tx_mtval_to_stage3_enq_rdy_b &&
	     tx_inst_enq_rdy_b ;
  assign wr_resume_wfi_whas__14_AND_wr_resume_wfi_wget__ETC___d418 =
	     EN_ma_resume_wfi && ma_resume_wfi_w || EN_update_wEpoch ||
	     EN_update_eEpoch ;
  assign x1_avValue_op_addr_rs2addr__h3166 =
	     (IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 ==
	      4'd6) ?
	       5'd0 :
	       decoder_func_32___d81[69:65] ;
  assign x_wget_instruction__h2972 = rx_from_stage1_first_x[54:23] ;
  always@(rg_op1)
  begin
    case (rg_op1[1:0])
      2'd0, 2'd2:
	  CASE_rg_op1_BITS_1_TO_0_0_rg_op1_BITS_1_TO_0_2_ETC__q1 =
	      rg_op1[1:0];
      default: CASE_rg_op1_BITS_1_TO_0_0_rg_op1_BITS_1_TO_0_2_ETC__q1 = 2'd1;
    endcase
  end
  always@(rg_op2)
  begin
    case (rg_op2[2:0])
      3'd0, 3'd1, 3'd2, 3'd4:
	  CASE_rg_op2_BITS_2_TO_0_0_rg_op2_BITS_2_TO_0_1_ETC__q2 =
	      rg_op2[2:0];
      default: CASE_rg_op2_BITS_2_TO_0_0_rg_op2_BITS_2_TO_0_1_ETC__q2 = 3'd3;
    endcase
  end
  always@(csrs_csr)
  begin
    case (csrs_csr[144:143])
      2'd1, 2'd3:
	  CASE_csrs_csr_BITS_144_TO_143_1_csrs_csr_BITS__ETC__q3 =
	      csrs_csr[144:143];
      default: CASE_csrs_csr_BITS_144_TO_143_1_csrs_csr_BITS__ETC__q3 = 2'd0;
    endcase
  end
  always@(wr_csrs_wget)
  begin
    case (wr_csrs_wget[144:143])
      2'd1, 2'd3:
	  IF_wr_csrs_wget__4_BITS_144_TO_143_5_EQ_3_6_OR_ETC___d70 =
	      wr_csrs_wget[144:143];
      default: IF_wr_csrs_wget__4_BITS_144_TO_143_5_EQ_3_6_OR_ETC___d70 =
		   2'd0;
    endcase
  end
  always@(decoder_func_32___d81)
  begin
    case (decoder_func_32___d81[43:41])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  CASE_decoder_func_32_1_BITS_43_TO_41_0_decoder_ETC__q5 =
	      decoder_func_32___d81[43:41];
      default: CASE_decoder_func_32_1_BITS_43_TO_41_0_decoder_ETC__q5 = 3'd5;
    endcase
  end
  always@(decoder_func_32___d81)
  begin
    case (decoder_func_32___d81[52:50])
      3'd1, 3'd2:
	  CASE_decoder_func_32_1_BITS_52_TO_50_1_decoder_ETC__q6 =
	      decoder_func_32___d81[52:50];
      default: CASE_decoder_func_32_1_BITS_52_TO_50_1_decoder_ETC__q6 = 3'd3;
    endcase
  end
  always@(tx_meta_w_data_wget)
  begin
    case (tx_meta_w_data_wget[28:26])
      3'd0, 3'd1:
	  IF_tx_meta_w_data_whas__23_THEN_IF_tx_meta_w_d_ETC___d440 =
	      tx_meta_w_data_wget[28:26];
      3'd2: IF_tx_meta_w_data_whas__23_THEN_IF_tx_meta_w_d_ETC___d440 = 3'd4;
      3'd3: IF_tx_meta_w_data_whas__23_THEN_IF_tx_meta_w_d_ETC___d440 = 3'd2;
      3'd4: IF_tx_meta_w_data_whas__23_THEN_IF_tx_meta_w_d_ETC___d440 = 3'd3;
      default: IF_tx_meta_w_data_whas__23_THEN_IF_tx_meta_w_d_ETC___d440 =
		   3'd5;
    endcase
  end
  always@(IF_tx_meta_w_data_whas__23_THEN_IF_tx_meta_w_d_ETC___d440)
  begin
    case (IF_tx_meta_w_data_whas__23_THEN_IF_tx_meta_w_d_ETC___d440)
      3'd0, 3'd1:
	  CASE_IF_tx_meta_w_data_whas__23_THEN_IF_tx_met_ETC__q7 =
	      IF_tx_meta_w_data_whas__23_THEN_IF_tx_meta_w_d_ETC___d440;
      3'd2: CASE_IF_tx_meta_w_data_whas__23_THEN_IF_tx_met_ETC__q7 = 3'd3;
      3'd3: CASE_IF_tx_meta_w_data_whas__23_THEN_IF_tx_met_ETC__q7 = 3'd4;
      3'd4: CASE_IF_tx_meta_w_data_whas__23_THEN_IF_tx_met_ETC__q7 = 3'd2;
      default: CASE_IF_tx_meta_w_data_whas__23_THEN_IF_tx_met_ETC__q7 = 3'd5;
    endcase
  end
  always@(rg_op1_port1__read)
  begin
    case (rg_op1_port1__read[1:0])
      2'd0, 2'd2:
	  CASE_rg_op1port1__read_BITS_1_TO_0_0_rg_op1p_ETC__q8 =
	      rg_op1_port1__read[1:0];
      default: CASE_rg_op1port1__read_BITS_1_TO_0_0_rg_op1p_ETC__q8 = 2'd1;
    endcase
  end
  always@(rg_op2_port1__read)
  begin
    case (rg_op2_port1__read[2:0])
      3'd0, 3'd1, 3'd2, 3'd4:
	  CASE_rg_op2port1__read_BITS_2_TO_0_0_rg_op2p_ETC__q9 =
	      rg_op2_port1__read[2:0];
      default: CASE_rg_op2port1__read_BITS_2_TO_0_0_rg_op2p_ETC__q9 = 3'd3;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        eEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_fencei_rerun <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_op1 <= `BSV_ASSIGNMENT_DELAY 71'd0;
	rg_op2 <= `BSV_ASSIGNMENT_DELAY 72'd0;
	rg_op3 <= `BSV_ASSIGNMENT_DELAY 70'd0;
	rg_rerun <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_sfence_rerun <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_stall <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_wfi <= `BSV_ASSIGNMENT_DELAY 1'd0;
	wEpoch <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (eEpoch_EN) eEpoch <= `BSV_ASSIGNMENT_DELAY eEpoch_D_IN;
	if (rg_fencei_rerun_EN)
	  rg_fencei_rerun <= `BSV_ASSIGNMENT_DELAY rg_fencei_rerun_D_IN;
	if (rg_op1_EN) rg_op1 <= `BSV_ASSIGNMENT_DELAY rg_op1_D_IN;
	if (rg_op2_EN) rg_op2 <= `BSV_ASSIGNMENT_DELAY rg_op2_D_IN;
	if (rg_op3_EN) rg_op3 <= `BSV_ASSIGNMENT_DELAY rg_op3_D_IN;
	if (rg_rerun_EN) rg_rerun <= `BSV_ASSIGNMENT_DELAY rg_rerun_D_IN;
	if (rg_sfence_rerun_EN)
	  rg_sfence_rerun <= `BSV_ASSIGNMENT_DELAY rg_sfence_rerun_D_IN;
	if (rg_stall_EN) rg_stall <= `BSV_ASSIGNMENT_DELAY rg_stall_D_IN;
	if (rg_wfi_EN) rg_wfi <= `BSV_ASSIGNMENT_DELAY rg_wfi_D_IN;
	if (wEpoch_EN) wEpoch <= `BSV_ASSIGNMENT_DELAY wEpoch_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    eEpoch = 1'h0;
    rg_fencei_rerun = 1'h0;
    rg_op1 = 71'h2AAAAAAAAAAAAAAAAA;
    rg_op2 = 72'hAAAAAAAAAAAAAAAAAA;
    rg_op3 = 70'h2AAAAAAAAAAAAAAAAA;
    rg_rerun = 1'h0;
    rg_sfence_rerun = 1'h0;
    rg_stall = 1'h0;
    rg_wfi = 1'h0;
    wEpoch = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d28 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d29 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d30 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d37 =
	(TASK_testplusargs___d28 ||
	 TASK_testplusargs___d29 && TASK_testplusargs___d30) &&
	wr_csrs_wget[144:143] == 2'd3;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d39 =
	(TASK_testplusargs___d28 ||
	 TASK_testplusargs___d29 && TASK_testplusargs___d30) &&
	wr_csrs_wget[144:143] == 2'd1;
    TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d43 =
	(TASK_testplusargs___d28 ||
	 TASK_testplusargs___d29 && TASK_testplusargs___d30) &&
	wr_csrs_wget[144:143] != 2'd3 &&
	wr_csrs_wget[144:143] != 2'd1;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  v__h2604 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("[%10d", v__h2604, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("[%2d]STAGE2: csrs:", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("CSRtoDecode { ", "prv: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d37)
	$write("Machine");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d39)
	$write("Supervisor");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_8_OR_TASK_testplusargs_9_AND_ETC___d43)
	$write("User");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write(", ", "csr_mip: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("'h%h", wr_csrs_wget[142:124]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write(", ", "csr_mie: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("'h%h", wr_csrs_wget[123:105]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write(", ", "csr_misa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("'h%h", wr_csrs_wget[104:79]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write(", ", "frm: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("'h%h", wr_csrs_wget[78:76]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write(", ", "csr_mstatus: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("'h%h", wr_csrs_wget[75:12]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write(", ", "csr_mideleg: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("'h%h", wr_csrs_wget[11:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d28 ||
	   TASK_testplusargs___d29 && TASK_testplusargs___d30))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d50 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d51 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d52 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  v__h2904 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d50 ||
	   TASK_testplusargs___d51 && TASK_testplusargs___d52))
	$write("[%10d", v__h2904, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d50 ||
	   TASK_testplusargs___d51 && TASK_testplusargs___d52))
	$write("[%2d]STAGE2 : PC:%h Instruction:%h",
	       hartid,
	       rx_from_stage1_first_x[118:55],
	       rx_from_stage1_first_x[54:23]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d50 ||
	   TASK_testplusargs___d51 && TASK_testplusargs___d52))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d62 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d63 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d64 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  v__h3109 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write("[%10d", v__h3109, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write("[%2d]STAGE2 : OpAddr: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write("OpAddr { ", "rs1addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write("'h%h", value__h3163);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write(", ", "rs2addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write("'h%h", x1_avValue_op_addr_rs2addr__h3166);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write(", ", "rd: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write("'h%h", decoder_func_32___d81[64:60]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write(", ", "rs3addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write("'h%h", decoder_func_32___d81[59:55], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d62 ||
	   TASK_testplusargs___d63 && TASK_testplusargs___d64))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d91 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d92 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d93 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d101 =
	(TASK_testplusargs___d91 ||
	 TASK_testplusargs___d92 && TASK_testplusargs___d93) &&
	IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd6 &&
	decoder_func_32___d81[54:53] == 2'd2;
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d125 =
	(TASK_testplusargs___d91 ||
	 TASK_testplusargs___d92 && TASK_testplusargs___d93) &&
	(IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 == 4'd6 ||
	 decoder_func_32___d81[54:53] != 2'd2) &&
	IF_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_ETC___d123;
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d130 =
	(TASK_testplusargs___d91 ||
	 TASK_testplusargs___d92 && TASK_testplusargs___d93) &&
	IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d129;
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d134 =
	(TASK_testplusargs___d91 ||
	 TASK_testplusargs___d92 && TASK_testplusargs___d93) &&
	IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd6 &&
	decoder_func_32___d81[52:50] == 3'd4;
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d140 =
	(TASK_testplusargs___d91 ||
	 TASK_testplusargs___d92 && TASK_testplusargs___d93) &&
	(IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 == 4'd6 ||
	 decoder_func_32___d81[52:50] == 3'd0);
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d143 =
	(TASK_testplusargs___d91 ||
	 TASK_testplusargs___d92 && TASK_testplusargs___d93) &&
	IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd6 &&
	decoder_func_32___d81[52:50] == 3'd1;
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d146 =
	(TASK_testplusargs___d91 ||
	 TASK_testplusargs___d92 && TASK_testplusargs___d93) &&
	IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd6 &&
	decoder_func_32___d81[52:50] == 3'd2;
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d154 =
	(TASK_testplusargs___d91 ||
	 TASK_testplusargs___d92 && TASK_testplusargs___d93) &&
	decoder_func_32___d81[52:50] != 3'd4 &&
	IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd6 &&
	decoder_func_32___d81[52:50] != 3'd0 &&
	decoder_func_32___d81[52:50] != 3'd1 &&
	decoder_func_32___d81[52:50] != 3'd2;
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d156 =
	(TASK_testplusargs___d91 ||
	 TASK_testplusargs___d92 && TASK_testplusargs___d93) &&
	decoder_func_32___d81[49];
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d158 =
	(TASK_testplusargs___d91 ||
	 TASK_testplusargs___d92 && TASK_testplusargs___d93) &&
	!decoder_func_32___d81[49];
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d160 =
	(TASK_testplusargs___d91 ||
	 TASK_testplusargs___d92 && TASK_testplusargs___d93) &&
	decoder_func_32___d81[48];
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d162 =
	(TASK_testplusargs___d91 ||
	 TASK_testplusargs___d92 && TASK_testplusargs___d93) &&
	!decoder_func_32___d81[48];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  v__h3492 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d91 ||
	   TASK_testplusargs___d92 && TASK_testplusargs___d93))
	$write("[%10d", v__h3492, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d91 ||
	   TASK_testplusargs___d92 && TASK_testplusargs___d93))
	$write("[%2d]STAGE2 : OpType: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d91 ||
	   TASK_testplusargs___d92 && TASK_testplusargs___d93))
	$write("OpType { ", "rs1type: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d101)
	$write("FloatingRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d125)
	$write("IntegerRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d130)
	$write("PC");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d91 ||
	   TASK_testplusargs___d92 && TASK_testplusargs___d93))
	$write(", ", "rs2type: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d134)
	$write("FloatingRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d140)
	$write("IntegerRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d143)
	$write("Immediate");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d146)
	$write("Constant4");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d154)
	$write("Constant2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d91 ||
	   TASK_testplusargs___d92 && TASK_testplusargs___d93))
	$write(", ", "rs3type: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d156)
	$write("FRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d158)
	$write("IRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d91 ||
	   TASK_testplusargs___d92 && TASK_testplusargs___d93))
	$write(", ", "rdtype: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d160)
	$write("FRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d162)
	$write("IRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d91 ||
	   TASK_testplusargs___d92 && TASK_testplusargs___d93))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d91 ||
	   TASK_testplusargs___d92 && TASK_testplusargs___d93))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d163 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d164 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  TASK_testplusargs___d165 = $test$plusargs("l1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch)
	begin
	  v__h3916 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d163 ||
	   TASK_testplusargs___d164 && TASK_testplusargs___d165))
	$write("[%10d", v__h3916, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d163 ||
	   TASK_testplusargs___d164 && TASK_testplusargs___d165))
	$write("[%2d]STAGE2: BadAddress(MTVAL): %h",
	       hartid,
	       _theResult_____1__h3849);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  (TASK_testplusargs___d163 ||
	   TASK_testplusargs___d164 && TASK_testplusargs___d165))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d198)
	begin
	  TASK_testplusargs___d200 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d198)
	begin
	  TASK_testplusargs___d201 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d198)
	begin
	  TASK_testplusargs___d202 = $test$plusargs("l0");
	  #0;
	end
    NOT_wr_flush_from_exe_whas__87_88_OR_NOT_wr_fl_ETC___d205 =
	!EN_update_eEpoch && !EN_update_wEpoch &&
	(TASK_testplusargs___d200 ||
	 TASK_testplusargs___d201 && TASK_testplusargs___d202);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d198)
	begin
	  v__h4381 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 == 4'd7 &&
	  NOT_wr_flush_from_exe_whas__87_88_OR_NOT_wr_fl_ETC___d205)
	$write("[%10d", v__h4381, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 == 4'd7 &&
	  NOT_wr_flush_from_exe_whas__87_88_OR_NOT_wr_fl_ETC___d205)
	$write("[%2d]STAGE2 : Encountered WFI", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 == 4'd7 &&
	  NOT_wr_flush_from_exe_whas__87_88_OR_NOT_wr_fl_ETC___d205)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d212)
	begin
	  TASK_testplusargs___d214 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d212)
	begin
	  TASK_testplusargs___d215 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d212)
	begin
	  TASK_testplusargs___d216 = $test$plusargs("l0");
	  #0;
	end
    wr_flush_from_exe_whas__87_AND_wr_flush_from_e_ETC___d219 =
	(EN_update_eEpoch || EN_update_wEpoch) &&
	(TASK_testplusargs___d214 ||
	 TASK_testplusargs___d215 && TASK_testplusargs___d216);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d212)
	begin
	  v__h4564 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 == 4'd7 &&
	  wr_flush_from_exe_whas__87_AND_wr_flush_from_e_ETC___d219)
	$write("[%10d", v__h4564, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 == 4'd7 &&
	  wr_flush_from_exe_whas__87_AND_wr_flush_from_e_ETC___d219)
	$write("[%2d]STAGE2 : Dropping WFI", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 == 4'd7 &&
	  wr_flush_from_exe_whas__87_AND_wr_flush_from_e_ETC___d219)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd7)
	begin
	  TASK_testplusargs___d296 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd7)
	begin
	  TASK_testplusargs___d297 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd7)
	begin
	  TASK_testplusargs___d298 = $test$plusargs("l1");
	  #0;
	end
    NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301 =
	IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd7 &&
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298);
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d304 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	decoder_func_32___d81[43:41] == 3'd0;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d307 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	decoder_func_32___d81[43:41] == 3'd1;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d310 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	decoder_func_32___d81[43:41] == 3'd3;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d313 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	decoder_func_32___d81[43:41] == 3'd4;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d316 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	decoder_func_32___d81[43:41] == 3'd2;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d319 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	decoder_func_32___d81[43:41] != 3'd0 &&
	decoder_func_32___d81[43:41] != 3'd1 &&
	decoder_func_32___d81[43:41] != 3'd3 &&
	decoder_func_32___d81[43:41] != 3'd4 &&
	decoder_func_32___d81[43:41] != 3'd2;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d323 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 == 4'd0;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d325 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 == 4'd1;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d328 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 == 4'd2;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d331 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 == 4'd3;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d334 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 == 4'd4;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d337 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 == 4'd5;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d339 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 == 4'd6;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d342 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 == 4'd8;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d361 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	decoder_func_32___d81[48];
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d358 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd0 &&
	IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd1 &&
	IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd2 &&
	IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd3 &&
	IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd4 &&
	IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd5 &&
	IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd6 &&
	IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd8;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d364 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	!decoder_func_32___d81[48];
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d367 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	decode_word32___d258;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d371 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	!decode_word32___d258;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d376 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	!rx_from_stage1_first_x[12];
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d379 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	rx_from_stage1_first_x[12];
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d387 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	!rx_from_stage1_first_x[9];
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d391 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	rx_from_stage1_first_x[9];
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d397 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	!rx_from_stage1_first_x[8];
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d401 =
	(TASK_testplusargs___d296 ||
	 TASK_testplusargs___d297 && TASK_testplusargs___d298) &&
	rx_from_stage1_first_x[8];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd7)
	begin
	  v__h5782 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write("[%10d", v__h5782, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write("[%2d]STAGE2: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write("Stage3Meta { ", "pc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write("'h%h", rx_from_stage1_first_x[118:55]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write(", ", "funct: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write("'h%h", func_cause__h2812);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write(", ", "memaccess: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd7 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d304)
	$write("Load");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd7 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d307)
	$write("Store");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd7 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d310)
	$write("Fence");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd7 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d313)
	$write("FenceI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd7 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d316)
	$write("Atomic");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd7 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d319)
	$write("SFence");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write(", ", "inst_type: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d323)
	$write("ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d325)
	$write("MEMORY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d328)
	$write("BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d331)
	$write("JAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d334)
	$write("JALR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d337)
	$write("SYSTEM_INSTR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d339)
	$write("TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d342)
	$write("FLOAT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd7 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d358)
	$write("MULDIV");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write(", ", "epochs: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write("'h%h", rx_from_stage1_first_x[22:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write(", ", "rd: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write("'h%h", decoder_func_32___d81[64:60]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write(", ", "rdtype: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd7 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d361)
	$write("FRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd7 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d364)
	$write("IRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write(", ", "word32: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd7 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d367)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd7 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d371)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write(", ", "compressed: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd7 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d376)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd7 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d379)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write(", ", "btbresponse: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write("BTBResponse { ", "prediction: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write("'h%h", rx_from_stage1_first_x[11:10]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write(", ", "btbhit: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd7 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d387)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd7 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d391)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write(", ", "hi: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd7 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d397)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_OR_IF_ETC___d83 != 4'd7 &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d401)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write(", ", "history: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write("'h%h", rx_from_stage1_first_x[7:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	  NOT_IF_rg_rerun_8_OR_chk_interrupt_1_BIT_0_2_O_ETC___d301)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  !eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185)
	begin
	  TASK_testplusargs___d407 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  !eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185)
	begin
	  TASK_testplusargs___d408 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  !eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185)
	begin
	  TASK_testplusargs___d409 = $test$plusargs("l0");
	  #0;
	end
    NOT_eEpoch_read__80_CONCAT_wEpoch_read__81_82__ETC___d412 =
	!eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185 &&
	(TASK_testplusargs___d407 ||
	 TASK_testplusargs___d408 && TASK_testplusargs___d409);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  !eEpoch_read__80_CONCAT_wEpoch_read__81_82_EQ_I_ETC___d185)
	begin
	  v__h4150 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  NOT_eEpoch_read__80_CONCAT_wEpoch_read__81_82__ETC___d412)
	$write("[%10d", v__h4150, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  NOT_eEpoch_read__80_CONCAT_wEpoch_read__81_82__ETC___d412)
	$write("[%2d]STAGE2 : Dropping Instruction due to epoch mis - match",
	       hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_decode_and_opfetch &&
	  NOT_eEpoch_read__80_CONCAT_wEpoch_read__81_82__ETC___d412)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d482 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d483 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d484 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_82_OR_TASK_testplusargs_83_A_ETC___d491 =
	(TASK_testplusargs___d482 ||
	 TASK_testplusargs___d483 && TASK_testplusargs___d484) &&
	commit_rd_commit[0];
    TASK_testplusargs_82_OR_TASK_testplusargs_83_A_ETC___d493 =
	(TASK_testplusargs___d482 ||
	 TASK_testplusargs___d483 && TASK_testplusargs___d484) &&
	!commit_rd_commit[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  v__h7172 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d482 ||
	   TASK_testplusargs___d483 && TASK_testplusargs___d484))
	$write("[%10d", v__h7172, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d482 ||
	   TASK_testplusargs___d483 && TASK_testplusargs___d484))
	$write("[%2d]STAGE2: Commit: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d482 ||
	   TASK_testplusargs___d483 && TASK_testplusargs___d484))
	$write("CommitData { ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d482 ||
	   TASK_testplusargs___d483 && TASK_testplusargs___d484))
	$write("'h%h", commit_rd_commit[69:65]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d482 ||
	   TASK_testplusargs___d483 && TASK_testplusargs___d484))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d482 ||
	   TASK_testplusargs___d483 && TASK_testplusargs___d484))
	$write("'h%h", commit_rd_commit[64:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d482 ||
	   TASK_testplusargs___d483 && TASK_testplusargs___d484))
	$write(", ", "rdtype: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_82_OR_TASK_testplusargs_83_A_ETC___d491)
	$write("FRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_82_OR_TASK_testplusargs_83_A_ETC___d493)
	$write("IRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d482 ||
	   TASK_testplusargs___d483 && TASK_testplusargs___d484))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d482 ||
	   TASK_testplusargs___d483 && TASK_testplusargs___d484))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d494 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d495 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d496 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_94_OR_TASK_testplusargs_95_A_ETC___d505 =
	(TASK_testplusargs___d494 ||
	 TASK_testplusargs___d495 && TASK_testplusargs___d496) &&
	rg_op1_port1__read[1:0] == 2'd2;
    TASK_testplusargs_94_OR_TASK_testplusargs_95_A_ETC___d507 =
	(TASK_testplusargs___d494 ||
	 TASK_testplusargs___d495 && TASK_testplusargs___d496) &&
	rg_op1_port1__read[1:0] == 2'd0;
    TASK_testplusargs_94_OR_TASK_testplusargs_95_A_ETC___d511 =
	(TASK_testplusargs___d494 ||
	 TASK_testplusargs___d495 && TASK_testplusargs___d496) &&
	rg_op1_port1__read[1:0] != 2'd2 &&
	rg_op1_port1__read[1:0] != 2'd0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  v__h7341 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d494 ||
	   TASK_testplusargs___d495 && TASK_testplusargs___d496))
	$write("[%10d", v__h7341, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d494 ||
	   TASK_testplusargs___d495 && TASK_testplusargs___d496))
	$write("[%2d]STAGE2: RgOp1: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d494 ||
	   TASK_testplusargs___d495 && TASK_testplusargs___d496))
	$write("RFOp1 { ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d494 ||
	   TASK_testplusargs___d495 && TASK_testplusargs___d496))
	$write("'h%h", rg_op1_port1__read[70:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d494 ||
	   TASK_testplusargs___d495 && TASK_testplusargs___d496))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d494 ||
	   TASK_testplusargs___d495 && TASK_testplusargs___d496))
	$write("'h%h", rg_op1_port1__read[65:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d494 ||
	   TASK_testplusargs___d495 && TASK_testplusargs___d496))
	$write(", ", "optype: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_94_OR_TASK_testplusargs_95_A_ETC___d505)
	$write("FloatingRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_94_OR_TASK_testplusargs_95_A_ETC___d507)
	$write("IntegerRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_94_OR_TASK_testplusargs_95_A_ETC___d511)
	$write("PC");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d494 ||
	   TASK_testplusargs___d495 && TASK_testplusargs___d496))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d494 ||
	   TASK_testplusargs___d495 && TASK_testplusargs___d496))
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d512 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d513 = $test$plusargs("mstage2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  TASK_testplusargs___d514 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d523 =
	(TASK_testplusargs___d512 ||
	 TASK_testplusargs___d513 && TASK_testplusargs___d514) &&
	rg_op2_port1__read[2:0] == 3'd4;
    TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d525 =
	(TASK_testplusargs___d512 ||
	 TASK_testplusargs___d513 && TASK_testplusargs___d514) &&
	rg_op2_port1__read[2:0] == 3'd0;
    TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d527 =
	(TASK_testplusargs___d512 ||
	 TASK_testplusargs___d513 && TASK_testplusargs___d514) &&
	rg_op2_port1__read[2:0] == 3'd1;
    TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d529 =
	(TASK_testplusargs___d512 ||
	 TASK_testplusargs___d513 && TASK_testplusargs___d514) &&
	rg_op2_port1__read[2:0] == 3'd2;
    TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d537 =
	(TASK_testplusargs___d512 ||
	 TASK_testplusargs___d513 && TASK_testplusargs___d514) &&
	rg_op2_port1__read[2:0] != 3'd4 &&
	rg_op2_port1__read[2:0] != 3'd0 &&
	rg_op2_port1__read[2:0] != 3'd1 &&
	rg_op2_port1__read[2:0] != 3'd2;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd)
	begin
	  v__h7570 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d512 ||
	   TASK_testplusargs___d513 && TASK_testplusargs___d514))
	$write("[%10d", v__h7570, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d512 ||
	   TASK_testplusargs___d513 && TASK_testplusargs___d514))
	$write("[%2d]STAGE2: RgOp2: ", hartid);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d512 ||
	   TASK_testplusargs___d513 && TASK_testplusargs___d514))
	$write("RFOp2 { ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d512 ||
	   TASK_testplusargs___d513 && TASK_testplusargs___d514))
	$write("'h%h", rg_op2_port1__read[71:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d512 ||
	   TASK_testplusargs___d513 && TASK_testplusargs___d514))
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d512 ||
	   TASK_testplusargs___d513 && TASK_testplusargs___d514))
	$write("'h%h", rg_op2_port1__read[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d512 ||
	   TASK_testplusargs___d513 && TASK_testplusargs___d514))
	$write(", ", "optype: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d523)
	$write("FloatingRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d525)
	$write("IntegerRF");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d527)
	$write("Immediate");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d529)
	$write("Constant4");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  TASK_testplusargs_12_OR_TASK_testplusargs_13_A_ETC___d537)
	$write("Constant2");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d512 ||
	   TASK_testplusargs___d513 && TASK_testplusargs___d514))
	$write(" }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_commit_rd &&
	  (TASK_testplusargs___d512 ||
	   TASK_testplusargs___d513 && TASK_testplusargs___d514))
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkstage2

